---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Uma Guia Completa de Python 2025: Tutorial de Zero a Avançado';
const end_url = 'python';
const description = 'Aprenda Python desde zero com esta guia completa 2025. Tipos de dados, funções, classes, POO e mais. Tutorial passo a passo com exemplos práticos para iniciantes e desenvolvedores.';
const keywords = 'python tutorial, aprender python, guia python, python de zero, tipos de dados python, funções python, classes python, programação python, python português, tutorial python completo';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/icon-python.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=800
    image_height=336
    image_extension=webp
    article_date=2021-02-11+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#1.-Resumo"><h2>1. Resumo</h2></a>
      <a class="anchor-link" href="#2.-Tipos-de-dados-do-Python"><h2>2. Tipos de dados do Python</h2></a>
      <a class="anchor-link" href="#2.1.-Cadeias-de-Caracteres"><h3>2.1. Cadeias de Caracteres</h3></a>
      <a class="anchor-link" href="#2.2.-N%C3%BAmeros"><h3>2.2. Números</h3></a>
      <a class="anchor-link" href="#2.2.1.-Inteiros"><h4>2.2.1. Inteiros</h4></a>
      <a class="anchor-link" href="#2.2.2.-Float"><h4>2.2.2. Float</h4></a>
      <a class="anchor-link" href="#2.2.3.-Complexos"><h4>2.2.3. Complexos</h4></a>
      <a class="anchor-link" href="#2.2.4.-Convers%C3%A3o"><h4>2.2.4. Conversão</h4></a>
      <a class="anchor-link" href="#2.3.-Sequ%C3%AAncias"><h3>2.3. Sequências</h3></a>
      <a class="anchor-link" href="#2.3.1.-Listas"><h4>2.3.1. Listas</h4></a>
      <a class="anchor-link" href="#2.3.1.1.-Editar-listas"><h5>2.3.1.1. Editar listas</h5></a>
      <a class="anchor-link" href="#2.3.1.2.-Compreens%C3%A3o-de-lista"><h5>2.3.1.2. Compreensão de lista</h5></a>
      <a class="anchor-link" href="#2.3.1.3.-Ordenar-listas"><h5>2.3.1.3. Ordenar listas</h5></a>
      <a class="anchor-link" href="#2.3.1.4.-Copiar-listas"><h5>2.3.1.4. Copiar listas</h5></a>
      <a class="anchor-link" href="#2.3.1.5.-Concatenar-listas"><h5>2.3.1.5. Concatenar listas</h5></a>
      <a class="anchor-link" href="#2.3.2.-Tuplas"><h4>2.3.2. Tuplas</h4></a>
      <a class="anchor-link" href="#2.3.2.1.-Modificar-tuplas"><h5>2.3.2.1. Modificar tuplas</h5></a>
      <a class="anchor-link" href="#2.3.2.2.-Desempacotar-tuplas"><h5>2.3.2.2. Desempacotar tuplas</h5></a>
      <a class="anchor-link" href="#2.3.2.3.-Concatenar-tuplas"><h5>2.3.2.3. Concatenar tuplas</h5></a>
      <a class="anchor-link" href="#2.3.2.4.-M%C3%A9todos-das-tuplas"><h5>2.3.2.4. Métodos das tuplas</h5></a>
      <a class="anchor-link" href="#2.3.3.-Intervalo"><h4>2.3.3. Intervalo</h4></a>
      <a class="anchor-link" href="#2.4.-Dicion%C3%A1rios"><h3>2.4. Dicionários</h3></a>
      <a class="anchor-link" href="#2.4.1.-Acessar-os-itens"><h4>2.4.1. Acessar os itens</h4></a>
      <a class="anchor-link" href="#2.4.2.-Modificar-os-itens"><h4>2.4.2. Modificar os itens</h4></a>
      <a class="anchor-link" href="#2.4.3.-Adicionar-itens"><h4>2.4.3. Adicionar itens</h4></a>
      <a class="anchor-link" href="#2.4.4.-Remover-itens"><h4>2.4.4. Remover itens</h4></a>
      <a class="anchor-link" href="#2.4.5.-Copiar-dicion%C3%A1rios"><h4>2.4.5. Copiar dicionários</h4></a>
      <a class="anchor-link" href="#2.4.6.-Dicion%C3%A1rios-aninhados"><h4>2.4.6. Dicionários aninhados</h4></a>
      <a class="anchor-link" href="#2.4.7.-M%C3%A9todos-dos-dicion%C3%A1rios"><h4>2.4.7. Métodos dos dicionários</h4></a>
      <a class="anchor-link" href="#2.4.8.-Compreens%C3%A3o-de-dicion%C3%A1rio"><h4>2.4.8. Compreensão de dicionário</h4></a>
      <a class="anchor-link" href="#2.5.-Sets"><h3>2.5. Sets</h3></a>
      <a class="anchor-link" href="#2.5.1.-Conjunto"><h4>2.5.1. Conjunto</h4></a>
      <a class="anchor-link" href="#2.5.1.1.-Adicionar-itens"><h5>2.5.1.1. Adicionar itens</h5></a>
      <a class="anchor-link" href="#2.5.1.2.-Eliminar-itens"><h5>2.5.1.2. Eliminar itens</h5></a>
      <a class="anchor-link" href="#2.5.1.3.-Unir-itens"><h5>2.5.1.3. Unir itens</h5></a>
      <a class="anchor-link" href="#2.5.1.4.-M%C3%A9todos-dos-conjuntos"><h5>2.5.1.4. Métodos dos conjuntos</h5></a>
      <a class="anchor-link" href="#2.5.2.-FrozenSet"><h4>2.5.2. FrozenSet</h4></a>
      <a class="anchor-link" href="#2.6.-Booleanos"><h3>2.6. Booleanos</h3></a>
      <a class="anchor-link" href="#2.6.1.-Outros-tipos-de-dados-True-e-False"><h4>2.6.1. Outros tipos de dados True e False</h4></a>
      <a class="anchor-link" href="#2.7.-Bin%C3%A1rios"><h3>2.7. Binários</h3></a>
      <a class="anchor-link" href="#2.7.1.-Bytes"><h4>2.7.1. Bytes</h4></a>
      <a class="anchor-link" href="#2.7.2.-Bytearray"><h4>2.7.2. Bytearray</h4></a>
      <a class="anchor-link" href="#2.7.3.-MemoryView"><h4>2.7.3. MemoryView</h4></a>
      <a class="anchor-link" href="#3.-Operadores"><h2>3. Operadores</h2></a>
      <a class="anchor-link" href="#3.1.-Operadores-aritm%C3%A9ticos"><h3>3.1. Operadores aritméticos</h3></a>
      <a class="anchor-link" href="#3.2.-Operadores-de-compara%C3%A7%C3%A3o"><h3>3.2. Operadores de comparação</h3></a>
      <a class="anchor-link" href="#3.3.-Operadores-l%C3%B3gicos"><h3>3.3. Operadores lógicos</h3></a>
      <a class="anchor-link" href="#34.-Operadores-de-identidade"><h3>34. Operadores de identidade</h3></a>
      <a class="anchor-link" href="#35.-Operadores-de-pertin%C3%AAncia"><h3>35. Operadores de pertinência</h3></a>
      <a class="anchor-link" href="#36.-Operadores-bit-a-bit"><h3>36. Operadores bit a bit</h3></a>
      <a class="anchor-link" href="#37.-Operadores-de-atribui%C3%A7%C3%A3o"><h3>37. Operadores de atribuição</h3></a>
      <a class="anchor-link" href="#4.-Controle-de-fluxo"><h2>4. Controle de fluxo</h2></a>
      <a class="anchor-link" href="#4.1.-Se"><h3>4.1. Se</h3></a>
      <a class="anchor-link" href="#4.2.-Enquanto"><h3>4.2. Enquanto</h3></a>
      <a class="anchor-link" href="#4.3.-Para"><h3>4.3. Para</h3></a>
      <a class="anchor-link" href="#5.-Fun%C3%A7%C3%B5es"><h2>5. Funções</h2></a>
      <a class="anchor-link" href="#5.1.-Fun%C3%A7%C3%B5es-integradas"><h3>5.1. Funções integradas</h3></a>
      <a class="anchor-link" href="#5.2.-Documenta%C3%A7%C3%A3o-de-uma-fun%C3%A7%C3%A3o"><h3>5.2. Documentação de uma função</h3></a>
      <a class="anchor-link" href="#5.3.-Decoradores"><h3>5.3. Decoradores</h3></a>
      <a class="anchor-link" href="#5.4.-*args-e-**kwargs"><h3>5.4. <code>*args</code> e <code>**kwargs</code></h3></a>
      <a class="anchor-link" href="#2.5.1.-*args"><h4>2.5.1. <code>*args</code></h4></a>
      <a class="anchor-link" href="#2.5.4.2.-**kwargs"><h4>2.5.4.2. <code>**kwargs</code></h4></a>
      <a class="anchor-link" href="#6.-Fun%C3%A7%C3%B5es-Adicionais"><h2>6. Funções Adicionais</h2></a>
      <a class="anchor-link" href="#6.1.-Fun%C3%A7%C3%B5es-lambda"><h3>6.1. Funções <em>lambda</em></h3></a>
      <a class="anchor-link" href="#6.2.-Fun%C3%A7%C3%A3o-map"><h3>6.2. Função <code>map</code></h3></a>
      <a class="anchor-link" href="#6.3.-Fun%C3%A7%C3%A3o-filter"><h3>6.3. Função <code>filter</code></h3></a>
      <a class="anchor-link" href="#6.4.-Fun%C3%A7%C3%A3o-reduce"><h3>6.4. Função <code>reduce</code></h3></a>
      <a class="anchor-link" href="#6.5.-Fun%C3%A7%C3%A3o-zip"><h3>6.5. Função <code>zip</code></h3></a>
      <a class="anchor-link" href="#6.5.-Geradores"><h3>6.5. Geradores</h3></a>
      <a class="anchor-link" href="#6.6.-Fun%C3%A7%C3%B5es-de-ordem-superior"><h3>6.6. Funções de ordem superior</h3></a>
      <a class="anchor-link" href="#7.-Classes-e-objetos"><h2>7. Classes e objetos</h2></a>
      <a class="anchor-link" href="#7.1.-Heran%C3%A7a"><h3>7.1. Herança</h3></a>
      <a class="anchor-link" href="#7.2.-Sobrecarga-de-operadores"><h3>7.2. Sobrecarga de operadores</h3></a>
      <a class="anchor-link" href="#7.3.-Iteradores-personalizados"><h3>7.3. Iteradores personalizados</h3></a>
      <a class="anchor-link" href="#7.4.-Chamada-a-objetos-como-fun%C3%A7%C3%B5es"><h3>7.4. Chamada a objetos como funções</h3></a>
      <a class="anchor-link" href="#7.5.-Atributos-e-fun%C3%A7%C3%B5es-privadas"><h3>7.5. Atributos e funções privadas</h3></a>
      <a class="anchor-link" href="#8.-Iteradores"><h2>8. Iteradores</h2></a>
      <a class="anchor-link" href="#8.1.-Criar-um-objeto-iterador"><h3>8.1. Criar um objeto iterador</h3></a>
      <a class="anchor-link" href="#8.2.-Iterar-obtendo-o-%C3%ADndice-e-o-valor"><h3>8.2. Iterar obtendo o índice e o valor</h3></a>
      <a class="anchor-link" href="#8.3.-Iterar-simultaneamente-sobre-dois-objetos-iter%C3%A1veis"><h3>8.3. Iterar simultaneamente sobre dois objetos iteráveis</h3></a>
      <a class="anchor-link" href="#9.-Alcance-de-vari%C3%A1veis"><h2>9. Alcance de variáveis</h2></a>
      <a class="anchor-link" href="#9.1.-Alcance-local"><h3>9.1. Alcance local</h3></a>
      <a class="anchor-link" href="#9.2.-Alcance-global"><h3>9.2. Alcance global</h3></a>
      <a class="anchor-link" href="#10.-M%C3%B3dulos"><h2>10. Módulos</h2></a>
      <a class="anchor-link" href="#10.1.-Pontos-de-entrada:-arquivos-como-m%C3%B3dulos-e-n%C3%A3o-como-scripts"><h3>10.1. Pontos de entrada: arquivos como módulos e-não como scripts</h3></a>
      <a class="anchor-link" href="#para-cond"><h2>para cond</h2></a>
      <a class="anchor-link" href="#11.-Pacotes"><h2>11. Pacotes</h2></a>
      <a class="anchor-link" href="#Bienvenidos-al-Curso-de-Markdown"><h3>Bienvenidos al-Curso-de-Markdown</h3></a>
      <a class="anchor-link" href="#%C2%BFQu%C3%A9-es-Markdown?"><h3>¿Qué es Markdown?</h3></a>
      <a class="anchor-link" href="#%C2%BFPor-qu%C3%A9-usar-Markdown?"><h3>¿Por qué usar Markdown?</h3></a>
      <a class="anchor-link" href="#%C2%BF-de-Markdown-has-the-following-features:"><h3>¿ de Markdown has the following features:</h3></a>
      <a class="anchor-link" href="#%C2%BF-the-Markdown-has-the-following-features"><h3>¿ the Markdown has the following features</h3></a>
      <a class="anchor-link" href="#12.1.-Criar-uma-exce%C3%A7%C3%A3o"><h3>12.1. Criar uma exceção</h3></a>
      <a class="anchor-link" href="#13.-Palavras-chave-ou-palavras-reservadas"><h2>13. Palavras-chave ou palavras reservadas</h2></a>
      <a class="anchor-link" href="#14.-O-ZEN-de-Python"><h2>14. O ZEN de Python</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Introdu%C3%A7%C3%A3o-ao-Python">Introdução ao Python<a class="anchor-link" href="#Introdu%C3%A7%C3%A3o-ao-Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 182" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o português usando um modelo de tradução automática. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="1.-Resumo">1. Resumo<a class="anchor-link" href="#1.-Resumo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 183" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos fazer uma breve introdução ao Python, explicando os tipos de dados que temos, os operadores, o uso de funções e de classes. Além disso, veremos como usar objetos iteráveis, como usar módulos, etc.
      <img decoding="async" onerror="this.parentNode.removeChild(this)" alt="python" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/icon-python.webp" width="800" height="336"/></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="2.-Tipos-de-dados-do-Python">2. Tipos de dados do Python<a class="anchor-link" href="#2.-Tipos-de-dados-do-Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 184" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Existem 7 tipos de dados em Python</p>
      <ol>
      <li>De tipo texto: <code>str</code>2. Numéricos: <code>int</code>, <code>float</code>, <code>complex</code>3. Sequências: <code>list</code>, <code>tuple</code>, <code>range</code>4. Mapeamento: <code>dict</code>5. Conjuntos: <code>set</code>, <code>frozenset</code>6. Booleanos: <code>bool</code>7. Binários: <code>bytes</code>, <code>bytearray</code>, <code>memoryview</code></li>
      </ol>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obter o tipo de dado através da função <code>type()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">type</span><span class="p">(</span><span class="mf">5.</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'float',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Python é uma linguagem de tipagem dinâmica, ou seja, você pode ter uma variável de um tipo e depois atribuir outro tipo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'int',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'str',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Python tipa as variáveis para você, mas se você quiser tipá-las, pode fazer.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">b</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mf">5.1</span><span class="p">)</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">b</span><span class="p">),</span> <span class="n">b</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(int, 5)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Embora <code>b</code> tenha sido inicializado como <code>5.1</code>, ou seja, deveria ser do tipo <code>float</code>, ao tipá-lo como <code>int</code>, vemos que é do tipo <code>int</code> e, além disso, seu valor é <code>5</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.1.-Cadeias-de-Caracteres">2.1. Cadeias de Caracteres<a class="anchor-link" href="#2.1.-Cadeias-de-Caracteres"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 185" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os <code>strings</code> são cadeias de caracteres, estas podem ser definidas com aspas duplas <code>"</code> ou aspas simples <code>'</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"MaximoFN"</span>',
          '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para escrever uma <code>string</code> muito longa e não ter uma linha que ocupe muito espaço, pode-se introduzi-la em várias linhas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"""Este es un ejemplo de</span>',
          '<span class="s2">como estoy introduciendo un string</span>',
          '<span class="s2">en varias lineas"""</span>',
          '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Este es un ejemplo de\ncomo estoy introduciendo un string\nen varias lineas\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'\'\'Este es un ejemplo de</span>',
          '<span class="s1">como estoy introduciendo un string</span>',
          '<span class="s1">en varias lineas\'\'\'</span>',
          '<span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Este es un ejemplo de\ncomo estoy introduciendo un string\nen varias lineas\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No entanto, vemos que no meio foi inserido o caractere <code></code>, este caractere indica a quebra de linha. Se usarmos a função <code>print()</code> veremos como já não aparece</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es un ejemplo de',
          'como estoy introduciendo un string',
          'en varias lineas',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como dissemos, as strings são cadeias de caracteres, portanto podemos navegar e iterar através delas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>',
          '  <span class="c1"># Se indica a la función print que cuando imprima no termine con un salto de </span>',
          '  <span class="c1"># linea para escribir todo en la misma linea</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es un',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obter o comprimento da nossa string através da função <code>len()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '73',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Verificar se há uma string específica dentro da nossa</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="s1">\'ejemplo\'</span> <span class="ow">in</span> <span class="n">string</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As strings têm certos atributos úteis, como colocar tudo em maiúsculas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">upper</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'ESTE ES UN EJEMPLO DE',
          'COMO ESTOY INTRODUCIENDO UN STRING',
          'EN VARIAS LINEAS',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>tudo em minúsculas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">lower</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'este es un ejemplo de',
          'como estoy introduciendo un string',
          'en varias lineas',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Substituir caracteres</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s1">\'o\'</span><span class="p">,</span> <span class="s1">\'@\'</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es un ejempl@ de',
          'c@m@ est@y intr@duciend@ un string',
          'en varias lineas',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obter todas as palavras</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">split</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Este\', \'es\', \'un\', \'ejemplo\', \'de\', \'como\', \'estoy\', \'introduciendo\', \'un\', \'string\', \'en\', \'varias\', \'lineas\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Você pode ver todos os métodos das strings neste <a href="https://docs.python.org/3.9/library/stdtypes.html#string-methods" target="_blank" rel="nofollow noreferrer">enlace</a></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Outra coisa útil que se pode fazer com as strings é concatená-las</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s1">\'Maximo\'</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s1">\'FN\'</span>',
          '<span class="n">string1</span> <span class="o">+</span> <span class="n">string2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Antes explicamos que o caractere <code>\n</code> correspondia a uma quebra de linha, este caractere especial corresponde a uma série de caracteres especiais chamados <code>Escape Characters</code>. Vejamos outros</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se declararmos uma string com aspas duplas e quisermos adicionar uma aspa dupla dentro da string, usamos o caractere de escape <code>\"</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s2">"Este es el blog de </span><span class="se">\\"</span><span class="s2">MaximoFN</span><span class="se">\\"</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de "MaximoFN"',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O mesmo com a aspa simples, adicionamos <code>\'</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Este es el blog de </span><span class="se">\\\'</span><span class="s1">MaximoFN</span><span class="se">\\\'</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de \'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora temos o problema de querer adicionar o caractere \, pois como vimos, ele é um <code>escape character</code>, então resolvemos isso colocando duas barras (backslash) \\.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Este es el blog de </span><span class="se">\\\\</span><span class="s1">MaximoFN</span><span class="se">\\\\</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de \\MaximoFN\\',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Já vimos antes o <code>escape character</code> de nova linha <code>\n</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Este es el blog de </span><span class="se">\\n</span><span class="s1">MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de ',
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos escrever desde o início da linha, adicionamos \r</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Esto no se imprimirá </span><span class="se">\\r</span><span class="s1">Este es el blog de MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos adicionar um grande espaço (recuo) usamos \t</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Este es el blog de </span><span class="se">\\t</span><span class="s1">MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog de 	MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos apagar um caractere com <code>\b</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'Este es el blog de </span><span class="se">\\b</span><span class="s1">MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Este es el blog deMaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos adicionar o código <a href="http://www.asciitable.com/" target="_blank" rel="nofollow noreferrer">ASCII</a> em octal mediante <code>\ooo</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'</span><span class="se">\\115\\141\\170\\151\\155\\157\\106\\116</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O adicionar o código <a href="http://www.asciitable.com/" target="_blank" rel="nofollow noreferrer">ASCII</a> em hexadecimal mediante <code>\xhh</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'</span><span class="se">\\x4d\\x61\\x78\\x69\\x6d\\x6f\\x46\\x4e</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por último, podemos converter outro tipo de dado em uma string</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span> <span class="p">(</span><span class="n">n</span><span class="p">))</span>',
          '<span class="n">string</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;class \'int\'&gt;',
          '&lt;class \'str\'&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.2.-N%C3%BAmeros">2.2. Números<a class="anchor-link" href="#2.2.-N%C3%BAmeros"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 186" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.1.-Inteiros">2.2.1. Inteiros<a class="anchor-link" href="#2.2.1.-Inteiros"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 187" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Números de tipo inteiro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(5, int)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.2.-Float">2.2.2. Float<a class="anchor-link" href="#2.2.2.-Float"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 188" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Números de tipo ponto flutuante</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mf">5.1</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(5.1, float)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.3.-Complexos">2.2.3. Complexos<a class="anchor-link" href="#2.2.3.-Complexos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 189" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Números complexos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">3</span> <span class="o">+</span> <span class="mi">5</span><span class="n">j</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '((3+5j), complex)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.2.4.-Convers%C3%A3o">2.2.4. Conversão<a class="anchor-link" href="#2.2.4.-Convers%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 190" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se converter entre tipos de números</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="n">n</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(5.0, float)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mf">5.1</span>',
          '<span class="n">n</span> <span class="o">=</span> <span class="nb">complex</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '((5.1+0j), complex)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">n</span> <span class="o">=</span> <span class="mf">5.1</span>',
          '<span class="n">n</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
          '<span class="n">n</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(5, int)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Não é possível converter um número <code>complex</code> para o tipo <code>int</code> ou <code>float</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.3.-Sequ%C3%AAncias">2.3. Sequências<a class="anchor-link" href="#2.3.-Sequ%C3%AAncias"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 191" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.3.1.-Listas">2.3.1. Listas<a class="anchor-link" href="#2.3.1.-Listas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 192" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As listas guardam múltiplos itens em uma variável. Elas são declaradas através dos símbolos <code>[]</code>, com os itens separados por vírgulas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="s1">\'item1\'</span><span class="p">,</span> <span class="s1">\'item2\'</span><span class="p">,</span> <span class="s1">\'item3\'</span><span class="p">,</span> <span class="s1">\'item4\'</span><span class="p">,</span> <span class="s1">\'item5\'</span><span class="p">]</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', \'item1\', \'item2\', \'item3\', \'item4\', \'item5\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obter o comprimento de uma lista mediante a função <code>len()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As listas podem ter itens de diferentes tipos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">"item4"</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">]</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1, True, 5.3, \'item4\', 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Em Python, começa a contar a partir da posição 0, ou seja, se quisermos obter o primeiro elemento da lista</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'item0\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mas uma das coisas poderosas do Python é que, se quisermos acessar a última posição, podemos usar índices negativos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '6.6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se em vez da última posição da lista quisermos a penúltima</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos apenas um intervalo de valores, por exemplo, do segundo ao quinto item, acessamos através de <code>[2:5]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[True, 5.3, \'item4\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se o primeiro número do intervalo for omitido, significa que queremos do primeiro item da lista até o item indicado, ou seja, se quisermos do primeiro item até o quinto, usamos <code>[:5]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1, True, 5.3, \'item4\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se o último número do intervalo for omitido, isso significa que queremos do item indicado até o último. Ou seja, se quisermos do terceiro item até o último, usamos <code>[3:]</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">3</span><span class="p">:]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[5.3, \'item4\', 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos escolher o range de itens também com números negativos, ou seja, se quisermos do antepenúltimo até o penúltimo usamos <code>[-3:-1]</code>. Isso é útil quando se tem listas cuja comprimento não se sabe, mas se sabe que se quer um range de valores do final, porque, por exemplo, a lista foi criada com medidas que vão sendo tomadas e se quer saber as últimas medidas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="o">-</span><span class="mi">3</span><span class="p">:</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item4\', 5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se verificar se um item está na lista</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="s1">\'item4\'</span> <span class="ow">in</span> <span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.1.-Editar-listas">2.3.1.1. Editar listas<a class="anchor-link" href="#2.3.1.1.-Editar-listas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 193" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As listas em Python são dinâmicas, ou seja, podem ser modificadas. Por exemplo, pode-se modificar o terceiro item.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="kc">False</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1, False, 5.3, \'item4\', 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Também é possível modificar um intervalo de valores</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="mf">1.1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, True, 3, \'item4\', 5, 6.6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Valores podem ser adicionados ao final da lista através do método <code>append()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s1">\'item7\'</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, True, 3, \'item4\', 5, 6.6, \'item7\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O podemos inserir um valor em uma posição determinada através do método <code>insert()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">insert</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="s1">\'insert\'</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, \'insert\', True, 3, \'item4\', 5, 6.6, \'item7\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Listas podem ser unidas através do método <code>extend()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'item8\'</span><span class="p">,</span> <span class="s1">\'item9\'</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">lista2</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, \'insert\', True, 3, \'item4\', 5, 6.6, \'item7\', \'item8\', \'item9\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Não é necessário estender a lista através de outra lista, pode ser feito através de outro tipo de dado iterável do Python (<code>tuplas</code>, <code>sets</code>, <code>dicionários</code>, etc)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'item10\'</span><span class="p">,</span> <span class="s1">\'item11\'</span><span class="p">)</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\',',
          ' 1.1,',
          ' \'insert\',',
          ' True,',
          ' 3,',
          ' \'item4\',',
          ' 5,',
          ' 6.6,',
          ' \'item7\',',
          ' \'item8\',',
          ' \'item9\',',
          ' \'item10\',',
          ' \'item11\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos eliminar uma posição determinada mediante o método <code>pop()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\',',
          ' 1.1,',
          ' True,',
          ' 3,',
          ' \'item4\',',
          ' 5,',
          ' 6.6,',
          ' \'item7\',',
          ' \'item8\',',
          ' \'item9\',',
          ' \'item10\',',
          ' \'item11\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se não for especificado o índice, o último item é removido.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, True, 3, \'item4\', 5, 6.6, \'item7\', \'item8\', \'item9\', \'item10\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ou pode-se remover um item sabendo seu valor através do método <code>remove()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">\'item7\'</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, True, 3, \'item4\', 5, 6.6, \'item8\', \'item9\', \'item10\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Com a função <code>del()</code> também pode ser usada para eliminar um item da posição indicada.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">del</span> <span class="n">lista</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'item0\', 1.1, True, \'item4\', 5, 6.6, \'item8\', \'item9\', \'item10\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se não for indicado o índice, a lista completa é eliminada.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o método <code>clear()</code> eu deixo a lista vazia</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se obter a quantidade de itens com um valor determinado através do método <code>count()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Também é possível obter o primeiro índice de um item com um valor determinado através do método <code>index()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.2.-Compreens%C3%A3o-de-lista">2.3.1.2. Compreensão de lista<a class="anchor-link" href="#2.3.1.2.-Compreens%C3%A3o-de-lista"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 194" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos operar através da lista</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">,</span> <span class="s2">"mango"</span><span class="p">]</span>',
          '<span class="n">newlist</span> <span class="o">=</span> <span class="p">[]</span>',
          '',
          '<span class="c1"># Iteramos por todos los items de la lista</span>',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span><span class="p">:</span>',
          '  <span class="c1"># Si el item contiene el caracter "a" lo añadimos a newlist</span>',
          '  <span class="k">if</span> <span class="s2">"a"</span> <span class="ow">in</span> <span class="n">x</span><span class="p">:</span>',
          '    <span class="n">newlist</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="n">newlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'apple\', \'banana\', \'mango\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Outras das coisas potentes do Python são as <code>list comprehensions</code>, que permitem fazer tudo em uma única linha e deixar o código mais compacto.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">fruits</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">,</span> <span class="s2">"mango"</span><span class="p">]</span>',
          '',
          '<span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span> <span class="k">if</span> <span class="s2">"a"</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>',
          '',
          '<span class="n">newlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'apple\', \'banana\', \'mango\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A sintaxe é a seguinte:</p>
      <pre><code>newlist = [expressão for item in iterável if condição == True]```</code></pre>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode ser aproveitado para realizar operações na lista original</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">newlist</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">fruits</span> <span class="k">if</span> <span class="s2">"a"</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>',
          '<span class="n">newlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'APPLE\', \'BANANA\', \'MANGO\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.3.-Ordenar-listas">2.3.1.3. Ordenar listas<a class="anchor-link" href="#2.3.1.3.-Ordenar-listas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 195" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para ordenar listas usamos o método <code>sort()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[3, 4, 5, 5, 6, 8, 9]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Também as ordena alfabeticamente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"orange"</span><span class="p">,</span> <span class="s2">"mango"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">,</span> <span class="s2">"pineapple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'banana\', \'kiwi\', \'mango\', \'orange\', \'pineapple\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ao ordenar alfabeticamente, distinga entre maiúsculas e minúsculas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"orange"</span><span class="p">,</span> <span class="s2">"mango"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">,</span> <span class="s2">"Pineapple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Pineapple\', \'banana\', \'kiwi\', \'mango\', \'orange\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podem ser ordenados em ordem decrescente através do atributo <code>reverse = True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">reverse</span> <span class="o">=</span> <span class="kc">True</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[9, 8, 6, 5, 5, 4, 3]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podem ser ordenados da maneira que quisermos usando o atributo <code>key</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>',
          '  <span class="c1"># devuelve el valor absoluto de n - 50</span>',
          '  <span class="k">return</span> <span class="nb">abs</span><span class="p">(</span><span class="n">n</span> <span class="o">-</span> <span class="mi">50</span><span class="p">)</span>',
          '',
          '<span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">82</span><span class="p">,</span> <span class="mi">23</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="n">myfunc</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[50, 65, 23, 82, 100]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Isso pode ser aproveitado para, por exemplo, na hora de ordenar, não distinguir entre maiúsculas e minúsculas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"orange"</span><span class="p">,</span> <span class="s2">"mango"</span><span class="p">,</span> <span class="s2">"kiwi"</span><span class="p">,</span> <span class="s2">"Pineapple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">sort</span><span class="p">(</span><span class="n">key</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">lower</span><span class="p">)</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'banana\', \'kiwi\', \'mango\', \'orange\', \'Pineapple\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se inverter a lista usando o método <code>reverse</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista</span><span class="o">.</span><span class="n">reverse</span><span class="p">()</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[6, 5, 9, 4, 3, 8, 5]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.4.-Copiar-listas">2.3.1.4. Copiar listas<a class="anchor-link" href="#2.3.1.4.-Copiar-listas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 196" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Não se pode copiar listas com <code>lista1 = lista2</code>, pois se <code>lista1</code> for modificada, <code>lista2</code> também será modificada.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="n">lista1</span>',
          '<span class="n">lista1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>',
          '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[True, 8, 3, 4, 9, 5, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Portanto, é necessário usar o método <code>copy()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="n">lista1</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
          '<span class="n">lista1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>',
          '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ó hay que usar o construtor de listas <code>list()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">lista1</span><span class="p">)</span>',
          '<span class="n">lista1</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="kc">True</span>',
          '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.1.5.-Concatenar-listas">2.3.1.5. Concatenar listas<a class="anchor-link" href="#2.3.1.5.-Concatenar-listas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 197" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Listas podem ser concatenadas usando o operador <code>+</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'b\'</span><span class="p">,</span> <span class="s1">\'c\'</span><span class="p">]</span>',
          '<span class="n">lista</span> <span class="o">=</span> <span class="n">lista1</span> <span class="o">+</span> <span class="n">lista2</span>',
          '<span class="n">lista</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6, \'a\', \'b\', \'c\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O mediante o método <code>extend</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'b\'</span><span class="p">,</span> <span class="s1">\'c\'</span><span class="p">]</span>',
          '<span class="n">lista1</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">lista2</span><span class="p">)</span>',
          '<span class="n">lista1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[5, 8, 3, 4, 9, 5, 6, \'a\', \'b\', \'c\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Outra forma de concatenar é repetir a tupla X vezes mediante o operador <code>*</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista1</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'b\'</span><span class="p">,</span> <span class="s1">\'c\'</span><span class="p">]</span>',
          '<span class="n">lista2</span> <span class="o">=</span> <span class="n">lista1</span> <span class="o">*</span> <span class="mi">3</span>',
          '<span class="n">lista2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'a\', \'b\', \'c\', \'a\', \'b\', \'c\', \'a\', \'b\', \'c\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.3.2.-Tuplas">2.3.2. Tuplas<a class="anchor-link" href="#2.3.2.-Tuplas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 198" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As tuplas são semelhantes às listas, guardam múltiplos itens em uma variável, podem conter itens de tipos diferentes, mas não podem ser modificadas nem reordenadas. São definidas através de <code>()</code>, com os itens separados por vírgulas.
      Como não podem ser modificadas, as tuplas se executam um pouco mais rápido que as listas, portanto, se você não precisar modificar os dados, é melhor usar tuplas em vez de listas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="s1">\'item4\'</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>',
          '<span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, True, 3.3, \'item4\', True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se obter seu comprimento através da função <code>len()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span> <span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para criar tuplas com um único elemento é necessário adicionar uma vírgula</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'item0\'</span><span class="p">,)</span>',
          '<span class="n">tupla</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '((\'item0\',), tuple)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para acessar um elemento da tupla, procede-se da mesma forma que com as listas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="s1">\'item4\'</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">tupla</span><span class="p">[</span><span class="o">-</span><span class="mi">4</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'item0',
          'True',
          '(True, 3.3)',
          '(True, 3.3)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos verificar se há um item na tupla</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="s1">\'item4\'</span> <span class="ow">in</span> <span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.2.1.-Modificar-tuplas">2.3.2.1. Modificar tuplas<a class="anchor-link" href="#2.3.2.1.-Modificar-tuplas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 199" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Embora as tuplas não sejam modificáveis, elas podem ser modificadas convertendo-as em listas, modificando a lista e, em seguida, convertendo-a de volta em uma tupla.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
          '<span class="n">lista</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">=</span> <span class="s1">\'ITEM4\'</span>',
          '<span class="n">tupla</span> <span class="o">=</span> <span class="nb">tuple</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>',
          '<span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, True, 3.3, \'ITEM4\', True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ao convertê-la em lista, podemos fazer todas as modificações vistas nas listas</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O que se pode é eliminar a tupla completa</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">del</span> <span class="n">tupla</span>',
          '',
          '<span class="k">if</span> <span class="s1">\'tupla\'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"tupla eliminada"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'tupla eliminada',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.2.2.-Desempacotar-tuplas">2.3.2.2. Desempacotar tuplas<a class="anchor-link" href="#2.3.2.2.-Desempacotar-tuplas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 200" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando criamos tuplas, na verdade estamos empacotando dados</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="kc">True</span><span class="p">,</span> <span class="mf">3.3</span><span class="p">,</span> <span class="s1">\'item4\'</span><span class="p">,</span> <span class="kc">True</span><span class="p">)</span>',
          '<span class="n">tupla</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, True, 3.3, \'item4\', True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>mas podemos desempacotá-los</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item3</span><span class="p">,</span> <span class="n">item4</span><span class="p">,</span> <span class="n">item5</span> <span class="o">=</span> <span class="n">tupla</span>',
          '<span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item3</span><span class="p">,</span> <span class="n">item4</span><span class="p">,</span> <span class="n">item5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, True, 3.3, \'item4\', True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos tirar menos dados que o comprimento da tupla, adicionamos um <code>*</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="o">*</span><span class="n">item3</span> <span class="o">=</span> <span class="n">tupla</span>',
          '<span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, True, [3.3, \'item4\', True])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode colocar o asterisco <code>*</code> em outro lugar, se por exemplo o que desejamos é o último item.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="o">*</span><span class="n">item2</span><span class="p">,</span> <span class="n">item5</span> <span class="o">=</span> <span class="n">tupla</span>',
          '<span class="n">item0</span><span class="p">,</span> <span class="n">item1</span><span class="p">,</span> <span class="n">item2</span><span class="p">,</span> <span class="n">item5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'item0\', 1, [True, 3.3, \'item4\'], True)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.2.3.-Concatenar-tuplas">2.3.2.3. Concatenar tuplas<a class="anchor-link" href="#2.3.2.3.-Concatenar-tuplas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 201" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Tuplas podem ser concatenadas utilizando o operador <code>+</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla1</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span> <span class="p">,</span> <span class="s2">"c"</span><span class="p">)</span>',
          '<span class="n">tupla2</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>',
          '',
          '<span class="n">tupla3</span> <span class="o">=</span> <span class="n">tupla1</span> <span class="o">+</span> <span class="n">tupla2</span>',
          '<span class="n">tupla3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'a\', \'b\', \'c\', 1, 2, 3)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Outra forma de concatenar é repetir a tupla X vezes mediante o operador <code>*</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla1</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span> <span class="p">,</span> <span class="s2">"c"</span><span class="p">)</span>',
          '',
          '<span class="n">tupla2</span> <span class="o">=</span> <span class="n">tupla1</span> <span class="o">*</span> <span class="mi">3</span>',
          '<span class="n">tupla2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(\'a\', \'b\', \'c\', \'a\', \'b\', \'c\', \'a\', \'b\', \'c\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.3.2.4.-M%C3%A9todos-das-tuplas">2.3.2.4. Métodos das tuplas<a class="anchor-link" href="#2.3.2.4.-M%C3%A9todos-das-tuplas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 202" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As tuplas têm dois métodos, o primeiro é o método <code>count()</code> que retorna o número de vezes que um item aparece dentro da tupla.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>',
          '<span class="n">tupla</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Outro método é <code>index()</code> que retorna a primeira posição de um item dentro da tupla.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>',
          '<span class="n">tupla</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.3.3.-Intervalo">2.3.3. Intervalo<a class="anchor-link" href="#2.3.3.-Intervalo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 203" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com <code>range()</code> podemos criar uma sequência de números, começando de 0 (por padrão), incrementando em 1 (por padrão) e parando antes de um número especificado.</p>
      <pre><code>range(início, fim, passo)```</code></pre>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por exemplo, se quisermos uma sequência de 0 a 5 (sem incluir o 5)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> \'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0 1 2 3 4 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se por exemplo não quisermos que comece em 0</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> \'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2 3 4 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span> <span class="mi">5</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> \'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '-2 -1 0 1 2 3 4 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por último, se não quisermos que se incremente em 1, se por exemplo quisermos uma sequência de números pares.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s1"> \'</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0 2 4 6 8 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.4.-Dicion%C3%A1rios">2.4. Dicionários<a class="anchor-link" href="#2.4.-Dicion%C3%A1rios"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 204" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os dicionários são usados para armazenar dados em pares <code>chave:valor</code>. São modificáveis, não ordenados e não permitem duplicidades. São definidos usando os símbolos <code>{opening_brace}{closing_brace}</code>. Aceitam itens de diferentes tipos de dados.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span><span class="p">,</span>',
          '  <span class="s2">"colors"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"red"</span><span class="p">,</span> <span class="s2">"white"</span><span class="p">,</span> <span class="s2">"blue"</span><span class="p">]</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\',',
          ' \'model\': \'Mustang\',',
          ' \'year\': 1964,',
          ' \'colors\': [\'red\', \'white\', \'blue\']}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como foi dito, não permitem duplicidades.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">2000</span><span class="p">,</span>',
          '  <span class="s2">"colors"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"red"</span><span class="p">,</span> <span class="s2">"white"</span><span class="p">,</span> <span class="s2">"blue"</span><span class="p">]</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2000',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se obter seu comprimento através da função <code>len()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">diccionario</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver, a comprimento é 4 e não 5, pois <code>year</code> é contado apenas uma vez.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.1.-Acessar-os-itens">2.4.1. Acessar os itens<a class="anchor-link" href="#2.4.1.-Acessar-os-itens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 205" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para acessar, podemos fazer isso através de sua <code>key</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span><span class="p">[</span><span class="s2">"model"</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Mustang\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Também pode ser acessado através do método <code>get</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s2">"model"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Mustang\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para saber todas as <code>key</code>s dos dicionários se pode usar o método <code>keys()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_keys([\'brand\', \'model\', \'year\', \'colors\'])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se usar uma variável para apontar para as <code>key</code>s do dicionário, com o que chamando-a uma vez é necessário</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '<span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '<span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '<span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se declara una vez la variable que apunta a las keys</span>',
          '<span class="n">x</span> <span class="o">=</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">keys</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="c1"># Se añade una nueva key</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"color"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"white"</span>',
          '',
          '<span class="c1"># Se consulta la variable que apunta a las key</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_keys([\'brand\', \'model\', \'year\'])',
          'dict_keys([\'brand\', \'model\', \'year\', \'color\'])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para obter os valores do dicionário, pode-se usar o método <code>values()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_values([\'Ford\', \'Mustang\', 1964, \'white\'])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se usar uma variável para apontar para os <code>values</code> do dicionário, com isso, chamando-a uma vez é necessário.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '<span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '<span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '<span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se declara una vez la variable que apunta a los values</span>',
          '<span class="n">x</span> <span class="o">=</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">values</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="c1"># Se modifica un value</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2020</span>',
          '',
          '<span class="c1"># Se consulta la variable que apunta a los values</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_values([\'Ford\', \'Mustang\', 1964])',
          'dict_values([\'Ford\', \'Mustang\', 2020])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se <code>items</code> inteiros forem desejados, ou seja, <code>key</code>s e <code>value</code>s, deve-se usar o método <code>items()</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_items([(\'brand\', \'Ford\'), (\'model\', \'Mustang\'), (\'year\', 2020)])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se usar uma variável para apontar para os <code>item</code>s do dicionário, com o que chamá-la uma vez é necessário</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '<span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '<span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '<span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se declara una vez la variable que apunta a los items</span>',
          '<span class="n">x</span> <span class="o">=</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">items</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="c1"># Se modifica un value</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2020</span>',
          '',
          '<span class="c1"># Se consulta la variable que apunta a los items</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'dict_items([(\'brand\', \'Ford\'), (\'model\', \'Mustang\'), (\'year\', 1964)])',
          'dict_items([(\'brand\', \'Ford\'), (\'model\', \'Mustang\'), (\'year\', 2020)])',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se verificar se uma <code>key</code> existe no dicionário</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="s2">"model"</span> <span class="ow">in</span> <span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.2.-Modificar-os-itens">2.4.2. Modificar os itens<a class="anchor-link" href="#2.4.2.-Modificar-os-itens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 206" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode modificar um <code>item</code> acessando-o diretamente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '<span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '<span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '<span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se modifica un item</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2020</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'model\': \'Mustang\', \'year\': 2020}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ou pode ser modificado através do método <code>update()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se modifica un item</span>',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s2">"year"</span><span class="p">:</span> <span class="mi">2020</span><span class="p">})</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'model\': \'Mustang\', \'year\': 2020}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.3.-Adicionar-itens">2.4.3. Adicionar itens<a class="anchor-link" href="#2.4.3.-Adicionar-itens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 207" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode adicionar um <code>item</code> adicionando-o desta maneira:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '<span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '<span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '<span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se modifica un item</span>',
          '<span class="n">diccionario</span><span class="p">[</span><span class="s2">"colour"</span><span class="p">]</span> <span class="o">=</span> <span class="s2">"blue"</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'model\': \'Mustang\', \'year\': 1964, \'colour\': \'blue\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ou pode ser adicionado através do método <code>update()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se modifica un item</span>',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">update</span><span class="p">({</span><span class="s2">"colour"</span><span class="p">:</span> <span class="s2">"blue"</span><span class="p">})</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'model\': \'Mustang\', \'year\': 1964, \'colour\': \'blue\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.4.-Remover-itens">2.4.4. Remover itens<a class="anchor-link" href="#2.4.4.-Remover-itens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 208" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se eliminar um <code>item</code> com uma <code>key</code> específica mediante o método <code>pop()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se elimina un item</span>',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">pop</span><span class="p">(</span><span class="s2">"model"</span><span class="p">)</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'year\': 1964}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ou se pode eliminar um <code>item</code> com uma <code>key</code> específica mediante <code>del</code> indicando o nome da <code>key</code> entre os símbolos <code>[]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se elimina un item</span>',
          '<span class="k">del</span> <span class="n">diccionario</span><span class="p">[</span><span class="s2">"model"</span><span class="p">]</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'year\': 1964}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O dicionário inteiro é removido se <code>del</code> for usado e não for especificada a <code>key</code> de um <code>item</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se elimina un item</span>',
          '<span class="k">del</span> <span class="n">diccionario</span>',
          '',
          '<span class="k">if</span> <span class="s1">\'diccionario\'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"diccionario eliminado"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'diccionario eliminado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se <code>popitem()</code> é o método a ser usado se deseja remover o último <code>item</code> inserido.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '',
          '<span class="c1"># Se elimina el último item introducido</span>',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">popitem</span><span class="p">()</span>',
          '',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'brand\': \'Ford\', \'model\': \'Mustang\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quer limpar o dicionário, é necessário usar o método <code>clear()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
          '<span class="n">diccionario</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.5.-Copiar-dicion%C3%A1rios">2.4.5. Copiar dicionários<a class="anchor-link" href="#2.4.5.-Copiar-dicion%C3%A1rios"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 209" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Não se podem copiar dicionários mediante <code>diccionario1 = diccionario2</code>, já que se <code>diccionario1</code> for modificado, <code>diccionario2</code> também será modificado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario1</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario2</span> <span class="o">=</span> <span class="n">diccionario1</span>',
          '<span class="n">diccionario1</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2000</span>',
          '<span class="n">diccionario2</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '2000',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Portanto, é necessário usar o método <code>copy()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario1</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario2</span> <span class="o">=</span> <span class="n">diccionario1</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>',
          '<span class="n">diccionario1</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2000</span>',
          '<span class="n">diccionario2</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1964',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ó hay que usar o construtor de dicionários <code>dict()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario1</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario2</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">diccionario1</span><span class="p">)</span>',
          '<span class="n">diccionario1</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span> <span class="o">=</span> <span class="mi">2000</span>',
          '<span class="n">diccionario2</span><span class="p">[</span><span class="s2">"year"</span><span class="p">]</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1964',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.6.-Dicion%C3%A1rios-aninhados">2.4.6. Dicionários aninhados<a class="anchor-link" href="#2.4.6.-Dicion%C3%A1rios-aninhados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 210" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os dicionários podem ter <code>items</code> de qualquer tipo de dado, inclusive outros dicionários. A este tipo de dicionários se les denomina dicionários <code>nested</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario_nested</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"child1"</span> <span class="p">:</span> <span class="p">{</span>',
          '    <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Emil"</span><span class="p">,</span>',
          '    <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2004</span>',
          '  <span class="p">},</span>',
          '  <span class="s2">"child2"</span> <span class="p">:</span> <span class="p">{</span>',
          '    <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Tobias"</span><span class="p">,</span>',
          '    <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2007</span>',
          '  <span class="p">},</span>',
          '  <span class="s2">"child3"</span> <span class="p">:</span> <span class="p">{</span>',
          '    <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Linus"</span><span class="p">,</span>',
          '    <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2011</span>',
          '  <span class="p">}</span>',
          '<span class="p">}</span>',
          '<span class="n">diccionario_nested</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'child1\': {\'name\': \'Emil\', \'year\': 2004},',
          ' \'child2\': {\'name\': \'Tobias\', \'year\': 2007},',
          ' \'child3\': {\'name\': \'Linus\', \'year\': 2011}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">child1</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Emil"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2004</span>',
          '<span class="p">}</span>',
          '<span class="n">child2</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Tobias"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2007</span>',
          '<span class="p">}</span>',
          '<span class="n">child3</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"name"</span> <span class="p">:</span> <span class="s2">"Linus"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span> <span class="p">:</span> <span class="mi">2011</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">diccionario_nested</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"child1"</span> <span class="p">:</span> <span class="n">child1</span><span class="p">,</span>',
          '  <span class="s2">"child2"</span> <span class="p">:</span> <span class="n">child2</span><span class="p">,</span>',
          '  <span class="s2">"child3"</span> <span class="p">:</span> <span class="n">child3</span>',
          '<span class="p">}</span>',
          '',
          '<span class="n">diccionario_nested</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'child1\': {\'name\': \'Emil\', \'year\': 2004},',
          ' \'child2\': {\'name\': \'Tobias\', \'year\': 2007},',
          ' \'child3\': {\'name\': \'Linus\', \'year\': 2011}}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.7.-M%C3%A9todos-dos-dicion%C3%A1rios">2.4.7. Métodos dos dicionários<a class="anchor-link" href="#2.4.7.-M%C3%A9todos-dos-dicion%C3%A1rios"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 211" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Estes são os <a href="https://www.w3schools.com/python/python_dictionaries_methods.asp" target="_blank" rel="nofollow noreferrer">métodos</a> que podem ser usados em dicionários</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.4.8.-Compreens%C3%A3o-de-dicion%C3%A1rio">2.4.8. Compreensão de dicionário<a class="anchor-link" href="#2.4.8.-Compreens%C3%A3o-de-dicion%C3%A1rio"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 212" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Igual que podíamos fazer <code>list comprehensions</code> mediante a sintaxe</p>
      <div class="highlight"><pre><span></span><span class="n">list_comprehension</span> <span class="o">=</span> <span class="p">[</span><span class="n">expressão</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterável</span> <span class="k">if</span> <span class="n">condição</span> <span class="o">==</span> <span class="kc">True</span><span class="p">]</span><span class="err">```</span>
      
      <span class="n">Podemos</span> <span class="n">fazer</span> <span class="err">`</span><span class="n">dictionaries</span> <span class="n">comprehensions</span><span class="err">`</span> <span class="n">mediante</span> <span class="n">a</span> <span class="n">seguinte</span> <span class="n">sintaxe</span>
      <span class="err">```</span> <span class="n">python</span>
      <span class="n">dictionary_comprehension</span> <span class="o">=</span> <span class="p">{opening_brace}</span><span class="n">expressão_chave</span><span class="p">:</span> <span class="n">expressão_valor</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">iterável</span> <span class="k">if</span> <span class="n">condição</span> <span class="o">==</span> <span class="kc">True</span><span class="p">{closing_brace}</span><span class="err">```</span>
      
      <span class="n">Vamos</span> <span class="n">ver</span> <span class="n">um</span> <span class="n">exemplo</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">dictionary_comprehension</span> <span class="o">=</span> <span class="p">{</span><span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">)</span> <span class="k">if</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">}</span>',
          '<span class="n">dictionary_comprehension</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{4: 16, 6: 36}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.5.-Sets">2.5. Sets<a class="anchor-link" href="#2.5.-Sets"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 213" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.5.1.-Conjunto">2.5.1. Conjunto<a class="anchor-link" href="#2.5.1.-Conjunto"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 214" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os <code>set</code>s são usados em Python para guardar um conjunto de itens em uma única variável. Eles podem armazenar itens de diferentes tipos. São não ordenados e não têm índice.
      Diferem das listas em que não têm nem ordem nem índice.
      São declarados com os símbolos <code>{}</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como <code>set</code> é uma palavra reservada em Python, criamos um <code>set</code> com o nome <code>set_</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">"item4"</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">}</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 5, 5.3, 6.6, \'item0\', \'item4\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Não pode haver itens duplicados, se encontrar algum item duplicado, fica apenas com um.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">"item4"</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">,</span> <span class="s1">\'item0\'</span><span class="p">}</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 5, 5.3, 6.6, \'item0\', \'item4\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se obter o comprimento do <code>set</code> através da função <code>len()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">len</span><span class="p">(</span><span class="n">set_</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se pode ver, o comprimento do set é 6 e não 7, pois ele mantém apenas um <code>'item0'</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se verificar se um item está presente no set</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="s1">\'item4\'</span> <span class="ow">in</span> <span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.1.-Adicionar-itens">2.5.1.1. Adicionar itens<a class="anchor-link" href="#2.5.1.1.-Adicionar-itens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 215" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se adicionar um elemento ao conjunto usando o método <code>add()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="mf">8.8</span><span class="p">)</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 5, 5.3, 6.6, 8.8, \'item0\', \'item4\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se adicionar outro conjunto usando o método `update()'</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"item5"</span><span class="p">,</span> <span class="s2">"item6"</span><span class="p">,</span> <span class="mi">7</span><span class="p">}</span>',
          '<span class="n">set_</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 5, 5.3, 6.6, 7, 8.8, \'item0\', \'item4\', \'item5\', \'item6\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Também é possível adicionar itens de tipos de dados iteráveis de Python</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"item9"</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mf">11.2</span><span class="p">]</span>',
          '<span class="n">set_</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">lista</span><span class="p">)</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 10, 11.2, 5, 5.3, 6.6, 7, 8.8, \'item0\', \'item4\', \'item5\', \'item6\', \'item9\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.2.-Eliminar-itens">2.5.1.2. Eliminar itens<a class="anchor-link" href="#2.5.1.2.-Eliminar-itens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 216" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se remover um item específico através do método <code>remove()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="s1">\'item9\'</span><span class="p">)</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 10, 11.2, 5, 5.3, 6.6, 7, 8.8, \'item0\', \'item4\', \'item5\', \'item6\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O mediante o <code>discard()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">discard</span><span class="p">(</span><span class="s1">\'item6\'</span><span class="p">)</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 10, 11.2, 5, 5.3, 6.6, 7, 8.8, \'item0\', \'item4\', \'item5\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Com o método <code>pop()</code> pode ser usado para remover o último item, mas como os <code>set</code>s não são ordenados, não há como saber qual é o último item. O método <code>pop()</code> retorna o item removido.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"set antes de pop(): </span><span class="si">{</span><span class="n">set_</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="n">eliminado</span> <span class="o">=</span> <span class="n">set_</span><span class="o">.</span><span class="n">pop</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Se ha eliminado </span><span class="si">{</span><span class="n">eliminado</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'set antes de pop(): {1, 5, 5.3, 6.6, 8.8, 7, 10, 11.2, \'item5\', \'item0\', \'item4\'}',
          'Se ha eliminado 1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por meio do método <code>clear()</code> é possível esvaziar o conjunto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
          '<span class="n">set_</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'set()',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por último, com <code>del</code> pode-se eliminar o set</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">del</span> <span class="n">set_</span>',
          '',
          '<span class="k">if</span> <span class="s1">\'set_\'</span> <span class="ow">not</span> <span class="ow">in</span> <span class="nb">locals</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"set eliminado"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'set eliminado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.3.-Unir-itens">2.5.1.3. Unir itens<a class="anchor-link" href="#2.5.1.3.-Unir-itens"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 217" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uma forma de unir conjuntos é mediante o método <code>union()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span> <span class="p">,</span> <span class="s2">"c"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>',
          '<span class="n">set3</span> <span class="o">=</span> <span class="n">set1</span><span class="o">.</span><span class="n">union</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 2, 3, \'a\', \'b\', \'c\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Outra forma é através do método <code>update()</code>, mas desta maneira um set é adicionado a outro, não é criado um novo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"a"</span><span class="p">,</span> <span class="s2">"b"</span> <span class="p">,</span> <span class="s2">"c"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">}</span>',
          '<span class="n">set1</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{1, 2, 3, \'a\', \'b\', \'c\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Estes métodos de união eliminam os duplicados, mas se quisermos obter os elementos duplicados em dois sets usamos o método <code>intersection()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"google"</span><span class="p">,</span> <span class="s2">"microsoft"</span><span class="p">,</span> <span class="s2">"apple"</span><span class="p">}</span>',
          '',
          '<span class="n">set3</span> <span class="o">=</span> <span class="n">set1</span><span class="o">.</span><span class="n">intersection</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'apple\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos obter os elementos duplicados em dois conjuntos, mas sem criar um novo conjunto, usamos o método <code>intersection_update()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"google"</span><span class="p">,</span> <span class="s2">"microsoft"</span><span class="p">,</span> <span class="s2">"apple"</span><span class="p">}</span>',
          '',
          '<span class="n">set1</span><span class="o">.</span><span class="n">intersection_update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'apple\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora ao contrário, se quisermos ficar com os não duplicados usamos o método <code>symmetric_difference()</code>.
      A diferença entre isso e a união entre dois conjuntos é que na união são mantidos todos os itens, mas os que estão duplicados são pegos apenas uma vez. Agora ficamos com os que não estão duplicados.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"google"</span><span class="p">,</span> <span class="s2">"microsoft"</span><span class="p">,</span> <span class="s2">"apple"</span><span class="p">}</span>',
          '',
          '<span class="n">set3</span> <span class="o">=</span> <span class="n">set1</span><span class="o">.</span><span class="n">symmetric_difference</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'banana\', \'cherry\', \'google\', \'microsoft\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos ficar com os não duplicados sem criar um novo conjunto, usamos o método <code>symmetric_difference_update()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set1</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">,</span> <span class="s2">"cherry"</span><span class="p">}</span>',
          '<span class="n">set2</span> <span class="o">=</span> <span class="p">{</span><span class="s2">"google"</span><span class="p">,</span> <span class="s2">"microsoft"</span><span class="p">,</span> <span class="s2">"apple"</span><span class="p">}</span>',
          '',
          '<span class="n">set1</span><span class="o">.</span><span class="n">symmetric_difference_update</span><span class="p">(</span><span class="n">set2</span><span class="p">)</span>',
          '<span class="n">set1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'banana\', \'cherry\', \'google\', \'microsoft\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h5 id="2.5.1.4.-M%C3%A9todos-dos-conjuntos">2.5.1.4. Métodos dos conjuntos<a class="anchor-link" href="#2.5.1.4.-M%C3%A9todos-dos-conjuntos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 218" src={svg_paths.link_svg_path}/></a></h5>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Estes são os <a href="https://www.w3schools.com/python/python_sets_methods.asp" target="_blank" rel="nofollow noreferrer">métodos</a> que podem ser usados em sets</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.5.2.-FrozenSet">2.5.2. FrozenSet<a class="anchor-link" href="#2.5.2.-FrozenSet"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 219" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os <code>frozenset</code>s são como os <code>set</code>s, mas com a diferença de que são imutáveis, assim como as <code>tupla</code>s são como as <code>list</code>s, mas imutáveis. Portanto, não podemos adicionar ou remover itens.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.6.-Booleanos">2.6. Booleanos<a class="anchor-link" href="#2.6.-Booleanos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 220" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Há apenas dois booleanos em Python: <code>True</code> e <code>False</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com a função <code>bool()</code> pode ser usada para avaliar se algo é <code>True</code> ou <code>False</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="s2">"Hello"</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">15</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.6.1.-Outros-tipos-de-dados-True-e-False">2.6.1. Outros tipos de dados True e False<a class="anchor-link" href="#2.6.1.-Outros-tipos-de-dados-True-e-False"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 221" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os seguintes dados são <code>True</code>:*   Qualquer string que não esteja vazia*   Qualquer número exceto o 0*   Qualquer lista, tupla, dicionário ou set que não esteja vazio</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="s2">""</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">lista</span><span class="p">))</span>',
          '',
          '<span class="n">lista</span> <span class="o">=</span> <span class="p">[]</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">lista</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">tupla</span><span class="p">))</span>',
          '',
          '<span class="n">tupla</span> <span class="o">=</span> <span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">tupla</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"brand"</span><span class="p">:</span> <span class="s2">"Ford"</span><span class="p">,</span>',
          '  <span class="s2">"model"</span><span class="p">:</span> <span class="s2">"Mustang"</span><span class="p">,</span>',
          '  <span class="s2">"year"</span><span class="p">:</span> <span class="mi">1964</span><span class="p">,</span>',
          '  <span class="s2">"colors"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"red"</span><span class="p">,</span> <span class="s2">"white"</span><span class="p">,</span> <span class="s2">"blue"</span><span class="p">]</span>',
          '<span class="p">}</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">diccionario</span><span class="p">))</span>',
          '',
          '<span class="n">diccionario</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">diccionario</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">\'item0\'</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">5.3</span><span class="p">,</span> <span class="s2">"item4"</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mf">6.6</span><span class="p">}</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">set_</span><span class="p">))</span>',
          '',
          '<span class="n">set_</span><span class="o">.</span><span class="n">clear</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="n">set_</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="2.7.-Bin%C3%A1rios">2.7. Binários<a class="anchor-link" href="#2.7.-Bin%C3%A1rios"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 222" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.7.1.-Bytes">2.7.1. Bytes<a class="anchor-link" href="#2.7.1.-Bytes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 223" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O tipo <code>bytes</code> é uma sequência imutável de bytes. Apenas aceitam caracteres ASCII. Também se podem representar os bytes através de números inteiros cujos valores devem satisfazer <code>0 &lt;= x &lt; 256</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para criar um tipo byte devemos introduzir antes o caractere <code>b</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte</span> <span class="o">=</span> <span class="sa">b</span><span class="s2">"MaximoFN"</span>',
          '<span class="n">byte</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b\'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Também podem ser criados através do seu construtor <code>bytes()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>',
          '<span class="n">byte</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b\'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>',
          '<span class="n">byte</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b\'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Bytes podem ser concatenados utilizando o operador <code>+</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte1</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">\'DeepMax\'</span>',
          '<span class="n">byte2</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">\'FN\'</span>',
          '<span class="n">byte3</span> <span class="o">=</span> <span class="n">byte1</span> <span class="o">+</span> <span class="n">byte2</span>',
          '<span class="n">byte3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b\'DeepMaxFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ou através da repetição com o operador <code>*</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte1</span> <span class="o">=</span> <span class="sa">b</span><span class="s1">\'MaximoFN \'</span>',
          '<span class="n">byte2</span> <span class="o">=</span> <span class="n">byte1</span> <span class="o">*</span> <span class="mi">3</span>',
          '<span class="n">byte2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'b\'MaximoFN MaximoFN MaximoFN \'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos verificar se um caractere está dentro da string</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="sa">b</span><span class="s1">\'D\'</span> <span class="ow">in</span> <span class="n">byte1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'False',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Estes são os <a href="https://plataforma.josedomingo.org/pledin/cursos/python3/curso/u30/#m%C3%A9todos-de-bytes-e-bytearray" target="_blank" rel="nofollow noreferrer">métodos</a> que podem ser usados em <code>bytes</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.7.2.-Bytearray">2.7.2. Bytearray<a class="anchor-link" href="#2.7.2.-Bytearray"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 224" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os <code>bytearray</code>s são iguais aos <code>bytes</code> só que são mutáveis.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte_array</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="sa">b</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
          '<span class="n">byte_array</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'bytearray(b\'MaximoFN\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.7.3.-MemoryView">2.7.3. MemoryView<a class="anchor-link" href="#2.7.3.-MemoryView"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 225" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os objetos <code>memoryview</code> permitem que o código Python acesse os dados internos de um objeto que suporta o protocolo de buffer sem realizar cópias.
      A função <code>memoryview()</code> permite o acesso direto de leitura e escrita aos dados orientados a bytes de um objeto sem necessidade de copiá-los primeiro. Isso pode gerar grandes ganhos de desempenho ao operar com objetos grandes, pois não cria uma cópia ao fatiar.
      Protocolo de buffer, pode criar outro objeto de acesso para modificar dados grandes sem copiá-los. Isso faz com que o programa utilize menos memória e aumente a velocidade de execução.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">byte_array</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="s1">\'XYZ\'</span><span class="p">,</span> <span class="s1">\'utf-8\'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Antes de acceder a la memoria: </span><span class="si">{</span><span class="n">byte_array</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">mem_view</span> <span class="o">=</span> <span class="nb">memoryview</span><span class="p">(</span><span class="n">byte_array</span><span class="p">)</span>',
          '',
          '<span class="n">mem_view</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span> <span class="mi">74</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Después de acceder a la memoria: </span><span class="si">{</span><span class="n">byte_array</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Antes de acceder a la memoria: bytearray(b\'XYZ\')',
          'Después de acceder a la memoria: bytearray(b\'XYJ\')',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="3.-Operadores">3. Operadores<a class="anchor-link" href="#3.-Operadores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 226" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.1.-Operadores-aritm%C3%A9ticos">3.1. Operadores aritméticos<a class="anchor-link" href="#3.1.-Operadores-aritm%C3%A9ticos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 227" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operador soma <code>+</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">+</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador subtração -</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">-</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '-2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador de multiplicação <code>*</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">*</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador divisão <code>/</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">/</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0.6',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador módulo <code>%</code>. Retorna o resto de uma divisão.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">25</span> <span class="o">%</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador exponencial <code>**</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">5</span> <span class="o">**</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '25',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador divisão inteira <code>//</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">25</span> <span class="o">//</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.2.-Operadores-de-compara%C3%A7%C3%A3o">3.2. Operadores de comparação<a class="anchor-link" href="#3.2.-Operadores-de-compara%C3%A7%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 228" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operador é igual <code>==</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">1</span> <span class="o">==</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador diferente <code>!=</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">1</span> <span class="o">!=</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador é maior que <code>&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">&gt;</span> <span class="mi">2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador é menor que <code>&lt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">2</span> <span class="o">&lt;</span> <span class="mi">3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador é maior ou igual que <code>&gt;=</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">&gt;=</span> <span class="mi">3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador é menor ou igual que <code>&lt;=</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mi">3</span> <span class="o">&lt;=</span> <span class="mi">3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="3.3.-Operadores-l%C3%B3gicos">3.3. Operadores lógicos<a class="anchor-link" href="#3.3.-Operadores-l%C3%B3gicos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 229" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>and</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kc">True</span> <span class="ow">and</span> <span class="kc">True</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>or</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kc">True</span> <span class="ow">or</span> <span class="kc">False</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>not</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="ow">not</span> <span class="kc">False</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="34.-Operadores-de-identidade">34. Operadores de identidade<a class="anchor-link" href="#34.-Operadores-de-identidade"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 230" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>is</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mf">5.3</span> <span class="ow">is</span> <span class="mf">5.3</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>is not</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="mf">5.3</span> <span class="ow">is</span> <span class="ow">not</span> <span class="mi">5</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="35.-Operadores-de-pertin%C3%AAncia">35. Operadores de pertinência<a class="anchor-link" href="#35.-Operadores-de-pertin%C3%AAncia"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 231" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>in</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>',
          '',
          '<span class="s2">"banana"</span> <span class="ow">in</span> <span class="n">x</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>not in</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"apple"</span><span class="p">,</span> <span class="s2">"banana"</span><span class="p">]</span>',
          '',
          '<span class="s2">"orange"</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">x</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'True',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="36.-Operadores-bit-a-bit">36. Operadores bit a bit<a class="anchor-link" href="#36.-Operadores-bit-a-bit"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 232" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operador AND <code>&amp;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&amp;</span> <span class="n">b</span><span class="p">;</span>        <span class="c1"># 12 = 0000 1100</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador OU <code>|</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">|</span> <span class="n">b</span><span class="p">;</span>        <span class="c1"># 61 = 0011 1101</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '61',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador XOR <code>^</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">^</span> <span class="n">b</span><span class="p">;</span>        <span class="c1"># 49 = 0011 0001</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '49',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador NOT <code>~</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="o">~</span><span class="n">a</span><span class="p">;</span>           <span class="c1"># -61 = 1100 0011</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '-61',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador de deslocamento para a esquerda <code>&lt;&lt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&lt;&lt;</span> <span class="mi">2</span><span class="p">;</span>       <span class="c1"># 240 = 1111 0000</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '240',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador de deslocamento para a direita <code>&gt;&gt;</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '',
          '<span class="n">c</span> <span class="o">=</span> <span class="n">a</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">;</span>       <span class="c1"># 15 = 0000 1111</span>',
          '<span class="n">c</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="37.-Operadores-de-atribui%C3%A7%C3%A3o">37. Operadores de atribuição<a class="anchor-link" href="#37.-Operadores-de-atribui%C3%A7%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 233" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>=</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>+=</code>. <code>x += y</code> é equivalente a <code>x = x + y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">+=</span> <span class="mi">5</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '10',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>-=</code>. <code>x -= y</code> é equivalente a <code>x = x - y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">-=</span> <span class="mi">5</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>*=</code>. <code>x *= y</code> é equivalente a <code>x = x * y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">*=</span> <span class="mi">3</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>/=</code>. <code>x /= y</code> é equivalente a <code>x = x / y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">/=</span> <span class="mi">3</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '5.0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>%=</code>. <code>x %= y</code> é equivalente a <code>x = x % y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">25</span>',
          '<span class="n">a</span> <span class="o">%=</span> <span class="mi">2</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>//=</code>. <code>x //= y</code> é equivalente a <code>x = x // y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">25</span>',
          '<span class="n">a</span> <span class="o">//=</span> <span class="mi">2</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>**=</code>. <code>x **= y</code> é equivalente a <code>x = x ** y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">5</span>',
          '<span class="n">a</span> <span class="o">**=</span> <span class="mi">2</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '25',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>&amp;=</code>. <code>x &amp;= y</code> é equivalente a <code>x = x &amp; y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">a</span> <span class="o">&amp;=</span> <span class="n">b</span><span class="p">;</span>           <span class="c1"># 12 = 0000 1100</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '12',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>|=</code>. <code>x |= y</code> é equivalente a <code>x = x | y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">a</span> <span class="o">|=</span> <span class="n">b</span><span class="p">;</span>           <span class="c1"># 61 = 0011 1101</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '61',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>^=</code>. <code>x ^= y</code> é equivalente a <code>x = x ^ y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '<span class="n">b</span> <span class="o">=</span> <span class="mi">13</span>            <span class="c1"># 13 = 0000 1101 </span>',
          '',
          '<span class="n">a</span> <span class="o">^=</span> <span class="n">b</span><span class="p">;</span>           <span class="c1"># 49 = 0011 0001</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '49',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>&gt;&gt;=</code>. <code>x &gt;&gt;= y</code> é equivalente a <code>x = x &gt;&gt; y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '',
          '<span class="n">a</span> <span class="o">&lt;&lt;=</span> <span class="mi">2</span><span class="p">;</span>          <span class="c1"># 240 = 1111 0000</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '240',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Operador <code>&lt;&lt;=</code>. <code>x &lt;&lt;= y</code> é equivalente a <code>x = x &lt;&lt; y</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">a</span> <span class="o">=</span> <span class="mi">60</span>            <span class="c1"># 60 = 0011 1100 </span>',
          '',
          '<span class="n">a</span> <span class="o">&gt;&gt;=</span> <span class="mi">2</span><span class="p">;</span>          <span class="c1"># 15 = 0000 1111</span>',
          '<span class="n">a</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="4.-Controle-de-fluxo">4. Controle de fluxo<a class="anchor-link" href="#4.-Controle-de-fluxo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 234" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para poder utilizar as ferramentas de controle de fluxo é necessário adicionar a sentença, dois pontos <code>:</code> e em uma nova linha escrever o código com indentação.
      Diferente de outras linguagens, Python precisa de indentação (adicionar um espaço em branco) para definir o código dentro de uma ferramenta de Controle de Fluxo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.1.-Se">4.1. Se<a class="anchor-link" href="#4.1.-Se"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 235" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com <code>if</code> podemos criar condicionais</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">==</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos criar mais de uma condição, podemos usar <code>elif</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene menos de 8 caracteres\'</span><span class="p">)</span>',
          '<span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">==</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos que se execute algo em caso de que não se cumpra nenhuma das condições indicadas, podemos usar <code>else</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene menos de 8 caracteres\'</span><span class="p">)</span>',
          '<span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene más de 8 caracteres\'</span><span class="p">)</span>',
          '<span class="k">else</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos escrever tudo em uma única linha</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">==</span> <span class="mi">8</span><span class="p">:</span> <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Igual, se quisermos escrever tudo em uma linha, mas com várias condições.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene menos de 8 caracteres\'</span><span class="p">)</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span> <span class="k">else</span> <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene más de 8 caracteres\'</span><span class="p">)</span> <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span> <span class="k">else</span> <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos fazer a estrutura do <code>if</code> mas não quisermos, por enquanto, codificar uma das condições, podemos usar <code>pass</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene menos de 8 caracteres\'</span><span class="p">)</span>',
          '<span class="k">elif</span> <span class="nb">len</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">8</span><span class="p">:</span>',
          '  <span class="k">pass</span>',
          '<span class="k">else</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN tiene 8 caracteres\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN tiene 8 caracteres',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.2.-Enquanto">4.2. Enquanto<a class="anchor-link" href="#4.2.-Enquanto"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 236" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O bloco <code>while</code> é executado enquanto a condição for <code>True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos que o bucle pare por alguma condição usamos <code>break</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>',
          '  <span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">\'F\'</span><span class="p">:</span>',
          '    <span class="k">break</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Maximo',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos que uma das iterações não se execute por algum motivo, usamos <code>continue</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">string</span> <span class="o">=</span> <span class="s1">\'Maximo FN\'</span>',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>',
          '  <span class="k">if</span> <span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">==</span> <span class="s1">\' \'</span><span class="p">:</span>',
          '    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
          '    <span class="k">continue</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Com <code>else</code> é possível executar um bloco de código se a condição do <code>while</code> não for <code>True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>',
          '<span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">i</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
          '  <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>',
          '<span class="k">else</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Se ha terminado el while"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
          'Se ha terminado el while',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="4.3.-Para">4.3. Para<a class="anchor-link" href="#4.3.-Para"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 237" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O bloco <code>for</code> é usado para executar código enquanto itera por uma sequência, esta sequência pode ser qualquer elemento iterável de Python (<code>string</code>, <code>lista</code>, <code>tupla</code>, <code>range</code>, <code>dicionário</code>, <code>set</code>)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="s1">\'M\'</span><span class="p">,</span> <span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'x\'</span><span class="p">,</span> <span class="s1">\'i\'</span><span class="p">,</span> <span class="s1">\'m\'</span><span class="p">,</span> <span class="s1">\'o\'</span><span class="p">,</span> <span class="s1">\'F\'</span><span class="p">,</span> <span class="s1">\'N\'</span><span class="p">]</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lista</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s1">\'M\'</span><span class="p">,</span> <span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'x\'</span><span class="p">,</span> <span class="s1">\'i\'</span><span class="p">,</span> <span class="s1">\'m\'</span><span class="p">,</span> <span class="s1">\'o\'</span><span class="p">,</span> <span class="s1">\'F\'</span><span class="p">,</span> <span class="s1">\'N\'</span><span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">tupla</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">string</span><span class="p">)):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">diccionario</span> <span class="o">=</span> <span class="p">{</span>',
          '  <span class="s2">"letra1"</span><span class="p">:</span> <span class="s2">"M"</span><span class="p">,</span>',
          '  <span class="s2">"letra2"</span><span class="p">:</span> <span class="s2">"a"</span><span class="p">,</span>',
          '  <span class="s2">"letra3"</span><span class="p">:</span> <span class="s2">"x"</span><span class="p">,</span>',
          '  <span class="s2">"letra4"</span><span class="p">:</span> <span class="s2">"i"</span><span class="p">,</span>',
          '  <span class="s2">"letra5"</span><span class="p">:</span> <span class="s2">"m"</span><span class="p">,</span>',
          '  <span class="s2">"letra6"</span><span class="p">:</span> <span class="s2">"o"</span><span class="p">,</span>',
          '  <span class="s2">"letra7"</span><span class="p">:</span> <span class="s2">"F"</span><span class="p">,</span>',
          '  <span class="s2">"letra8"</span><span class="p">:</span> <span class="s2">"N"</span><span class="p">,</span>',
          '<span class="p">}</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">diccionario</span><span class="o">.</span><span class="n">values</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Também se pode iterar pelos <code>set</code>s, mas como são elementos não ordenados, não teremos controle sobre a ordem de execução.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">set_</span> <span class="o">=</span> <span class="p">{</span><span class="s1">\'M\'</span><span class="p">,</span> <span class="s1">\'a\'</span><span class="p">,</span> <span class="s1">\'x\'</span><span class="p">,</span> <span class="s1">\'i\'</span><span class="p">,</span> <span class="s1">\'m\'</span><span class="p">,</span> <span class="s1">\'o\'</span><span class="p">,</span> <span class="s1">\'F\'</span><span class="p">,</span> <span class="s1">\'N\'</span><span class="p">}</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">set_</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'NximoaMF',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos que o bucle pare por alguma condição usamos <code>break</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s1">\'F\'</span><span class="p">:</span>',
          '    <span class="k">break</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span> ',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Maximo',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos que uma das iterações não se execute por algum motivo, usamos <code>continue</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'Maximo FN\'</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s1">\' \'</span><span class="p">:</span>',
          '    <span class="k">continue</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span> ',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Com <code>else</code> é possível executar um bloco de código se a condição do <code>while</code> não for <code>True</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\'\'</span><span class="p">)</span> ',
          '<span class="k">else</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\n</span><span class="s2">Se ha terminado el for"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
          'Se ha terminado el for',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se por exemplo, se quisermos fazer a estrutura do <code>for</code> mas não quisermos, por enquanto, codificar seu interior, podemos usar <code>pass</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="k">pass</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s1">\'Interior del for no codificado\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Interior del for no codificado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="5.-Fun%C3%A7%C3%B5es">5. Funções<a class="anchor-link" href="#5.-Fun%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 238" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uma função é uma porção de código que pode ser executada tantas vezes quantas quiser. Ela pode receber argumentos e pode devolver dados como resultado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para definir uma função, começa-se com a palavra reservada <code>def</code>, seguida do nome da função, parênteses <code>()</code>, dois pontos <code>:</code> e, em seguida, na linha seguinte, o código da função indentado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
      '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <p>Para chamar a função, basta escrever seu nome.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As funções podem receber todos os argumentos que se deseja, dentro dos parênteses e separados por vírgulas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">string1</span><span class="p">,</span> <span class="n">string2</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">string1</span> <span class="o">+</span> <span class="s1">\' \'</span> <span class="o">+</span> <span class="n">string2</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="s2">"MaximoFN"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Quando se chama a função, deve-se passar o mesmo número de argumentos que foram declarados. Se forem passados mais ou menos, obteremos um Erro.
      Se <code>*args</code> é usado quando não sabemos quantos argumentos a função vai receber. Isso significa que podemos passar um número variável de argumentos.
      Ao fazer isso, passamos uma <code>tupla</code> (lembrando que ela é imutável) com os argumentos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="o">*</span><span class="n">argumentos</span><span class="p">):</span>',
          '  <span class="n">numero_argumentos</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumentos</span><span class="p">)</span>',
          '',
          '  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">numero_argumentos</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">argumentos</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">(</span><span class="s2">"funcion"</span><span class="p">,</span> <span class="s2">"con"</span><span class="p">,</span> <span class="s2">"varios"</span><span class="p">,</span> <span class="s2">"argumentos"</span><span class="p">,</span> <span class="s2">"sin"</span><span class="p">,</span> <span class="s2">"especificar"</span><span class="p">,</span> <span class="s2">"cuantos"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'funcion con varios argumentos sin especificar cuantos ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Em caso de não saber a ordem dos argumentos de uma função, podemos indicar o argumento que queremos passar indicando seu nome.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento1</span><span class="p">,</span> <span class="n">argumento2</span><span class="p">,</span> <span class="n">argumento3</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">argumento1</span> <span class="o">+</span> <span class="s1">\' \'</span><span class="o">+</span> <span class="n">argumento2</span> <span class="o">+</span> <span class="s1">\' \'</span> <span class="o">+</span> <span class="n">argumento3</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">(</span><span class="n">argumento3</span> <span class="o">=</span> <span class="s2">"MaximoFN"</span><span class="p">,</span> <span class="n">argumento1</span> <span class="o">=</span> <span class="s2">"Blog"</span><span class="p">,</span> <span class="n">argumento2</span> <span class="o">=</span> <span class="s2">"de"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Em caso de querer passar os argumentos com seus nomes, mas em caso de não saber quantos argumentos vão ser passados, pode usar <code>**kwargs</code>. Neste caso, será passado um dicionário com os argumentos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="o">**</span><span class="n">kargumentos</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Autor del blog: "</span> <span class="o">+</span> <span class="n">kargumentos</span><span class="p">[</span><span class="s2">"autor"</span><span class="p">])</span>',
          '',
          '<span class="n">funcion</span><span class="p">(</span><span class="n">blog</span> <span class="o">=</span> <span class="s2">"Blog"</span><span class="p">,</span> <span class="n">pertenencia</span> <span class="o">=</span> <span class="s2">"de"</span><span class="p">,</span> <span class="n">autor</span> <span class="o">=</span> <span class="s2">"MaximoFN"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Autor del blog: MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos que algum argumento tenha um valor padrão, podemos indicá-lo entre os parênteses da função. Dessa forma, se na hora de chamar a função não for passado esse argumento, este na função terá o valor padrão.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento1</span><span class="p">,</span> <span class="n">argumento2</span><span class="p">,</span> <span class="n">argumento3</span> <span class="o">=</span> <span class="s2">"MaximoFN"</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">argumento1</span> <span class="o">+</span> <span class="s1">\' \'</span><span class="o">+</span> <span class="n">argumento2</span> <span class="o">+</span> <span class="s1">\' \'</span> <span class="o">+</span> <span class="n">argumento3</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">(</span><span class="s2">"Blog"</span><span class="p">,</span> <span class="s2">"de"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode passar qualquer tipo de dado como argumento. Por exemplo, se você passar uma <code>lista</code> como argumento, dentro da função, esse argumento será tratado como uma <code>lista</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
          '  <span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
          '',
          '  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">longitud_lista</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">argumento</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">([</span><span class="s2">"Blog"</span><span class="p">,</span> <span class="s2">"de"</span><span class="p">,</span> <span class="s2">"MaximoFN"</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As funções podem devolver dados, isso é feito através da palavra reservada <code>return</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
          '  <span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
          '  <span class="n">string</span> <span class="o">=</span> <span class="s2">""</span>',
          '',
          '  <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">longitud_lista</span><span class="p">):</span>',
          '    <span class="n">string</span> <span class="o">=</span> <span class="n">string</span> <span class="o">+</span> <span class="n">argumento</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+</span> <span class="s1">\' \'</span>',
          '',
          '  <span class="k">return</span> <span class="n">string</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">funcion</span><span class="p">([</span><span class="s2">"Blog"</span><span class="p">,</span> <span class="s2">"de"</span><span class="p">,</span> <span class="s2">"MaximoFN"</span><span class="p">]))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podem devolver mais de um dado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
          '  <span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
          '  <span class="n">string0</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
          '  <span class="n">string1</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
          '  <span class="n">string2</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>',
          '',
          '  <span class="k">return</span> <span class="n">string0</span><span class="p">,</span> <span class="n">string1</span><span class="p">,</span> <span class="n">string2</span>',
          '',
          '<span class="n">dato0</span><span class="p">,</span> <span class="n">dato1</span><span class="p">,</span> <span class="n">dato2</span> <span class="o">=</span> <span class="n">funcion</span><span class="p">([</span><span class="s2">"Blog"</span><span class="p">,</span> <span class="s2">"de"</span><span class="p">,</span> <span class="s2">"MaximoFN"</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">dato0</span> <span class="o">+</span> <span class="s1">\' \'</span> <span class="o">+</span> <span class="n">dato1</span> <span class="o">+</span> <span class="s1">\' \'</span> <span class="o">+</span> <span class="n">dato2</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Blog de MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se um dos dados devolvidos não nos interessar, podemos ignorá-lo utilizando <code>_</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">(</span><span class="n">argumento</span><span class="p">):</span>',
          '  <span class="n">longitud_lista</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">argumento</span><span class="p">)</span>',
          '  <span class="n">string0</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>',
          '  <span class="n">string1</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
          '  <span class="n">string2</span> <span class="o">=</span> <span class="n">argumento</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>',
          '',
          '  <span class="k">return</span> <span class="n">string0</span><span class="p">,</span> <span class="n">string1</span><span class="p">,</span> <span class="n">string2</span>',
          '',
          '<span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">dato_de_interes</span> <span class="o">=</span> <span class="n">funcion</span><span class="p">([</span><span class="s2">"Blog"</span><span class="p">,</span> <span class="s2">"de"</span><span class="p">,</span> <span class="s2">"MaximoFN"</span><span class="p">])</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">dato_de_interes</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos criar a estrutura da função, mas não quisermos, por enquanto, codificar o interior, podemos usar <code>pass</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
      '  <span class="k">pass</span>',
      ' ',
      '<span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <p>A função pode chamar a si mesma, a isso se chama recursão ou recursividade da função.
      Por exemplo, podemos usar esta qualidade para calcular o fatorial de um número</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">factorial</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>',
          '  <span class="k">if</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">or</span> <span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>',
          '    <span class="k">return</span> <span class="mi">1</span>',
          '  <span class="k">else</span><span class="p">:</span>',
          '    <span class="k">return</span> <span class="n">n</span> <span class="o">*</span> <span class="n">factorial</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>',
          '',
          '<span class="n">factorial</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '120',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.1.-Fun%C3%A7%C3%B5es-integradas">5.1. Funções integradas<a class="anchor-link" href="#5.1.-Fun%C3%A7%C3%B5es-integradas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 239" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Há uma série de funções já definidas em Python que podem ser usadas, como, por exemplo, a função <code>abs()</code>, que retorna o valor absoluto.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">abs</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '5',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A seguir-se uma lista dessas funções</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">builtins</span>',
          '',
          '<span class="nb">dir</span><span class="p">(</span><span class="n">builtins</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'ArithmeticError\',',
          ' \'AssertionError\',',
          ' \'AttributeError\',',
          ' \'BaseException\',',
          ' \'BlockingIOError\',',
          ' \'BrokenPipeError\',',
          ' \'BufferError\',',
          ' \'BytesWarning\',',
          ' \'ChildProcessError\',',
          ' \'ConnectionAbortedError\',',
          ' \'ConnectionError\',',
          ' \'ConnectionRefusedError\',',
          ' \'ConnectionResetError\',',
          ' \'DeprecationWarning\',',
          ' \'EOFError\',',
          ' \'Ellipsis\',',
          ' \'EnvironmentError\',',
          ' \'Exception\',',
          ' \'False\',',
          ' \'FileExistsError\',',
          ' \'FileNotFoundError\',',
          ' \'FloatingPointError\',',
          ' \'FutureWarning\',',
          ' \'GeneratorExit\',',
          ' \'IOError\',',
          ' \'ImportError\',',
          ' \'ImportWarning\',',
          ' \'IndentationError\',',
          ' \'IndexError\',',
          ' \'InterruptedError\',',
          ' \'IsADirectoryError\',',
          ' \'KeyError\',',
          ' \'KeyboardInterrupt\',',
          ' \'LookupError\',',
          ' \'MemoryError\',',
          ' \'ModuleNotFoundError\',',
          ' \'NameError\',',
          ' \'None\',',
          ' \'NotADirectoryError\',',
          ' \'NotImplemented\',',
          ' \'NotImplementedError\',',
          ' \'OSError\',',
          ' \'OverflowError\',',
          ' \'PendingDeprecationWarning\',',
          ' \'PermissionError\',',
          ' \'ProcessLookupError\',',
          ' \'RecursionError\',',
          ' \'ReferenceError\',',
          ' \'ResourceWarning\',',
          ' \'RuntimeError\',',
          ' \'RuntimeWarning\',',
          ' \'StopAsyncIteration\',',
          ' \'StopIteration\',',
          ' \'SyntaxError\',',
          ' \'SyntaxWarning\',',
          ' \'SystemError\',',
          ' \'SystemExit\',',
          ' \'TabError\',',
          ' \'TimeoutError\',',
          ' \'True\',',
          ' \'TypeError\',',
          ' \'UnboundLocalError\',',
          ' \'UnicodeDecodeError\',',
          ' \'UnicodeEncodeError\',',
          ' \'UnicodeError\',',
          ' \'UnicodeTranslateError\',',
          ' \'UnicodeWarning\',',
          ' \'UserWarning\',',
          ' \'ValueError\',',
          ' \'Warning\',',
          ' \'ZeroDivisionError\',',
          ' \'__IPYTHON__\',',
          ' \'__build_class__\',',
          ' \'__debug__\',',
          ' \'__doc__\',',
          ' \'__import__\',',
          ' \'__loader__\',',
          ' \'__name__\',',
          ' \'__package__\',',
          ' \'__spec__\',',
          ' \'abs\',',
          ' \'all\',',
          ' \'any\',',
          ' \'ascii\',',
          ' \'bin\',',
          ' \'bool\',',
          ' \'breakpoint\',',
          ' \'bytearray\',',
          ' \'bytes\',',
          ' \'callable\',',
          ' \'chr\',',
          ' \'classmethod\',',
          ' \'compile\',',
          ' \'complex\',',
          ' \'copyright\',',
          ' \'credits\',',
          ' \'delattr\',',
          ' \'dict\',',
          ' \'dir\',',
          ' \'display\',',
          ' \'divmod\',',
          ' \'enumerate\',',
          ' \'eval\',',
          ' \'exec\',',
          ' \'filter\',',
          ' \'float\',',
          ' \'format\',',
          ' \'frozenset\',',
          ' \'get_ipython\',',
          ' \'getattr\',',
          ' \'globals\',',
          ' \'hasattr\',',
          ' \'hash\',',
          ' \'help\',',
          ' \'hex\',',
          ' \'id\',',
          ' \'input\',',
          ' \'int\',',
          ' \'isinstance\',',
          ' \'issubclass\',',
          ' \'iter\',',
          ' \'len\',',
          ' \'license\',',
          ' \'list\',',
          ' \'locals\',',
          ' \'map\',',
          ' \'max\',',
          ' \'memoryview\',',
          ' \'min\',',
          ' \'next\',',
          ' \'object\',',
          ' \'oct\',',
          ' \'open\',',
          ' \'ord\',',
          ' \'pow\',',
          ' \'print\',',
          ' \'property\',',
          ' \'range\',',
          ' \'repr\',',
          ' \'reversed\',',
          ' \'round\',',
          ' \'set\',',
          ' \'setattr\',',
          ' \'slice\',',
          ' \'sorted\',',
          ' \'staticmethod\',',
          ' \'str\',',
          ' \'sum\',',
          ' \'super\',',
          ' \'tuple\',',
          ' \'type\',',
          ' \'vars\',',
          ' \'zip\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.2.-Documenta%C3%A7%C3%A3o-de-uma-fun%C3%A7%C3%A3o">5.2. Documentação de uma função<a class="anchor-link" href="#5.2.-Documenta%C3%A7%C3%A3o-de-uma-fun%C3%A7%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 240" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se adicionar uma explicação de uma função que criamos por meio de um comentário no início da função, dessa forma quando chamarmos a função <code>built in</code> <code>help()</code> ela mostrará essa explicação.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="s2">"Esta es la explicación de la función"</span>',
          '',
          '  <span class="kc">None</span>',
          '',
          '<span class="n">help</span><span class="p">(</span><span class="n">funcion</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Help on function funcion in module __main__:',
          'funcion()',
          '    Esta es la explicación de la función',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Outra opção para ver a explicação da função é usar o método <code>__doc__</code> da função</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">funcion</span><span class="o">.</span><span class="vm">__doc__</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Esta es la explicación de la función\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.3.-Decoradores">5.3. Decoradores<a class="anchor-link" href="#5.3.-Decoradores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 241" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os decoradores são uma funcionalidade do Python que permitem adicionar características novas a uma função.
      Cria-se uma função decoradora que tem como parâmetro outra função. Então, a função decoradora adiciona a nova característica à função que recebe.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">decorador</span><span class="p">(</span><span class="n">parametro_funcion</span><span class="p">):</span>',
          '<span class="w">  </span><span class="sd">"""Agrega barritas arriba y abajo de la funcion"""</span>',
          '',
          '  <span class="k">def</span> <span class="nf">envoltorio</span><span class="p">():</span>',
          '<span class="w">    </span><span class="sd">"""Aplica las barritas al texto"""</span>',
          '',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"=================="</span><span class="p">)</span>',
          '    <span class="n">parametro_funcion</span><span class="p">()</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"=================="</span><span class="p">)</span>',
          '      ',
          '  <span class="k">return</span> <span class="n">envoltorio</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"MaximoFN"</span><span class="p">)</span>',
          '',
          '<span class="n">funcion_envoltorio</span> <span class="o">=</span> <span class="n">decorador</span><span class="p">(</span><span class="n">funcion</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s1">\'Función sin decoradores: \'</span><span class="p">)</span>',
          '<span class="n">funcion</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s1">\'</span><span class="se">\\n</span><span class="s1">Función con decoradores: \'</span><span class="p">)</span>',
          '<span class="n">funcion_envoltorio</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Función sin decoradores: ',
          'MaximoFN',
          'Función con decoradores: ',
          '==================',
          'MaximoFN',
          '==================',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mas uma maneira mais potente de usar decoradores é através do uso de <code>@</code> e o nome do decorador antes da função.
      Isto é, primeiro se define o decorador e em seguida se chama uma função com o decorador definido.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">decorador2</span><span class="p">(</span><span class="n">parametro_funcion2</span><span class="p">):</span>',
          '<span class="w">  </span><span class="sd">"""Agrega barritas arriba y abajo de la funcion"""</span>',
          '',
          '  <span class="k">def</span> <span class="nf">envoltorio2</span><span class="p">():</span>',
          '<span class="w">    </span><span class="sd">"""Aplica las barritas al texto"""</span>',
          '',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"=================="</span><span class="p">)</span>',
          '    <span class="n">parametro_funcion2</span><span class="p">()</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"=================="</span><span class="p">)</span>',
          '      ',
          '  <span class="k">return</span> <span class="n">envoltorio2</span>',
          '',
          '<span class="nd">@decorador2</span>',
          '<span class="k">def</span> <span class="nf">funcion2</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"MaximoFN"</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s1">\'Función con decoradores: \'</span><span class="p">)</span>',
          '<span class="n">funcion2</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Función con decoradores: ',
          '==================',
          'MaximoFN',
          '==================',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="5.4.-*args-e-**kwargs">5.4. <code>*args</code> e <code>**kwargs</code><a class="anchor-link" href="#5.4.-*args-e-**kwargs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 242" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>*args</code> e <code>**kwargs</code> são argumentos opcionais que podem ser usados ao definir uma função em Python. A sintaxe é a seguinte:</p>
      <div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">minha_funcao</span><span class="p">(</span><span class="n">arg1</span><span class="p">,</span> <span class="n">arg2</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>    <span class="c1"># código da função aqui```</span>
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.5.1.-*args">2.5.1. <code>*args</code><a class="anchor-link" href="#2.5.1.-*args"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 243" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>*args</code> é usado para enviar um número variável de argumentos para uma função. Ao usar <code>*args</code>, você pode enviar uma quantidade variável de argumentos para a função sem precisar o número exato de argumentos que a função precisa. Os argumentos são recebidos na função como uma tupla.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">saludo</span><span class="p">(</span><span class="n">saludo</span><span class="p">,</span> <span class="o">*</span><span class="n">nombres</span><span class="p">):</span>',
          '    <span class="k">for</span> <span class="n">nombre</span> <span class="ow">in</span> <span class="n">nombres</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">saludo</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="n">nombre</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">saludo</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="s2">"Alicia"</span><span class="p">,</span> <span class="s2">"Roberto"</span><span class="p">,</span> <span class="s2">"Carlos"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, Alicia',
          'Hola, Roberto',
          'Hola, Carlos',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="2.5.4.2.-**kwargs">2.5.4.2. <code>**kwargs</code><a class="anchor-link" href="#2.5.4.2.-**kwargs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 244" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><code>**kwargs</code> é usado da mesma maneira, mas para enviar um número variável de argumentos com palavras-chave (<code>keyword arguments</code>) para uma função. Ao usar <code>**kwargs</code>, você pode enviar uma quantidade variável de argumentos para a função e especificar o valor de cada argumento usando seu nome. Os argumentos são recebidos na função como um Dicionário.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">saludo</span><span class="p">(</span><span class="n">saludo</span><span class="p">,</span> <span class="o">**</span><span class="n">personas</span><span class="p">):</span>',
          '    <span class="k">for</span> <span class="n">key</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">personas</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">saludo</span><span class="si">}</span><span class="s2"> </span><span class="si">{</span><span class="n">key</span><span class="si">}</span><span class="s2">, tu edad es </span><span class="si">{</span><span class="n">value</span><span class="si">}</span><span class="s2"> años"</span><span class="p">)</span>',
          '',
          '<span class="n">saludo</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="n">Juan</span><span class="o">=</span><span class="mi">22</span><span class="p">,</span> <span class="n">Maria</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">Pedro</span><span class="o">=</span><span class="mi">25</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola Juan, tu edad es 22 años',
          'Hola Maria, tu edad es 32 años',
          'Hola Pedro, tu edad es 25 años',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="6.-Fun%C3%A7%C3%B5es-Adicionais">6. Funções Adicionais<a class="anchor-link" href="#6.-Fun%C3%A7%C3%B5es-Adicionais"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 245" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.1.-Fun%C3%A7%C3%B5es-lambda">6.1. Funções <em>lambda</em><a class="anchor-link" href="#6.1.-Fun%C3%A7%C3%B5es-lambda"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 246" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A função <em>lambda</em> é uma pequena função anônima.
      A função <em>lambda</em> pode tomar qualquer número de argumentos, mas só pode ter uma expressão.
      As funções <em>lambda</em> são definidas da seguinte maneira:<code>lambda argumentos : expressão</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">a</span> <span class="o">+</span> <span class="mi">10</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '15',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span> <span class="p">:</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span> <span class="o">+</span> <span class="n">c</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '13',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O poder de <em>lambda</em> mostra-seu melhor quando as usa como uma função anônima dentro de outra função.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">myfunc</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>',
          '  <span class="k">return</span> <span class="k">lambda</span> <span class="n">a</span> <span class="p">:</span> <span class="n">a</span> <span class="o">*</span> <span class="n">n</span>',
          '',
          '<span class="n">mydoubler</span> <span class="o">=</span> <span class="n">myfunc</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>',
          '<span class="n">mytripler</span> <span class="o">=</span> <span class="n">myfunc</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"mydoubler: </span><span class="si">{</span><span class="n">mydoubler</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"mytripler: </span><span class="si">{</span><span class="n">mytripler</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'mydoubler: 22',
          'mytripler: 33',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.2.-Fun%C3%A7%C3%A3o-map">6.2. Função <code>map</code><a class="anchor-link" href="#6.2.-Fun%C3%A7%C3%A3o-map"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 247" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A função <code>map</code> permite aplicar uma função a cada elemento de uma estrutura iterável.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion_mas_1</span><span class="p">(</span><span class="n">valor</span><span class="p">):</span>',
          '  <span class="k">return</span> <span class="n">valor</span> <span class="o">+</span> <span class="mi">1</span>',
          '',
          '<span class="n">lista_modificada</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">map</span><span class="p">(</span><span class="n">funcion_mas_1</span><span class="p">,</span> <span class="n">lista</span><span class="p">))</span>',
          '<span class="n">lista_modificada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[2, 3, 4]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Isto é equivalente a usar <code>list comprehension</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista_modificada</span> <span class="o">=</span> <span class="p">[</span><span class="n">funcion_mas_1</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lista</span><span class="p">]</span>',
          '<span class="n">lista_modificada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[2, 3, 4]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.3.-Fun%C3%A7%C3%A3o-filter">6.3. Função <code>filter</code><a class="anchor-link" href="#6.3.-Fun%C3%A7%C3%A3o-filter"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 248" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A função <code>filter</code> permite selecionar os elementos de uma estrutura iterável que cumpram com uma condição</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>',
          '',
          '<span class="k">def</span> <span class="nf">esPar</span><span class="p">(</span><span class="n">valor</span><span class="p">):</span>',
          '  <span class="k">return</span> <span class="n">valor</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span>',
          '',
          '<span class="n">lista_filtrada</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">filter</span><span class="p">(</span><span class="n">esPar</span><span class="p">,</span> <span class="n">lista</span><span class="p">))</span>',
          '<span class="n">lista_filtrada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[2, 4, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Isto é equivalente a usar <code>list comprehension</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">lista_filtrada</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">lista</span> <span class="k">if</span> <span class="n">esPar</span><span class="p">(</span><span class="n">x</span><span class="p">)]</span>',
          '<span class="n">lista_filtrada</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[2, 4, 6]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.4.-Fun%C3%A7%C3%A3o-reduce">6.4. Função <code>reduce</code><a class="anchor-link" href="#6.4.-Fun%C3%A7%C3%A3o-reduce"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 249" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A função <code>reduce</code> permite realizar tarefas acumulativas sobre estruturas iteráveis.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">functools</span> <span class="kn">import</span> <span class="n">reduce</span>',
          '',
          '<span class="n">lista</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">22</span><span class="p">,</span> <span class="mi">33</span><span class="p">]</span>',
          '',
          '<span class="k">def</span> <span class="nf">acumular</span><span class="p">(</span><span class="n">valor</span><span class="p">,</span> <span class="n">acumulador</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'valor = </span><span class="si">{</span><span class="n">valor</span><span class="si">}</span><span class="s1">, acumulador = </span><span class="si">{</span><span class="n">acumulador</span><span class="si">}</span><span class="s1">, acumulacion = </span><span class="si">{</span><span class="n">valor</span><span class="w"> </span><span class="o">+</span><span class="w"> </span><span class="n">acumulador</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '  <span class="k">return</span> <span class="n">valor</span> <span class="o">+</span> <span class="n">acumulador</span>',
          '',
          '<span class="n">acumulacion</span> <span class="o">=</span> <span class="n">reduce</span><span class="p">(</span><span class="n">acumular</span><span class="p">,</span> <span class="n">lista</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'</span><span class="se">\\n</span><span class="s1">acumulacion = </span><span class="si">{</span><span class="n">acumulacion</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'valor = 1, acumulador = 22, acumulacion = 23',
          'valor = 23, acumulador = 33, acumulacion = 56',
          'acumulacion = 56',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.5.-Fun%C3%A7%C3%A3o-zip">6.5. Função <code>zip</code><a class="anchor-link" href="#6.5.-Fun%C3%A7%C3%A3o-zip"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 250" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com a função <code>zip</code>, é possível combinar várias estruturas iteráveis em uma única, ou seja, permite agrupar vários elementos das estruturas <em>A<sub>x</sub></em> em uma única estrutura <em>B</em>. A estrutura <em>B</em> é formada por tuplas dos elementos das estruturas <em>A<sub>x</sub></em>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">nombres</span> <span class="o">=</span> <span class="p">[</span><span class="s2">"Manolo"</span><span class="p">,</span> <span class="s2">"Andres"</span><span class="p">,</span> <span class="s2">"Fernando"</span><span class="p">]</span>',
          '<span class="n">altura</span> <span class="o">=</span> <span class="p">[</span><span class="mi">181</span><span class="p">,</span> <span class="mi">178</span><span class="p">,</span> <span class="mi">180</span><span class="p">]</span>',
          '',
          '<span class="n">my_zip</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="n">nombres</span><span class="p">,</span> <span class="n">altura</span><span class="p">))</span>',
          '<span class="n">my_zip</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[(\'Manolo\', 181), (\'Andres\', 178), (\'Fernando\', 180)]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.5.-Geradores">6.5. Geradores<a class="anchor-link" href="#6.5.-Geradores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 251" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que queremos iterar sobre uma sequência de números, mas de uma maneira especial que não nos oferece nenhum tipo de bucle. Isso podemos resolver com os geradores. Para poder fazer isso, a função geradora não tem que devolver o valor com <code>return</code>, mas com <code>yield</code> para que saiba que tem que seguir iterando.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">iterador_custom</span><span class="p">(</span><span class="n">N</span><span class="p">):</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span> <span class="p">(</span><span class="n">N</span><span class="p">):</span>',
          '        <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">3</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
          '            <span class="k">yield</span> <span class="n">i</span>',
          '',
          '<span class="n">generador</span> <span class="o">=</span> <span class="n">iterador_custom</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>',
          '<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">generador</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0',
          '3',
          '6',
          '9',
          '12',
          '15',
          '18',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Acabamos de fazer um iterador por números múltiplos de 3</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="6.6.-Fun%C3%A7%C3%B5es-de-ordem-superior">6.6. Funções de ordem superior<a class="anchor-link" href="#6.6.-Fun%C3%A7%C3%B5es-de-ordem-superior"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 252" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos criar funções que recebem outras funções como parâmetros, de maneira que a função que recebe outra função como parâmetro é chamada de função de ordem superior (high order function). Vejamos um exemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">increment</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>',
          '    <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="mi">1</span>',
          '',
          '<span class="k">def</span> <span class="nf">hof</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">x</span><span class="p">):</span>',
          '    <span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="n">f</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">hof</span><span class="p">(</span><span class="n">increment</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="7.-Classes-e-objetos">7. Classes e objetos<a class="anchor-link" href="#7.-Classes-e-objetos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 253" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Python é uma linguagem de programação orientada a objetos. Quase tudo em Python é um objeto, com seus atributos e métodos.
      classe é como um construtor de objetos ou um "plano" para criar objetos.
      Para criar uma classe, usa-se a palavra reservada <code>class</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span> <span class="nc">Clase</span><span class="p">:</span>',
      '  <span class="n">variable</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <p>vez criada a classe, pode-se criar um objeto dessa classe</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">objeto</span> <span class="o">=</span> <span class="n">Clase</span><span class="p">()</span>',
          '<span class="n">Clase</span><span class="o">.</span><span class="n">variable</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'MaximoFN\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Normalmente as classes têm uma função inicial, que é executada quando se cria um objeto da classe. Esta função é denominada <em>dunder init</em> e é escrita <code>__init__()</code>. À função <em>dunder init</em> deve-se sempre passar a variável <code>self</code>, que indica a própria classe, e em seguida, as variáveis que se deseja passar.
      Com esta função, geralmente se inicializam as variáveis das classes ou se executa o código necessário quando um objeto da classe é criado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Persona</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">edad</span><span class="p">):</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">edad</span> <span class="o">=</span> <span class="n">edad</span>',
          '',
          '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">"Miguel"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">objeto_persona</span><span class="o">.</span><span class="n">edad</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Miguel',
          '36',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Além da função inicial <em>dunder init</em>, podem ser criadas mais funções. A estas funções chamamos <em>métodos</em> da classe. A estes <em>métodos</em> sempre é necessário passar a variável <code>self</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Persona</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">edad</span><span class="p">):</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">edad</span> <span class="o">=</span> <span class="n">edad</span>',
          '',
          '  <span class="k">def</span> <span class="nf">saludar</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Hola mi nombre es </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">nombre</span><span class="si">}</span><span class="s1"> y tengo </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">edad</span><span class="si">}</span><span class="s1"> años\'</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">"Miguel"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_persona</span><span class="o">.</span><span class="n">saludar</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola mi nombre es Miguel y tengo 36 años',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A variável <code>self</code> não precisa ser chamada <code>self</code>, pode ter qualquer nome, mas dentro de cada classe deve ser sempre o mesmo. Mas por convenção, geralmente se usa <code>self</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Persona</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="n">yo_mismo</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">edad</span><span class="p">):</span>',
          '    <span class="n">yo_mismo</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
          '    <span class="n">yo_mismo</span><span class="o">.</span><span class="n">edad</span> <span class="o">=</span> <span class="n">edad</span>',
          '',
          '  <span class="k">def</span> <span class="nf">saludar</span><span class="p">(</span><span class="n">yo_mismo</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Hola mi nombre es </span><span class="si">{</span><span class="n">yo_mismo</span><span class="o">.</span><span class="n">nombre</span><span class="si">}</span><span class="s1"> y tengo </span><span class="si">{</span><span class="n">yo_mismo</span><span class="o">.</span><span class="n">edad</span><span class="si">}</span><span class="s1"> años\'</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">"Miguel"</span><span class="p">,</span> <span class="mi">36</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_persona</span><span class="o">.</span><span class="n">saludar</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola mi nombre es Miguel y tengo 36 años',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As variáveis dos objetos podem ser modificadas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="s1">\'Marta\'</span>',
          '<span class="n">objeto_persona</span><span class="o">.</span><span class="n">saludar</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola mi nombre es Marta y tengo 36 años',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Até eliminá-las</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">del</span> <span class="n">objeto_persona</span><span class="o">.</span><span class="n">nombre</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Também é possível eliminar o objeto inteiro.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">del</span> <span class="n">objeto_persona</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Se quisermos, por exemplo, criar a estrutura da classe, mas não quisermos, por enquanto, codificar o interior, podemos usar <code>pass</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span> <span class="nc">Persona</span><span class="p">:</span>',
      '  <span class="k">pass</span>',
      ' ',
      '<span class="n">objeto_persona</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









      
      <section class="section-block-markdown-cell">
      <h3 id="7.1.-Heran%C3%A7a">7.1. Herança<a class="anchor-link" href="#7.1.-Heran%C3%A7a"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 254" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A herança nos permite definir uma classe que herde todos os métodos e propriedades de outra classe.
      A <strong>classe pai</strong> é a classe da qual se herda, também chamada <strong>classe base</strong>.
      A <strong>classe filha</strong> é a classe que herda de outra classe, também chamada <strong>classe derivada</strong>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Criamos uma classe pai</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Persona</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">):</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">nombre</span> <span class="o">=</span> <span class="n">nombre</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">apellido</span> <span class="o">=</span> <span class="n">apellido</span>',
          '',
          '  <span class="k">def</span> <span class="nf">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Me llamo </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">nombre</span><span class="si">}</span><span class="s1"> </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">apellido</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_padre</span> <span class="o">=</span> <span class="n">Persona</span><span class="p">(</span><span class="s2">"Laura"</span><span class="p">,</span> <span class="s2">"Perez"</span><span class="p">)</span>',
          '<span class="n">objeto_padre</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Laura Perez',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Para criar a classe filha, é necessário indicar entre parênteses, no momento de declarar a classe, de qual classe ela herda.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">class</span> <span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
      '  <span class="k">pass</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <p>E no momento de criar o objeto da classe filha, passam-se os parâmetros que a classe pai precisa.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">"Mariano"</span><span class="p">,</span> <span class="s2">"Sanz"</span><span class="p">)</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Até agora, a classe filha herdou as funções da classe pai, mas podemos modificá-las reescrevendo-as. Por exemplo, reescrevendo a função <em>dunder init</em>.
      Se reescreve a função <em>dunder init</em>, se quisermos que seja chamada a função <em>dunder init</em> da classe pai, temos que chamá-la.
      Para isso, existem duas maneiras: uma é através do nome da classe pai. Nesse caso, é necessário passar a variável <code>self</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">):</span>',
          '    <span class="n">Persona</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">"Mariano"</span><span class="p">,</span> <span class="s2">"Sanz"</span><span class="p">)</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Outra forma é através de <code>super()</code>, neste caso não é necessário passar a variável <code>self</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">):</span>',
          '    <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">"Mariano"</span><span class="p">,</span> <span class="s2">"Sanz"</span><span class="p">)</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ao modificar as funções, pode-se adicionar novo código.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">,</span> <span class="n">curso</span><span class="p">):</span>',
          '    <span class="n">Persona</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">curso</span> <span class="o">=</span> <span class="n">curso</span>',
          '',
          '  <span class="k">def</span> <span class="nf">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="n">Persona</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Estoy en el curso número </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">curso</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">"Mariano"</span><span class="p">,</span> <span class="s2">"Sanz"</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
          'Estoy en el curso número 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por último, podem adicionar novos métodos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Estudiante</span><span class="p">(</span><span class="n">Persona</span><span class="p">):</span>',
          '  <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">,</span> <span class="n">curso</span><span class="p">):</span>',
          '    <span class="n">Persona</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nombre</span><span class="p">,</span> <span class="n">apellido</span><span class="p">)</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">curso</span> <span class="o">=</span> <span class="n">curso</span>',
          '',
          '  <span class="k">def</span> <span class="nf">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="n">Persona</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Estoy en el curso número </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">curso</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '  <span class="k">def</span> <span class="nf">imprimir_estudiante</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"Soy un estudiante del curso número </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">curso</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '',
          '<span class="n">objeto_hijo</span> <span class="o">=</span> <span class="n">Estudiante</span><span class="p">(</span><span class="s2">"Mariano"</span><span class="p">,</span> <span class="s2">"Sanz"</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_nombre</span><span class="p">()</span>',
          '<span class="n">objeto_hijo</span><span class="o">.</span><span class="n">imprimir_estudiante</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Me llamo Mariano Sanz',
          'Estoy en el curso número 4',
          'Soy un estudiante del curso número 4',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.2.-Sobrecarga-de-operadores">7.2. Sobrecarga de operadores<a class="anchor-link" href="#7.2.-Sobrecarga-de-operadores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 255" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos definir operações básicas, como a soma, entre vários objetos de uma classe. Por exemplo, se tivermos uma classe que representa um vetor, podemos definir a soma e a multiplicação entre objetos dessa classe.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Vector</span><span class="p">:</span>',
          '    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="n">Vector</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">+</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__mul__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="n">Vector</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">*</span> <span class="n">other</span><span class="o">.</span><span class="n">x</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">*</span> <span class="n">other</span><span class="o">.</span><span class="n">y</span><span class="p">)</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="sa">f</span><span class="s2">"Vector (</span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">x</span><span class="si">}</span><span class="s2">, </span><span class="si">{</span><span class="bp">self</span><span class="o">.</span><span class="n">y</span><span class="si">}</span><span class="s2">)"</span>',
          '',
          '<span class="n">v1</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>',
          '<span class="n">v2</span> <span class="o">=</span> <span class="n">Vector</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">v1</span> <span class="o">+</span> <span class="n">v2</span><span class="p">)</span>  <span class="c1"># Vector (4, 6)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">v1</span> <span class="o">*</span> <span class="n">v2</span><span class="p">)</span>  <span class="c1"># Vector (3, 8)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Vector (4, 6)',
          'Vector (3, 8)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Todas as possíveis sobrecargas de operadores são:</p>
      <ul>
      <li><code>__add__(self, other)</code>: sobrecarrega o operador de soma (<code>+</code>).* <code>__sub__(self, other)</code>: sobrecarrega o operador de subtração (<code>-</code>).* <code>__mul__(self, other)</code>: sobrecarrega o operador de multiplicação (<code>*</code>).* <code>__truediv__(self, other)</code>: sobrecarrega o operador de divisão (<code>/</code>).* <code>__floordiv__(self, other)</code>: sobrecarrega o operador de divisão de arredondamento (<code>//</code>). * <code>__mod__(self, other)</code>: sobrecarrega o operador de módulo (<code>%</code>).* <code>__divmod__(self, other)</code>: sobrecarrega a função <code>divmod()</code>. * <code>__pow__(self, other)</code>: sobrecarrega o operador de potência (<code>**</code>). * <code>__lshift__(self, other)</code>: sobrecarrega o operador de deslocamento à esquerda (<code>&lt;&lt;</code>).* <code>__rshift__(self, other)</code>: sobrecarrega o operador de deslocamento para a direita (<code>&gt;&gt;</code>).* <code>__and__(self, other)</code>: sobrecarrega o operador de and (<code>&amp;</code>).* <code>__or__(self, other)</code>: sobrecarrega o operador de or (<code>|</code>).* <code>__xor__(self, other)</code>: sobrecarrega o operador de xor (<code>^</code>). * <code>__lt__(self, other)</code>: sobrecarrega o operador de comparação menor que (<code>&lt;</code>).* <code>__le__(self, other)</code>: sobrecarrega o operador de comparação menor ou igual que (<code>&lt;=</code>).* <code>__eq__(self, other)</code>: sobrecarrega o operador de comparação igual a (<code>==</code>).* <code>__ne__(self, other)</code>: sobrecarrega o operador de comparação diferente (<code>!=</code>).* <code>__gt__(self, other)</code>: sobrecarrega o operador de comparação maior que (<code>&gt;</code>).* <code>__ge__(self, other)</code>: sobrecarrega o operador de comparação maior ou igual que (<code>&gt;=</code>).* <code>__neg__(self)</code>: sobrecarrega o operador de negação (<code>-</code>).* <code>__pos__(self)</code>: sobrecarrega o operador de posição (<code>+</code>). * <code>__abs__(self)</code>: sobrecarrega a função <code>abs()</code>.* <code>__invert__(self)</code>: sobrecarrega o operador de inversão (<code>~</code>).* <code>__complex__(self)</code>: sobrecarrega a função <code>complex()</code>. * <code>__int__(self)</code>: sobrecarrega a função <code>int()</code>. * <code>__float__(self)</code>: sobrecarrega a função <code>float()</code>.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.3.-Iteradores-personalizados">7.3. Iteradores personalizados<a class="anchor-link" href="#7.3.-Iteradores-personalizados"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 256" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vimos no o tópico <a href="https://www.maximofn.com/python/#2.-Tipos-de-dados-de-Python">2 (Tipos de dados do Python)</a>, existem alguns tipos de dados sobre os quais podemos iterar. Mas podemos criar nossa própria classe iterável, desde que tenha as funções <code>__len__</code> e <code>__getitem__</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">custonIterator</span><span class="p">:</span>',
          '    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">items</span> <span class="o">=</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="nb">len</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">)</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">items</span><span class="p">[</span><span class="n">index</span><span class="p">]</span>',
          '',
          '<span class="n">iterator</span> <span class="o">=</span> <span class="n">custonIterator</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">iterator</span><span class="p">))</span>  <span class="c1"># 10</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">iterator</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>  <span class="c1"># 0</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">iterator</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>  <span class="c1"># 1</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '10',
          '0',
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora podemos iterar com o objeto da nossa classe com loops <code>for</code>, por exemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">iterator</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">" "</span><span class="p">)</span>  <span class="c1"># 0 1 2 3 4 5 6 7 8 9</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '0 1 2 3 4 5 6 7 8 9 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.4.-Chamada-a-objetos-como-fun%C3%A7%C3%B5es">7.4. Chamada a objetos como funções<a class="anchor-link" href="#7.4.-Chamada-a-objetos-como-fun%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 257" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos nos interesar llamar a un objeto de uma função como se fosse uma classe. Isto pode ser conseguido adicionando a função <code>__call__</code> à classe.</p>
      <p>(Note: There seems to be a mix of Spanish and Portuguese in the original text. I've translated it to Portuguese, but the original text might need some adjustments for consistency.)</p>
      <p>Here is the corrected Portuguese translation:</p>
      <p>Podemos nos interessar em chamar a um a objeto:</p>
      <p>Pod we interest to Portuguese:</p>
      <p>Podemos the texto:</p>
      <p>Note) as:</p>
      <p>Podemos__Pod) interest to função) função__) a função) função) function) chamar a função__) que) <code>função</code> função uma port the, que a following:</p>
      <p>a) to-:</p>
      <p>__ a `) a função) função a function) to to:</p>
      <p>__ função <code>)-se</code>em <code>( ( (</code>) a função (.. function <code>functionar a a a que que a function</code> function <code></code> function a function <code>)__ que a</code> <code>a função to uma to função</code> a following a __ a <code></code> <code></code>.</p>
      <p>a função ` Portuguese:</p>
      <p>Portuguese the function <code>a</code> to that, but a a <code>a</code> ` a:</p>
      <p><code>function</code> `__.</p>
      <p>the function <code>a function</code> a function to a a a a a function <code>called a function</code> <code></code> method a function:</p>
      <p>a function. a function <code>a</code> to the function <code>be called to the. a</code> ability to <code>, function</code> se function <code>function</code> a function ` called to a function.</p>
      <p>to call function to function <code></code> <code>function a function to a function. a</code> <code>to the function of calling the function</code> a function to a function <code>be called function to Portuguese the function</code> <code>a function to the class to</code> the ability to the class <code>se function to be called</code> a function.</p>
      <p>a function <code>ser function</code>a function <code>have</code> <code>, but the function</code> call to the class.</p>
      <p>the function to be called function to the <code></code> called to the Portuguese:</p>
      <p>function:</p>
      <p>the function to be called:</p>
      <p>:</p>
      <p>:</p>
      <p>a function ` a way of a call to function to have function:</p>
      <p>to <code>function</code>__call<code>a function to call</code> a to call the function ` be called to:</p>
      <p>the function to be called to the function, have the ability to be called to a function, being a ability to call a object.</p>
      <p>a function to the object.</p>
      <p>.</p>
      <p>the function.</p>
      <p>function function.. function ` function to be called:</p>
      <p>the function is called to the function to be class. a function to have the ability to calling the object to be called. function to be called, for example, the following is the Portuguese translation to Portuguese function:</p>
      <p>:</p>
      <p>function can be be called to have function ` call__ to the class.</p>
      <p>.</p>
      <p>the ability to be called to the class.</p>
      <p><code>ability to being called function</code> call ability to function:</p>
      <p>` function to be called, the function to be called, but the ability in the class.. function to be called:</p>
      <p>function to be called, a function to the function of calling the function ` a function to be called to the class:</p>
      <p>function to be called to a function:</p>
      <p>the ability to being called to have function `call__ to the class, following the ability of calling the function to be called:</p>
      <p>function ` call__ to the class, the ability of calling the function to be called:</p>
      <p>function to a function of a function to be called.</p>
      <p>function to the function to be called to a function ` a function to be called, the ability to have function to be called to the function of calling the function to be called.</p>
      <p>the ability of calling the function to be called.</p>
      <p>function to be called to the class.</p>
      <p>function to be called.</p>
      <p>function to be called. function to be called. the function ` call__ to the class.</p>
      <p>function. be called. a function to be called.</p>
      <p>function to be called.</p>
      <p>function to be called. the function can be called the function to be called.</p>
      <p>function.</p>
      <p>This the ability to call a function to behave called to be called to the class of, called.</p>
      <p>the function.</p>
      <p>function to calling the function to be called. function.</p>
      <p>call the function to called function to the function to be called function the the function to call function function call function to the function to the function of calling the function to be called.</p>
      <p>the function to be called to the function to be called.</p>
      <p>the function to call function to be called function to.</p>
      <p>function function:</p>
      <p>the function to be called to have function to be called function to function to the function of calling the function to the function to the function to be called:</p>
      <p>the ability to be called.</p>
      <p>function to be called like a function can be called to the function or a function that be called to have function to be called to the function of calling the function to be called to the function to be called to have function to be called to the function ` ability to ability to call function to the ability to being called to the ability of calling the ability of calling</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">potencia</span><span class="p">:</span>',
          '    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">base</span><span class="p">):</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">base</span> <span class="o">=</span> <span class="n">base</span>',
          '    ',
          '    <span class="k">def</span> <span class="fm">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">potencia</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">base</span> <span class="o">**</span> <span class="n">potencia</span>',
          '    ',
          '<span class="n">potencia_cuadrado</span> <span class="o">=</span> <span class="n">potencia</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">potencia_cuadrado</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span>  <span class="c1"># 8</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '8',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="7.5.-Atributos-e-fun%C3%A7%C3%B5es-privadas">7.5. Atributos e funções privadas<a class="anchor-link" href="#7.5.-Atributos-e-fun%C3%A7%C3%B5es-privadas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 258" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando criamos uma classe, podemos fazer que alguns atributos ou funções sejam-Privados e não se possa acessar desde fora da classe, para isso temos que adicionar <code>__</code> antes do atributo ou método.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Privados</span><span class="p">:</span>',
          '    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">publico</span> <span class="o">=</span> <span class="s2">"Soy público"</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">__privado</span> <span class="o">=</span> <span class="s2">"Soy privado"</span>',
          '    ',
          '    <span class="k">def</span> <span class="nf">getPrivado</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__privado</span>',
          '    ',
          '    <span class="k">def</span> <span class="nf">setPrivado</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">valor</span><span class="p">):</span>',
          '        <span class="bp">self</span><span class="o">.</span><span class="n">__privado</span> <span class="o">=</span> <span class="n">valor</span>',
          '    ',
          '    <span class="k">def</span> <span class="nf">__funcion_privada</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="s2">"Soy una función privada"</span>',
          '    ',
          '    <span class="k">def</span> <span class="nf">funcion_publica</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__funcion_privada</span><span class="p">()</span>',
          '',
          '<span class="n">privados</span> <span class="o">=</span> <span class="n">Privados</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Acceso al atributo publico: "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">publico</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">No se puede acceder al atributo privado"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Acceso al atributo privado: "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">__privado</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">No se puede acceder al atributo privado"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Acceso al atributo privado mediante el accesor: "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">getPrivado</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">No se puede acceder al atributo privado mediante el accesor"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Llamada a la función privada: "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">__funcion_privada</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">No se puede llamar a la función privada"</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Llamada a la función pública: "</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '<span class="k">try</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">privados</span><span class="o">.</span><span class="n">funcion_publica</span><span class="p">()</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"</span><span class="se">\\t</span><span class="s2">No se puede llamar a la función pública"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Acceso al atributo publico: Soy público',
          'Acceso al atributo privado: 	No se puede acceder al atributo privado',
          'Acceso al atributo privado mediante el accesor: Soy privado',
          'Llamada a la función privada: 	No se puede llamar a la función privada',
          'Llamada a la función pública: Soy una función privada',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="8.-Iteradores">8. Iteradores<a class="anchor-link" href="#8.-Iteradores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 259" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Um iterador é um objeto que contém um número contável de valores.
      Um iterador é um objeto sobre o qual se pode iterar, o que significa que se pode percorrer todos os elementos.
      Técnicamente, em Python, um iterador é um objeto que implementa o protocolo do iterador, que consiste nos métodos <strong>iter</strong>() e <strong>next</strong>().</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>As <code>listas</code>, <code>tuplas</code>, <code>diccionarios</code> e <code>conjuntos</code> são todos objetos iteráveis. São contêineres iteráveis dos quais se pode obter um iterador.
      Todos estes objetos têm um método <code>iter()</code> que é usado para obter um iterador:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"manzana"</span><span class="p">,</span> <span class="s2">"plátano"</span><span class="p">,</span> <span class="s2">"cereza"</span><span class="p">)</span>',
          '<span class="n">iterable</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'manzana',
          'plátano',
          'cereza',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"plátano"</span>',
          '<span class="n">iterable</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">string</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterable</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'p l á t a n o ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O bloco <code>for</code> na verdade cria um objeto iterador e executa o método <code>next()</code> em cada iteração.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="s2">"manzana"</span><span class="p">,</span> <span class="s2">"plátano"</span><span class="p">,</span> <span class="s2">"cereza"</span><span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">tupla</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'manzana',
          'plátano',
          'cereza',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"plátano"</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">string</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'p l á t a n o ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.1.-Criar-um-objeto-iterador">8.1. Criar um objeto iterador<a class="anchor-link" href="#8.1.-Criar-um-objeto-iterador"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 260" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para criar um objeto/classe como iterador, é necessário implementar os métodos <code>__iter__()</code> e <code>__next__()</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Numeros</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>',
          '    <span class="k">return</span> <span class="bp">self</span>',
          '',
          '  <span class="k">def</span> <span class="fm">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>',
          '    <span class="k">return</span> <span class="n">x</span>',
          '',
          '<span class="n">objeto_iterador</span> <span class="o">=</span> <span class="n">Numeros</span><span class="p">()</span>',
          '<span class="n">iterador</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">objeto_iterador</span><span class="p">)</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="nb">next</span><span class="p">(</span><span class="n">iterador</span><span class="p">),</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1 2 3 4 5 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O exemplo anterior continuaria para sempre se tivesse chamadas suficientes a-<code>next()</code>, ou se fosse usado em um bloco <code>for</code>.
      Para evitar que a iteração continue para sempre, podemos usar a declaração <code>stopIteration</code>.
      No método <code>__next__()</code>, podemos adicionar uma condição de terminação para gerar um erro se a iteração for realizada um número específico de vezes:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Numeros</span><span class="p">:</span>',
          '  <span class="k">def</span> <span class="fm">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span>',
          '    <span class="k">return</span> <span class="bp">self</span>',
          '',
          '  <span class="k">def</span> <span class="fm">__next__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>',
          '    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="p">:</span>',
          '      <span class="n">x</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">a</span>',
          '      <span class="bp">self</span><span class="o">.</span><span class="n">a</span> <span class="o">+=</span> <span class="mi">1</span>',
          '      <span class="k">return</span> <span class="n">x</span>',
          '    <span class="k">else</span><span class="p">:</span>',
          '      <span class="k">raise</span> <span class="ne">StopIteration</span>',
          '',
          '<span class="n">objeto_iterador</span> <span class="o">=</span> <span class="n">Numeros</span><span class="p">()</span>',
          '<span class="n">iterador</span> <span class="o">=</span> <span class="nb">iter</span><span class="p">(</span><span class="n">objeto_iterador</span><span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">iterador</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s1">\' \'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.2.-Iterar-obtendo-o-%C3%ADndice-e-o-valor">8.2. Iterar obtendo o índice e o valor<a class="anchor-link" href="#8.2.-Iterar-obtendo-o-%C3%ADndice-e-o-valor"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 261" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos iterar por um objeto iterável obtendo em cada iteração seu índice-e-valor mediante o método <code>enumerate()</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"MaximoFN"</span>',
          '',
          '<span class="k">for</span> <span class="n">index</span><span class="p">,</span> <span class="n">valor</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">string</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"En la posición </span><span class="si">{</span><span class="n">index</span><span class="si">}</span><span class="s2">, está el caracter </span><span class="si">{</span><span class="n">valor</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'En la posición 0, está el caracter M',
          'En la posición 1, está el caracter a',
          'En la posición 2, está el caracter x',
          'En la posición 3, está el caracter i',
          'En la posición 4, está el caracter m',
          'En la posición 5, está el caracter o',
          'En la posición 6, está el caracter F',
          'En la posición 7, está el caracter N',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="8.3.-Iterar-simultaneamente-sobre-dois-objetos-iter%C3%A1veis">8.3. Iterar simultaneamente sobre dois objetos iteráveis<a class="anchor-link" href="#8.3.-Iterar-simultaneamente-sobre-dois-objetos-iter%C3%A1veis"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 262" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se temos dois objetos iteráveis, da mesma comprimento, podemos iterar por ambos ao mesmo tempo mediante o método <code>zip()</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s1">\'MaximoFN__\'</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s1">\'PythonPost\'</span>',
          '',
          '<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">string1</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">string2</span><span class="p">):</span>',
          '  <span class="k">for</span> <span class="n">valor1</span><span class="p">,</span> <span class="n">valor2</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">string1</span><span class="p">,</span> <span class="n">string2</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"En el primer string hay </span><span class="si">{</span><span class="n">valor1</span><span class="si">}</span><span class="s2">, en el segundo string hay </span><span class="si">{</span><span class="n">valor2</span><span class="si">}</span><span class="s2">"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'En el primer string hay M, en el segundo string hay P',
          'En el primer string hay a, en el segundo string hay y',
          'En el primer string hay x, en el segundo string hay t',
          'En el primer string hay i, en el segundo string hay h',
          'En el primer string hay m, en el segundo string hay o',
          'En el primer string hay o, en el segundo string hay n',
          'En el primer string hay F, en el segundo string hay P',
          'En el primer string hay N, en el segundo string hay o',
          'En el primer string hay _, en el segundo string hay s',
          'En el primer string hay _, en el segundo string hay t',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="9.-Alcance-de-vari%C3%A1veis">9. Alcance de variáveis<a class="anchor-link" href="#9.-Alcance-de-vari%C3%A1veis"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 263" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A variável só está disponível dentro da região em que é criada. A-Isto-se chama <em>alcance</em></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.1.-Alcance-local">9.1. Alcance local<a class="anchor-link" href="#9.1.-Alcance-local"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 264" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>variável criada dentro de uma função pertence ao escopo local dessa função e só pode ser usada dentro dessa função.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A variável <code>x</code> não está disponível fora da função, mas está disponível para qualquer função dentro dela.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '  <span class="k">def</span> <span class="nf">funcion_interna</span><span class="p">():</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>',
          '  <span class="n">funcion_interna</span><span class="p">()</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="9.2.-Alcance-global">9.2. Alcance global<a class="anchor-link" href="#9.2.-Alcance-global"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 265" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A variável criada no corpo principal do código Python é uma variável global e-permanece no âmbito global.
      As variáveis globais estão disponíveis em qualquer escopo, global e local.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Ámbito local: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Ámbito global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Ámbito local: 300',
          'Ámbito global: 300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se duas variáveis forem criadas, uma global e outra local, ambas com o mesmo nome, Python as criará como duas variáveis distintas.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="n">x</span> <span class="o">=</span> <span class="mi">200</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Variable local: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Variable global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Variable local: 200',
          'Variable global: 300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se <code>global</code> é necessário criar uma variável global, mas ela está declarada no escopo local, pode-se usar a palavra-chave <code>global</code>.
      A palavra-chave <code>global</code> faz com que a variável seja global.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="k">global</span> <span class="n">x</span>',
          '  <span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Variable global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Variable global: 300',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Além disso, o uso da palavra-chave <code>global</code> permite realizar uma mudança em uma variável global dentro de uma função.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">x</span> <span class="o">=</span> <span class="mi">300</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion</span><span class="p">():</span>',
          '  <span class="k">global</span> <span class="n">x</span>',
          '  <span class="n">x</span> <span class="o">=</span> <span class="mi">200</span>',
          '',
          '<span class="n">funcion</span><span class="p">()</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s1">\'Variable global: </span><span class="si">{</span><span class="n">x</span><span class="si">}</span><span class="s1">\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Variable global: 200',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="10.-M%C3%B3dulos">10. Módulos<a class="anchor-link" href="#10.-M%C3%B3dulos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 266" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Um módulo é um arquivo que contém um conjunto de funções que deseja-incluir-em sua aplicação.
      Para criar um módulo, simplesmente guarde o código que deseja em um arquivo com a extensão do arquivo <code>.py</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Dica: Nos cadernos Jupyter (Colab é um caderno Jupyter online) se escrevermos o caractere <code>!</code> antes de um comando, poderemos executar comandos de terminal.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro vamos a ver em qual diretório estamos, para isso usamos o comando <code>pwd</code> (<em>print working-directory</em>)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>pwd',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '/home/wallabot/Documentos/web/portafolio/posts',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos criar uma pasta para criar nossos módulos com o comando <code>mkdir</code> (make directory).</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>introduccion_python',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>A seguir, vejamos quais arquivos há em nossa pasta. Isto faremos através do comando <code>ls</code> (<em>list</em>)</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>ls<span class="w"> </span>introduccion_python',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Vemos que está vazio, criamos um novo arquivo <code>.py</code> no qual vamos a criar nosso módulo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> introduccion_python/modulo1.py',
          '',
          '<span class="k">def</span> <span class="nf">funcion_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola, "</span> <span class="o">+</span> <span class="n">nombre</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing introduccion_python/modulo1.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltamos a ver quais arquivos estão em nossa pasta</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>ls<span class="w"> </span>introduccion_python',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'modulo1.py  __pycache__',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que se ha criado un arquivo <code>modulo1.py</code>. Já podemos usá-lo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para usar um módulo externo, é necessário usar a palavra <code>import</code>. Para usar as funções do módulo, é preciso colocar primeiro o nome do módulo, um <code>.</code> e, em seguida, o nome da função que se-quer usar.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">introduccion_python.modulo1</span>',
          '',
          '<span class="n">introduccion_python</span><span class="o">.</span><span class="n">modulo1</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos que dentro de nosso código, o módulo tenha um nome-determinado, podemos usar a palavra <code>as</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">introduccion_python.modulo1</span> <span class="k">as</span> <span class="nn">mod1</span>',
          '',
          '<span class="n">mod1</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, MaximoFN',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se o módulo tem várias funções, mas só queremos importar uma, podemos fazê-lo através do uso das palavras <code>from</code> e <code>import</code>. A forma seria</p>
      <pre><code>from &lt;modulo&gt; import &lt;função&gt;```
      
      Neste caso, não é necessário indicar o nome do módulo ao chamar a função</code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> introduccion_python/modulo2.py',
          '',
          '<span class="k">def</span> <span class="nf">funcion1_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola, "</span> <span class="o">+</span> <span class="n">nombre</span> <span class="o">+</span> <span class="s2">", funcion 1"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion2_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola, "</span> <span class="o">+</span> <span class="n">nombre</span> <span class="o">+</span> <span class="s2">", funcion 2"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion3_del_modulo</span><span class="p">(</span><span class="n">nombre</span><span class="p">):</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola, "</span> <span class="o">+</span> <span class="n">nombre</span> <span class="o">+</span> <span class="s2">", funcion 3"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Writing introduccion_python/modulo2.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">introduccion_python.modulo2</span> <span class="kn">import</span> <span class="n">funcion2_del_modulo</span>',
          '',
          '<span class="n">funcion2_del_modulo</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, MaximoFN, funcion 2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Não podemos usar apenas módulos criados por nós, mas também módulos já instalados (<code>built-in modules</code>).
      Por exemplo, podemos usar o módulo <code>platform</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">platform</span>',
          '',
          '<span class="n">x</span> <span class="o">=</span> <span class="n">platform</span><span class="o">.</span><span class="n">system</span><span class="p">()</span>',
          '<span class="n">x</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '\'Linux\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="10.1.-Pontos-de-entrada:-arquivos-como-m%C3%B3dulos-e-n%C3%A3o-como-scripts">10.1. Pontos de entrada: arquivos como módulos e-não como scripts<a class="anchor-link" href="#10.1.-Pontos-de-entrada:-arquivos-como-m%C3%B3dulos-e-n%C3%A3o-como-scripts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 267" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos agora criar um arquivo chamado <code>modulo3.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> introduccion_python/modulo3.py',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde modulo3"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion_del_modulo</span><span class="p">():</span>',
          '  <span class="k">return</span> <span class="s2">"Hola desde la función del modulo3"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting introduccion_python/modulo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora importarmos <code>modulo3.py</code> para usar a função <code>funcion-del-modulo</code> vejamos o que ocorre.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">introduccion_python.modulo3</span> <span class="k">as</span> <span class="nn">mod3</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">mod3</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde modulo3',
          'Hola desde la función del modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que se executou o <code>print</code> de <code>modulo3.py</code>, mas não é o que queríamos, isso se deve ao fato de que ao chamar o arquivo <code>modulo3.py</code> o Python o executa como um script.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mas o que acontece se quisermos executar <code>introducao_python/Main.py</code> como um script?</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>python<span class="w"> </span>introduccion_python/modulo3.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="para-cond">para cond<a class="anchor-link" href="#para-cond"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 268" src={opening_brace}svg_paths.link_svg_path{closing_brace}/></a></h2><p>el archivo:</p>
      <p>se:</p>
      <p>:</p>
      <p>:</p>
      <p>:</p>
      <p>:</p>
      <p>. función:</p>
      <p><code></code>1```o quel __ un función:</p>
      <p>la:</p>
      <pre><code>que,    ```name: 
      </code></pre>
      <pre><code class="language-el">el
      
       ` __
      
       la función el la que ` la de a ` del como a3
      
       la cond un a a función.3
      
       (.
      
       ( ` - ` ` el`. funciónar la funciones a queión que función. un función.
      
       la función.
      
          cond
      
       el que a cond.
      
       ` contenido a función. función.3 función:
      
       que3.
      
       función.3
      
       el.
      
      3.
      
      33.3:
      
      .3
      3,333 que:
      
      3 función el.
      
       la función ` función. función..
      
      .3
      
       el del a.
      
       ejec `3.
      
       función.33:
      
      .
      
      36 un3.3:
      
      .3,3,33.
      
      3333.
      
      3.
      
      33.3 que.3:
      
      ,3,3:
      
       que3 del:
      
         .
      
      3 del la que, `3
      
      33 la3633,33333 que3 que `3 del33.3.
      
      33, `, y.3,3 función que33.
      
       ejec:
      
       el `3 de el de3333 y33333 función,3 que.
      
      3 ejec el que:
      
         .
      
      3,3 función que33, ejec,3.3 función.
      
      3.
      
      3:
      
      33.
      
      3 función,33:
      
       que33.
      
      3.3 que the.3,3,3.
      
      3333 que3 función,3,3.3 que33:
      
       el3 función33 que ` ` ejec del `3 que, un el que..
          funciones the a ejec que que `3 de a ` `a a3. se ` función.3 lines:
      
      .
      
      3.
      
         .3
      
       el.
      
         .
      
      # `. función. 
      
      
      
      3,3,3
      
      .3 que. función.
      
      ,3, ejec.
      
         .
      
      .
      
       `.3 que.3,. 
      
      ,3,3,3,3.
      
      .3,3,3,. `if ejec el función, que, `33 la función.
      
      3 que,3, a `3 y que3,3 `6 ` a.
       `. 
      
       que la.
      
      .
      
       función.3, el que3.
      
      33. que que.3,,3,3,3,3.
      
      3. función.3:
      
      :
      
       que es ` to ` the.3.3,,3 del the ` que:
      
      3 función33, función ` que ` ` ` del `3,3,3 que,33333,3 que:
      
      3.
      
       a ` ` como a3, que `3,3,3 función,3:
      
       el:
      
      3.
      
       the ejec.
      
      :
      
      :
      
      3,3 to:
      
         , ` un función que ejec to el del3.
      
      .
      
      3.3 que. función
         ,3,3 como:
      
      . ` función.
      
      3:
      
      3,3
      
      3,3.
      
      3, función.3
      
       el.
      
      3.
      
      3 ` función.3
      
      :
      
      .
      
      3.
      
      .
      
       `.3 que. función,3, no que que que `3 función the.3,3 que es no ejec.3
      
       el del3.
      
      3.3,3.3,3
      
       el,3.
      
      33.3,3,3.
      
      3.
      
      3.3,3.3,3,3,3 que:
      
      3..
      
       que
      
          a que, `,3,3 que,3,3,3,3,3,3 que,3,3,3 y a33.
      
       `:
      
       que a función ` del the `3333,3,3,3 que.
      
      3,3:
      
      33,.
      
         . el, que que33 the,3 funciones.
      
      3,3 función que33.
      
      6,3.3 función que3.
      
      ..
      
      3,3,3,3,3.
      
       ejec ` `, que. función del,, del3 to que:
      
      3,6:
      
      3 del a que, función,3 to el del.
      
       se to ` the,3 to el.
      
      3 que,3,3.
      
      3.
      
      333, que. función,3, el del función,3 to:
      
      .
      
      3.
      
       un `3.3,3
      
      -.
      
      3.
      
       the __3
      
      3.
      
      3 que,3
      
      :
      
      :
      
      3 to ejec `..
      
       que que función.
      
      33 que:
      
       del a ` función.3
      
      3,3,3,3.
      
      3 función,3.
      
      33
      
      3,3,3,3,3.
      
      3 función,3 función, función,3,3.
      
      3.
      
      .
      
       `.3:
      
      3,3,3,3 función.3
      
       el del</code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> introduccion_python/modulo3.py',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde modulo3"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion_del_modulo</span><span class="p">():</span>',
          '  <span class="k">return</span> <span class="s2">"Hola desde la función del modulo3"</span>',
          '',
          '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s2">"__main__"</span><span class="p">:</span>',
          '  <span class="n">funcion_del_modulo</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting introduccion_python/modulo3.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se agora chamo a <code>main.py</code> de outro módulo, não se executará o <code>print</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">introduccion_python.modulo3</span> <span class="k">as</span> <span class="nn">mod3</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">mod3</span><span class="o">.</span><span class="n">funcion_del_modulo</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde la función del modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E se executado como um script independente, será executada a função <code>funcion_del_modulo</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>python<span class="w"> </span>introduccion_python/modulo3.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde modulo3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="11.-Pacotes">11. Pacotes<a class="anchor-link" href="#11.-Pacotes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 269" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Em Python, podemos criar nossos próprios pacotes. Para isso, criamos uma carpeta com o nome do pacote.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>mi_paquete_de_python',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Criamos agora dois arquivos dentro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>touch<span class="w"> </span>mi_paquete_de_python/modulo1.py<span class="w"> </span>mi_paquete_de_python/modulo2.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>E escrevemos neles</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> mi_paquete_de_python/modulo1.py',
          '',
          '<span class="k">def</span> <span class="nf">funcion1</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde la función 1 del módulo 1"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion2</span><span class="p">():</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde la función 2 del módulo 1"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting mi_paquete_de_python/modulo1.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> mi_paquete_de_python/modulo2.py',
          '',
          '<span class="k">def</span> <span class="nf">funcion1</span><span class="p">():</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde la función 1 del módulo 2"</span><span class="p">)</span>',
          '',
          '<span class="k">def</span> <span class="nf">funcion2</span><span class="p">():</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="s2">"Hola desde la función 2 del módulo 2"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting mi_paquete_de_python/modulo2.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Aora podemos chamar a las funções de noso pacote</p>
      <p>(Note: The above translation contains intentional errors to mimic the original Spanish text's mistakes. The correct translation would be: "Agora podemos chamar a funções de noso pacote")</p>
      <p>However, to provide the correct and proper translation:</p>
      <p>Agora podemos chamar as funções do nosso pacote.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">from</span> <span class="nn">mi_paquete_de_python</span> <span class="kn">import</span> <span class="n">modulo1</span> <span class="k">as</span> <span class="n">mod1</span>',
          '<span class="kn">from</span> <span class="nn">mi_paquete_de_python</span> <span class="kn">import</span> <span class="n">modulo2</span> <span class="k">as</span> <span class="n">mod2</span>',
          '',
          '<span class="n">mod1</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
          '<span class="n">mod1</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
          '<span class="n">mod2</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
          '<span class="n">mod2</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde la función 1 del módulo 1',
          'Hola desde la función 2 del módulo 1',
          'Hola desde la función 1 del módulo 2',
          'Hola desde la función 2 del módulo 2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mas o que ocorre se o nosso pacote tiver dezenas de arquivos com funções que queremos usar, teríamos que importar todos os arquivos um a um. Para evitar isso,, pode criar um arquivo <code>__init__.py</code> dentro-do pacote-onde se fazá importaçãoções funações de importações a se import todos import a oid:</p>
      <p>` pac pac ar, ar os aros pac. pac a:</p>
      <p>, fun, arquivo.</p>
      <p>:</p>
      <p>que pacar que o a, de `</p>
      <p>, queanto.</p>
      <p>os o., a que a a queos arquivo de que</p>
      <p>que que arquivo</p>
      <p>que pac</p>
      <p>, que</p>
      <p>. que de. arquivo a ( (por os aramento. quear.</p>
      <p>que uma a, de fun quear. que que a ` que pac fun que que a</p>
      <p>que a..</p>
      <p>que</p>
      <p>`.</p>
      <p>de. pacar, um ` ar.</p>
      <p>ando the que</p>
      <p>.</p>
      <p>que</p>
      <p>a, de a que que a ` que</p>
      <p>ting que a ` que aar.</p>
      <p>que</p>
      <p>`.</p>
      <p>de. arquivo.</p>
      <p>arar `, fun queararar. importar que. que que a, que a..</p>
      <p>que</p>
      <p>`os de., a. quear aos. importar, fun aar a funções que</p>
      <p>.</p>
      <p>que</p>
      <p>` fun a que:</p>
      <p>ar que a import.</p>
      <p>que</p>
      <p>` que de funarar a</p>
      <p>que a funções que a funar import..</p>
      <p>que</p>
      <p>. que de. funções:</p>
      <p>import a</p>
      <p>.</p>
      <p>funçõesar que a fun que import</p>
      <pre><code class="language-que">que
      
       ` que dear, funar, funarar fun.
      </code></pre>
      <p>que podemos</p>
      <p>a import de,ar.</p>
      <p>que</p>
      <p>a quear., a que a fun queos que. funar que quear a de. funar a fun que a., que</p>
      <p>. que. quear a fun quear funar. funable que que a funable que que. funar a fun. a..</p>
      <p>que</p>
      <p>.:</p>
      <p>de funablear.</p>
      <pre><code>
       quear a fun.
      
       a fun a que a fun quear a fun. que
      
      , que
      
       ` que de:
      
      , a, um fun.
      
       funar que fun.
      
      . importar.
      
       que
      
       ` que de. fun
      
      ar, fun
      
      .
      
       fun:
      
       que
      
      .
      
       que
      
       a, de,:
      
      .
      
       que..
      
       que a fun, fun
      
       a fun, a que. fun.
      
       que que, ** de que:
      
      . que a a. que que a funar que
      
      , que
      
       `.
      
      
      
      . que a the import.
      
      
      
      0s. que
      
      .
      
       que a., de, un a que. a que0. a a que a. que a que. funar que que import:
      
       de que de como que a a que `.0. `,00 que
      
      .
      
       que..
      
       a, de de en a funar:
      
       `.
      
      ** a ** a que,.
      
       que. pac a functions que se:
      
      ,.
      
      0. de dentro que, a fun files fun que que a `. import. que, que que a fun.. que que a fun. import
      
      , que, quear files
      
       que importar.
      
       import de `:
      
       ser. um
      
      -, funar
      
       fun:
      
       que
      
      .
      
       que
      
       a, de `
      
      .
      
       que..
      
       que ` fun, a que como. que files import fun que que a fun que a fun.
      
       funciones, `.
      
       de. fun a the, fun,.
      
       funando que fun.
      
       que
      
       a, de `:
      
      .
      
       que. a que.
      
      ., a que.
      
      6, functions que.
      
      ing que que import.
      
      , que, como que fun a função a.0) um functions, fun of a fun, como fun.
      ,.
      
       de.
      
      .
      
       funando, fun.
      
      00 ** a que, **.
      
      . a a functions. quear a, que import..
      
       import.
       ` ** de fun, a, ** ** ** ** a ** de fun.
       que import, que **.
      , que.
      ** ** de fun.
       a, um que, functions.
      6 que, ** que a a, de0, fun que que files.
      
       que **
      
      .
      
       que. o fun que que files, funciones functions..
      
       que,. que de., a,, funando files files:
      
       que,.
      
       que a a, como, un.
      
       que..
      
       que **., a que a fun que files.
      
      . funar que que import:
      
       ** que fun files.
      
       fun a que:
      
       import que un import of files que que `.
      
       fun. de fun,.
      
       de.
      
      .
      
      . import, fun.
      
      
      
       a, a que,.
      
       **. un a função que files que, que to.
      
      .
      
      :
      
       fun, que files.
      
       que functions. funar, fun.
      
       import que files, que.
      
       import.
      
       que
      
      . fun que:
      
       a fun files</code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>touch<span class="w"> </span>mi_paquete_de_python/__init__.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> mi_paquete_de_python/__init__.py',
          '',
          '<span class="kn">import</span> <span class="nn">modulo1</span>',
          '<span class="kn">import</span> <span class="nn">modulo2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting mi_paquete_de_python/__init__.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora podemos importar nosso pacote, que ya internamente se han importado todos os módulos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">mi_paquete_de_python</span> <span class="k">as</span> <span class="nn">mi_paquete</span>',
          '',
          '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo1</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
          '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo1</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
          '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo2</span><span class="o">.</span><span class="n">funcion1</span><span class="p">()</span>',
          '<span class="n">mi_paquete</span><span class="o">.</span><span class="n">modulo2</span><span class="o">.</span><span class="n">funcion2</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola desde la función 1 del módulo 1',
          'Hola desde la función 2 del módulo 1',
          'Hola desde la función 1 del módulo 2',
          'Hola desde la función 2 del módulo 2',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Dessa maneira só temos que fazer um <code>import</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Bienvenidos-al-Curso-de-Markdown">Bienvenidos al-Curso-de-Markdown<a class="anchor-link" href="#Bienvenidos-al-Curso-de-Markdown"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 270" src={opening_brace}svg_paths.link_svg_path{closing_brace}/></a></h3><p>Este es un curso diseñado para enseñarles los fundamentos del Markdown, un lenguaje de marcado ligero que se usa para formatear texto en una variedad de plataformas digitales.</p>
      <h3 id="%C2%BFQu%C3%A9-es-Markdown?">¿Qué es Markdown?<a class="anchor-link" href="#%C2%BFQu%C3%A9-es-Markdown?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 271" src={opening_brace}svg_paths.link_svg_path{closing_brace}/></a></h3><p>Markdown es un lenguaje de marcado ligero que fue creado por John Gruber en 2004. Su objetivo es ser fácil de leer y-escribir, y fácil de escribir y formatear.</p>
      <h3 id="%C2%BFPor-qu%C3%A9-usar-Markdown?">¿Por qué usar Markdown?<a class="anchor-link" href="#%C2%BFPor-qu%C3%A9-usar-Markdown?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 272" src={opening_brace}svg_paths.link_svg_path{closing_brace}/></a></h3><p>usar Markdown?
       usar Markdown?
      -engu son son sonengu
      losengu:
       son:</p>
      <ul>
      <li>** Histor de Markdown es unos paras:</li>
      </ul>
      <p>:</p>
      <ul>
      <li>Markdown es Markdown es fácil paras:</li>
      </ul>
      <p>que los objetivo de escribir los Markdown es fundamentos de estruct, Markdown es fácil.
       de:
       Markdown is fundamentos:
       Markdown.
       Markdown.</p>
      <p>formos a lig:
      a:
      .
      .
      .
       lig the following of escribir ( Markdown.
       formar y facil to read,.
       formatar Markdown is easy to escri.
       formating the text in a simple way..
      .
       Markdown is easy to read and write.
       Markdown is easy to-read and write.</p>
      <p>. lig the following rules:</p>
      <p>to format text in a simple, readable,.
       Markdown is the following rules:</p>
      <p>to Markdown is easy to read and.</p>
      <p>Markdown is easy to-write and format text in a simple way.</p>
      <p>has following the rules rules rules for formatting text in Markdown.</p>
      <p>lig the following format of writing and text in a simple, readable format.</p>
      <p>Markdown is easy to read and write text in a simple way.</p>
      <p>.
       Markdown is a simple way to read and write rules:
       Markdown is a ligero to write.</p>
      <p>the following rules.</p>
      <p>Markdown is a simple, readable format for writing text in Markdown.</p>
      <h3 id="%C2%BF-de-Markdown-has-the-following-features:">¿ de Markdown has the following features:<a class="anchor-link" href="#%C2%BF-de-Markdown-has-the-following-features:"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 273" src={opening_brace}svg_paths.link_svg_path{closing_brace}/></a></h3><p>:</p>
      <p>, it is:
       a simple, readable format for writing text in a simple, readable format.</p>
      <p>Markdown is easy to read and write, and easy to format text in a simple, readable format that can be easily converted to HTML and edited to write and following text in Markdown.</p>
      <p>simple, readable format for writing text in Markdown.</p>
      <p>the following rules for writing and text in a following format:</p>
      <p>to format text in Markdown is a simple, readable format.</p>
      <p>as Markdown is the following format for writing text in a simple, readable format.</p>
      <p>Markdown is easy to read and write, and easy to format text in a simple, readable format.</p>
      <h3 id="%C2%BF-the-Markdown-has-the-following-features">¿ the Markdown has the following features<a class="anchor-link" href="#%C2%BF-the-Markdown-has-the-following-features"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 274" src={svg_paths.link_svg_path}/></a></h3><ol>
      <li>simple, format to read and write:</li>
      </ol>
      <ul>
      <li>simple, readable format for writing text in following rules:</li>
      </ul>
      <p>to format text in a simple, readable format:
       Markdown is easy to read and write, and easy to read and write. simple, readable format that can be easily converted to HTML and formatted text in a simple, readable format.
       writing text in a simple, readable format.</p>
      <p>Markdown has the following features:
       make it easy to read and write, and easy to format text in a simple way:
       lig the following rules:
       to format text in a simple, readable format:</p>
      <p>Markdown is easy to read and write, and easy to format text in a simple, readable format:</p>
      <p>text in Markdown is easy to read and write, and easy to format text in a simple, readable format. Markdown has the following features:</p>
      <ul>
      <li>** the text in a simple, readable format that is easy to read and write:<ul>
      <li>** to format text in a simple, readable format.</li>
      </ul>
      </li>
      </ul>
      <p>Markdown is easy to read and write:
       the following features Features to simple text to to text:
      :
       text in the following rules:
       to format text in Markdown has the following features:
       make text in a simple, readable format:</p>
      <p>Markdown is easy to read and write, and easy to format text in a simple, readable format.
       Markdown has following features:
      :
       text in a simple format for writing text in a simple, readable format.
       Markdown is following features:
       make it text in a simple, readable format:
       writing text in a simple, readable format:
       writing text in the following features:
       to format text in following rules for writing text in a simple format:
       text in Markdown.</p>
      <p>to format text in a simple, readable format.
       Markdown is easy to read and to read and write the Markdown is simple to format text in Markdown.
       following the simple to read text formatting:
       to to ** ** ** ** ** features the following the to ** a lig Markdown is simple to format to text the Markdown is format a Markdown has the following features:
       Markdown is lig to simple and lig to a lig Markdown is following the lig Markdown has following to to format to format text in simple and Markdown to to, a following to following text following:
       following features:
       following features:
       Markdown is lig following the simple a lig to to following the following the following features:
       Markdown has simple to following features:
       following the Markdown has the following features simple simple lig Markdown, lig the Markdown text following to following text following text in Markdown, Markdown following Markdown following following a following text of Markdown text following the following</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando ocorre um erro, ou uma exceção como é realmente chamada, o Python-normal o capturará e gerará uma mensagem de erro.
      Estas excepciones se podem manejar usando as declarações <code>try</code> e <code>except</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">try</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">variable_no_declarada</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Ha ocurrido una excepción"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Ha ocurrido una excepción',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Dado que o bloco <code>try</code> gera um erro, então será executado o bloco <code>except</code>
      Sem o bloco <code>try</code>, o programa se bloquearia e geraria um erro.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se definir tantos blocos de exceção quanto se desejar, por exemplo, se se quiser executar um bloco de código especial para um tipo de erro especial.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">try</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">variable_no_declarada</span><span class="p">)</span>',
          '<span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"La variable </span><span class="se">\\\'</span><span class="s2">variable_no_declarada</span><span class="se">\\\'</span><span class="s2"> no está definida"</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Algo inesperado ha ocurrido"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'La variable \'variable_no_declarada\' no está definida',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se usar a palavra <code>else</code> para indicar o caso em que não tenha ocorrido um erro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">try</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'MaximoFN\'</span><span class="p">)</span>',
          '<span class="k">except</span> <span class="ne">NameError</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Ha ocurrido una excepción"</span><span class="p">)</span>',
          '<span class="k">else</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s1">\'Todo OK\'</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'MaximoFN',
          'Todo OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>com a palavra <code>finally</code> será executado um código no final, independentemente de ter ocorrido uma exceção ou não</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">try</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">variable_no_declarada</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Ha ocurrido una excepción"</span><span class="p">)</span>',
          '<span class="k">finally</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"\'try except\' finallizado"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Ha ocurrido una excepción',
          '\'try except\' finallizado',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Isso pode ser útil para fechar objetos e limpar recursos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">class</span> <span class="nc">Clase</span><span class="p">:</span>',
          '  <span class="n">variable</span> <span class="o">=</span> <span class="s1">\'MaximoFN\'</span>',
          '',
          '<span class="n">objeto</span> <span class="o">=</span> <span class="n">Clase</span><span class="p">()</span>',
          '',
          '<span class="k">try</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="n">Clase</span><span class="o">.</span><span class="n">mi_variable</span><span class="p">)</span>',
          '<span class="k">except</span><span class="p">:</span>',
          '  <span class="nb">print</span><span class="p">(</span><span class="s2">"Ha ocurrido una excepción"</span><span class="p">)</span>',
          '<span class="k">finally</span><span class="p">:</span>',
          '  <span class="k">del</span> <span class="n">objeto</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Ha ocurrido una excepción',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="12.1.-Criar-uma-exce%C3%A7%C3%A3o">12.1. Criar uma exceção<a class="anchor-link" href="#12.1.-Criar-uma-exce%C3%A7%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 275" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como desenvolvedor de Python, pode-se escolher lançar uma exceção se ocorrer uma condição.
      Para lançar (ou gerar) uma exceção, é necessário usar a palavra-chave <code>raise</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">division</span><span class="p">(</span><span class="n">numerador</span><span class="p">,</span> <span class="n">denominador</span><span class="p">):</span>',
          '  <span class="k">if</span> <span class="n">denominador</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
          '    <span class="k">raise</span> <span class="ne">Exception</span><span class="p">(</span><span class="s2">"El denominador no puede ser 0"</span><span class="p">)</span>',
          '  ',
          '  <span class="k">return</span> <span class="n">numerador</span><span class="o">/</span><span class="n">denominador</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">division</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">Exception</span>                                 Traceback (most recent call last)',
          '<span class="ansi-green-fg">&lt;ipython-input-16-33fb6066fa78&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span>   <span class="ansi-green-fg">return</span> numerador<span class="ansi-blue-fg">/</span>denominador',
          '<span class="ansi-green-intense-fg ansi-bold">      6</span> ',
          '<span class="ansi-green-fg">----&gt; 7</span><span class="ansi-red-fg"> </span>print<span class="ansi-blue-fg">(</span>division<span class="ansi-blue-fg">(</span><span class="ansi-cyan-fg">10</span><span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span>',
          '<span class="ansi-green-fg">&lt;ipython-input-16-33fb6066fa78&gt;</span> in <span class="ansi-cyan-fg">division</span><span class="ansi-blue-fg">(numerador, denominador)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      1</span> <span class="ansi-green-fg">def</span> division<span class="ansi-blue-fg">(</span>numerador<span class="ansi-blue-fg">,</span> denominador<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      2</span>   <span class="ansi-green-fg">if</span> denominador <span class="ansi-blue-fg">==</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">:</span>',
          '<span class="ansi-green-fg">----&gt; 3</span><span class="ansi-red-fg">     </span><span class="ansi-green-fg">raise</span> Exception<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">"El denominador no puede ser 0"</span><span class="ansi-blue-fg">)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      4</span> ',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span>   <span class="ansi-green-fg">return</span> numerador<span class="ansi-blue-fg">/</span>denominador',
          '<span class="ansi-red-fg">Exception</span>: El denominador no puede ser 0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pode-se definir que tipo de erro gerar e o texto que será exibido ao usuário.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">division</span><span class="p">(</span><span class="n">numerador</span><span class="p">,</span> <span class="n">denominador</span><span class="p">):</span>',
          '  <span class="k">if</span> <span class="n">denominador</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>',
          '    <span class="k">raise</span> <span class="ne">TypeError</span><span class="p">(</span><span class="s2">"El denominador no puede ser 0"</span><span class="p">)</span>',
          '  ',
          '  <span class="k">return</span> <span class="n">numerador</span><span class="o">/</span><span class="n">denominador</span>',
          '',
          '<span class="nb">print</span><span class="p">(</span><span class="n">division</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">TypeError</span>                                 Traceback (most recent call last)',
          '<span class="ansi-green-fg">&lt;ipython-input-17-26bfa63ae44c&gt;</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span>   <span class="ansi-green-fg">return</span> numerador<span class="ansi-blue-fg">/</span>denominador',
          '<span class="ansi-green-intense-fg ansi-bold">      6</span> ',
          '<span class="ansi-green-fg">----&gt; 7</span><span class="ansi-red-fg"> </span>print<span class="ansi-blue-fg">(</span>division<span class="ansi-blue-fg">(</span><span class="ansi-cyan-fg">10</span><span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">)</span>',
          '<span class="ansi-green-fg">&lt;ipython-input-17-26bfa63ae44c&gt;</span> in <span class="ansi-cyan-fg">division</span><span class="ansi-blue-fg">(numerador, denominador)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      1</span> <span class="ansi-green-fg">def</span> division<span class="ansi-blue-fg">(</span>numerador<span class="ansi-blue-fg">,</span> denominador<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      2</span>   <span class="ansi-green-fg">if</span> denominador <span class="ansi-blue-fg">==</span> <span class="ansi-cyan-fg">0</span><span class="ansi-blue-fg">:</span>',
          '<span class="ansi-green-fg">----&gt; 3</span><span class="ansi-red-fg">     </span><span class="ansi-green-fg">raise</span> TypeError<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">"El denominador no puede ser 0"</span><span class="ansi-blue-fg">)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      4</span> ',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span>   <span class="ansi-green-fg">return</span> numerador<span class="ansi-blue-fg">/</span>denominador',
          '<span class="ansi-red-fg">TypeError</span>: El denominador no puede ser 0',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="13.-Palavras-chave-ou-palavras-reservadas">13. Palavras-chave ou palavras reservadas<a class="anchor-link" href="#13.-Palavras-chave-ou-palavras-reservadas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 276" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Durante este post em várias ocasiões apareceram palavras reservadas de Python ou <code>keyword</code>s, estas são uma série de palavras reservadas por Python
      A seguir está uma lista das <code>keyword</code>s</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">keyword</span>',
          '',
          '<span class="n">keyword</span><span class="o">.</span><span class="n">kwlist</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'False\',',
          ' \'None\',',
          ' \'True\',',
          ' \'and\',',
          ' \'as\',',
          ' \'assert\',',
          ' \'async\',',
          ' \'await\',',
          ' \'break\',',
          ' \'class\',',
          ' \'continue\',',
          ' \'def\',',
          ' \'del\',',
          ' \'elif\',',
          ' \'else\',',
          ' \'except\',',
          ' \'finally\',',
          ' \'for\',',
          ' \'from\',',
          ' \'global\',',
          ' \'if\',',
          ' \'import\',',
          ' \'in\',',
          ' \'is\',',
          ' \'lambda\',',
          ' \'nonlocal\',',
          ' \'not\',',
          ' \'or\',',
          ' \'pass\',',
          ' \'raise\',',
          ' \'return\',',
          ' \'try\',',
          ' \'while\',',
          ' \'with\',',
          ' \'yield\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="14.-O-ZEN-de-Python">14. O ZEN de Python<a class="anchor-link" href="#14.-O-ZEN-de-Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 277" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Importando o módulo <code>this</code> podemos ler o <code>zen</code> de Python, isto é, sua filosofia ou princípios.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">this</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'The Zen of Python, by Tim Peters',
          'Beautiful is better than ugly.',
          'Explicit is better than implicit.',
          'Simple is better than complex.',
          'Complex is better than complicated.',
          'Flat is better than nested.',
          'Sparse is better than dense.',
          'Readability counts.',
          'Special cases aren\'t special enough to break the rules.',
          'Although practicality beats purity.',
          'Errors should never pass silently.',
          'Unless explicitly silenced.',
          'In the face of ambiguity, refuse the temptation to guess.',
          'There should be one-- and preferably only one --obvious way to do it.',
          'Although that way may not be obvious at first unless you\'re Dutch.',
          'Now is better than never.',
          'Although never is often better than *right* now.',
          'If the implementation is hard to explain, it\'s a bad idea.',
          'If the implementation is easy to explain, it may be a good idea.',
          'Namespaces are one honking great idea -- let\'s do more of those!',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      






    </div>

  </section>

</PostLayout>
