---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Expressões regulares';
const end_url = 'regular-expressions';
const description = 'Explora o poder e a precisão das expressões regulares, ferramentas essenciais na programação que permitem descrever padrões em cadeias de caracteres para pesquisa, extração e manipulação eficientes. Esta postagem revela os fundamentos das técnicas avançadas de regex, oferecendo um guia prático com exemplos claros para dominar seu uso na análise e no gerenciamento de dados. Prepare-se para transformar sua abordagem ao processamento de texto, abrindo novas possibilidades em seus projetos de desenvolvimento.';
const keywords = 'python, regex, expressões regulares, programação, análise de dados, processamento de texto, gerenciamento de dados';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/regular-expresions.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1280
    image_height=720
    image_extension=webp
    article_date=2024-02-10+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#M%C3%A9todos"><h2>Métodos</h2></a>
      <a class="anchor-link" href="#Localizar"><h3>Localizar</h3></a>
      <a class="anchor-link" href="#Pesquisa"><h3>Pesquisa</h3></a>
      <a class="anchor-link" href="#Correspond%C3%AAncia"><h3>Correspondência</h3></a>
      <a class="anchor-link" href="#Span"><h3>Span</h3></a>
      <a class="anchor-link" href="#Grupo"><h3>Grupo</h3></a>
      <a class="anchor-link" href="#Separa%C3%A7%C3%A3o"><h3>Separação</h3></a>
      <a class="anchor-link" href="#Sub"><h3>Sub</h3></a>
      <a class="anchor-link" href="#Padr%C3%B5es"><h2>Padrões</h2></a>
      <a class="anchor-link" href="#O-caractere-."><h3>O caractere <code>.</code></h3></a>
      <a class="anchor-link" href="#As-classes-predefinidas-e-constru%C3%ADdas"><h3>As classes predefinidas e construídas</h3></a>
      <a class="anchor-link" href="#D%C3%ADgito"><h4>Dígito</h4></a>
      <a class="anchor-link" href="#Carta"><h4>Carta</h4></a>
      <a class="anchor-link" href="#Espa%C3%A7os"><h4>Espaços</h4></a>
      <a class="anchor-link" href="#Ranks"><h4>Ranks</h4></a>
      <a class="anchor-link" href="#Colchete-%5B-e-colchete-%5D"><h4>Colchete <code>[</code> e colchete <code>]</code></h4></a>
      <a class="anchor-link" href="#Os-delimitadores-+,-*,-?,-%60?"><h3>Os delimitadores <code>+</code>, <code>*</code>, <code>?</code>, `?</h3></a>
      <a class="anchor-link" href="#Star-*-(nenhum-ou-todos)"><h4>Star <code>*</code> (nenhum ou todos)</h4></a>
      <a class="anchor-link" href="#Plus-+-(um-ou-mais)"><h4>Plus <code>+</code> (um ou mais)</h4></a>
      <a class="anchor-link" href="#Opcional-?-(zero-ou-um)"><h4>Opcional <code>?</code> (zero ou um)</h4></a>
      <a class="anchor-link" href="#Contadores"><h3>Contadores</h3></a>
      <a class="anchor-link" href="#Classes"><h3>Classes</h3></a>
      <a class="anchor-link" href="#O-delimitador-?-como-um-delimitador-r%C3%A1pido"><h3>O delimitador <code>?</code> como um delimitador rápido</h3></a>
      <a class="anchor-link" href="#O-negador"><h3>O negador</h3></a>
      <a class="anchor-link" href="#O-in%C3%ADcio-%5E-e-o-final-da-linha-$."><h3>O início <code>^</code> e o final da linha <code>$</code>.</h3></a>
      <a class="anchor-link" href="#Exemplos-pr%C3%A1ticos"><h2>Exemplos práticos</h2></a>
      <a class="anchor-link" href="#Registros"><h3>Registros</h3></a>
      <a class="anchor-link" href="#N%C3%BAmero-de-telefone"><h3>Número de telefone</h3></a>
      <a class="anchor-link" href="#URLs"><h3>URLs</h3></a>
      <a class="anchor-link" href="#E-mails"><h3>E-mails</h3></a>
      <a class="anchor-link" href="#Localiza%C3%A7%C3%B5es"><h3>Localizações</h3></a>
      <a class="anchor-link" href="#Nomes"><h3>Nomes</h3></a>
      <a class="anchor-link" href="#Pesquisar-e-substituir"><h2>Pesquisar e substituir</h2></a>
      <a class="anchor-link" href="#Folha-de-dicas"><h2>Folha de dicas</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Express%C3%B5es-regulares">Expressões regulares<a class="anchor-link" href="#Express%C3%B5es-regulares"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 70" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">re</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Este caderno foi traduzido automaticamente para torná-lo acessível a mais pessoas, por favor me avise se você vir algum erro de digitação..</p>
      <h2 id="M%C3%A9todos">Métodos<a class="anchor-link" href="#M%C3%A9todos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 71" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Localizar">Localizar<a class="anchor-link" href="#Localizar"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 72" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o método <code>findall()</code>, podemos encontrar todas as correspondências de um padrão em uma string.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">re</span>',
          '</span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"Hola, soy"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Hola, soy\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Pesquisa">Pesquisa<a class="anchor-link" href="#Pesquisa"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 73" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Mas se quisermos encontrar a posição em que um padrão está localizado, podemos usar o método <code>search()</code> para procurar um padrão em uma string. Esse método retorna um objeto Match se encontrar uma correspondência, caso contrário, retorna None.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">"soy"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;re.Match object; span=(6, 9), match=\'soy\'&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Correspond%C3%AAncia">Correspondência<a class="anchor-link" href="#Correspond%C3%AAncia"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 74" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Também podemos usar o método <code>match()</code> que procura o padrão <strong>no início</strong> da string.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">"soy"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;re.Match object; span=(0, 4), match=\'Hola\'&gt;',
          'None',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Span">Span<a class="anchor-link" href="#Span"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 75" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos obter a posição da correspondência, podemos usar o método <code>span()</code> que retorna uma tupla com a posição inicial e final da correspondência.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span><span class="o">.</span><span class="n">span</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(0, 4)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Grupo">Grupo<a class="anchor-link" href="#Grupo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 76" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Sabendo a posição da correspondência, podemos usar o método <code>group()</code> para obter a substring que corresponde ao padrão.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Também poderíamos usar o início e o fim da correspondência para criar uma fatia da cadeia de caracteres.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span><span class="o">.</span><span class="n">span</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">end</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Separa%C3%A7%C3%A3o">Separação<a class="anchor-link" href="#Separa%C3%A7%C3%A3o"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 77" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o método <code>split()</code>, podemos dividir uma string em uma lista de substrings usando um padrão como separador.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">split</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"soy"</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">split</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Hola, \', \' un string\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A frase foi dividida em duas cadeias de caracteres usando "I am" como separador.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Sub">Sub<a class="anchor-link" href="#Sub"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 78" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o método <code>sub()</code>, podemos substituir todas as correspondências de um padrão por outra substring.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">sub</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">"soy"</span><span class="p">,</span> <span class="s2">"eres"</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">sub</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, eres un string',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ele substituiu todas as correspondências de "I am" por "you are".</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Padr%C3%B5es">Padrões<a class="anchor-link" href="#Padr%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 79" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="O-caractere-.">O caractere <code>.</code><a class="anchor-link" href="#O-caractere-."><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 80" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o caractere <code>.</code>, podemos pesquisar qualquer caractere; qualquer caractere em nossa string será encontrado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"."</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'H\', \'o\', \'l\', \'a\', \',\', \' \', \'s\', \'o\', \'y\', \' \', \'u\', \'n\', \' \', \'s\', \'t\', \'r\', \'i\', \'n\', \'g\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se, por exemplo, quisermos sequências de dois caracteres, faremos a busca com dois <code>.</code>s em uma linha.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"Hola, soy un string"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"Hola, soy un string2"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">".."</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">".."</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Ho\', \'la\', \', \', \'so\', \'y \', \'un\', \' s\', \'tr\', \'in\']',
          '[\'Ho\', \'la\', \', \', \'so\', \'y \', \'un\', \' s\', \'tr\', \'in\', \'g2\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, <code>string1</code> tem um número ímpar de caracteres, de modo que o último <code>g</code> não é usado, mas <code>string2</code> tem um número par de caracteres, de modo que todos os caracteres são usados.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos analisar isso de outra forma: vamos alterar cada sequência de três caracteres para um símbolo <code>$</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string1</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">"..."</span><span class="p">,</span> <span class="s2">"$  "</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, soy un string',
          '$  $  $  $  $  $  g',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Imprimi dois espaços após cada <code>$</code> para que você possa ver a alteração, e você pode ver como o último caractere não o converte.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="As-classes-predefinidas-e-constru%C3%ADdas">As classes predefinidas e construídas<a class="anchor-link" href="#As-classes-predefinidas-e-constru%C3%ADdas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 81" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="D%C3%ADgito">Dígito<a class="anchor-link" href="#D%C3%ADgito"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 82" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos encontrar os dígitos, precisaremos usar <code>d</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'1\', \'2\', \'3\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como antes, se, por exemplo, quisermos dois dígitos, colocamos <code>d</code> duas vezes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d\d"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'12\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Carta">Carta<a class="anchor-link" href="#Carta"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 83" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos encontrar letras, precisamos usar <code>w</code>. Palavra significa todas as letras de <code>a</code> a <code>z</code>, de <code>A</code> a <code>Z</code>, números de <code>0</code> a <code>9</code> e o <code>_</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un_string con, 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\w"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'H\', \'o\', \'l\', \'a\', \'s\', \'o\', \'y\', \'u\', \'n\', \'_\', \'s\', \'t\', \'r\', \'i\', \'n\', \'g\', \'c\', \'o\', \'n\', \'1\', \'2\', \'3\', \'d\', \'i\', \'g\', \'i\', \'t\', \'o\', \'s\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, ele usa tudo, exceto os espaços e a vírgula.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Espa%C3%A7os">Espaços<a class="anchor-link" href="#Espa%C3%A7os"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 84" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos encontrar espaços, precisamos de "espaços".</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un_string con, 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">"\s"</span><span class="p">,</span> <span class="s2">"*"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola,*soy*un_string*con,*123*digitos',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>As expressões regulares tratam as quebras de linha como espaços.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"""Hola, soy un string </span>',
          '<span class="s2">con un salto de línea"""</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">"\s"</span><span class="p">,</span> <span class="s2">"*"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola,*soy*un*string**con*un*salto*de*línea',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Ranks">Ranks<a class="anchor-link" href="#Ranks"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 85" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos pesquisar um intervalo, usaremos <code>[]</code>, por exemplo, se quisermos os números de 4 a 8, usaremos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"1234567890"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[4-8]"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'4\', \'5\', \'6\', \'7\', \'8\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ampliar o intervalo de pesquisa</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"1234567890"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[2-57-9]"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'2\', \'3\', \'4\', \'5\', \'7\', \'8\', \'9\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se também quisermos encontrar um caractere específico, colocaremos o caractere seguido de ``.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"1234567890."</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[2-57-9\.]"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'2\', \'3\', \'4\', \'5\', \'7\', \'8\', \'9\', \'.\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Colchete-%5B-e-colchete-%5D">Colchete <code>[</code> e colchete <code>]</code><a class="anchor-link" href="#Colchete-%5B-e-colchete-%5D"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 86" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como vimos, se quisermos encontrar intervalos, usamos <code>[]</code>, mas e se quisermos encontrar apenas o <code>[</code> ou o <code>]</code>? Para isso, temos que usar <code>[]</code> e <code>[</code>]`.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"[1234567890]"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\["</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\]"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'[\']',
          '[\']\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Os-delimitadores-+,-*,-?,-%60?">Os delimitadores <code>+</code>, <code>*</code>, <code>?</code>, `?<a class="anchor-link" href="#Os-delimitadores-+,-*,-?,-%60?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 87" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Star-*-(nenhum-ou-todos)">Star <code>*</code> (nenhum ou todos)<a class="anchor-link" href="#Star-*-(nenhum-ou-todos)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 88" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O delimitador <code>*</code> indica que você deseja pesquisar nenhum ou todos eles, e não um a um como antes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 12 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d*"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'1\', \'2\', \'1\', \'2\', \'3\']',
          '[\'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'12\', \'\', \'123\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como você pode ver, colocar o <code>*</code> encontrou todas as posições em que há zero caracteres ou todos os caracteres.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Plus-+-(um-ou-mais)">Plus <code>+</code> (um ou mais)<a class="anchor-link" href="#Plus-+-(um-ou-mais)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 89" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com o delimitador <code>+</code>, você indica que deseja pesquisar um ou mais</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'1\', \'12\', \'123\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Opcional-?-(zero-ou-um)">Opcional <code>?</code> (zero ou um)<a class="anchor-link" href="#Opcional-?-(zero-ou-um)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 90" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O delimitador <code>?</code> indica que você deseja pesquisar zero ou um.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">"\d?"</span><span class="p">,</span> <span class="s2">"-"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '-H-o-l-a-,- -s-o-y- -u-n- -s-t-r-i-n-g- -c-o-n- -- --- ---- -d-i-g-i-t-o-s-',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Contadores">Contadores<a class="anchor-link" href="#Contadores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 91" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Quando quisermos encontrar algo que apareça x vezes, usaremos os contadores entre chaves <code>{opening_brace}{closing_brace}</code>. Por exemplo, se quisermos encontrar uma sequência na qual haja pelo menos dois dígitos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 1234 1234digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d</span><span class="si">{2}</span><span class="s2">"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'12\', \'12\', \'12\', \'34\', \'12\', \'34\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como você pode ver, você encontrou as sequências <code>12</code> e <code>34</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Os contadores aceitam uma dimensão superior e inferior <code>{opening_brace}{opening_brace}inf, sup{closing_brace}</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 1234 1234digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,5}"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'12\', \'123\', \'1234\', \'1234\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se nenhuma dimensão superior for definida, isso significa que você deseja pelo menos o número de elementos indicado, mas nenhum limite superior.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 1234 12345464168415641646451563416 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'12\', \'123\', \'1234\', \'12345464168415641646451563416\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se quisermos usar a notação de dimensão superior e inferior, mas quisermos um número fixo, teremos que colocar esse número em ambas as dimensões.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 1234 12345464168415641646451563416 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,3}"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'12\', \'123\', \'123\', \'123\', \'454\', \'641\', \'684\', \'156\', \'416\', \'464\', \'515\', \'634\', \'16\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Classes">Classes<a class="anchor-link" href="#Classes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 92" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Você pode criar classes usando colchetes <code>[]</code>. Na verdade, vimos que isso era para intervalos, mas, depois de definir o que deseja dentro deles, você pode considerá-lo como uma classe e operar com o <code>[]</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por exemplo, suponha que tenhamos um número de telefone, que pode ser fornecido de uma das seguintes maneiras</p>
      <ul>
      <li>666-66-66-66</li>
      <li>666-666-666</li>
      <li>666 666 666</li>
      <li>666 66 66 66</li>
      <li>666666666</li>
      </ul>
      <p>Há muitas maneiras de fornecer um número, portanto, vamos ver como criar uma classe para definir o delimitador.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro, pediremos a ele que encontre todas as sequências de números em que haja pelo menos dois números.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666\', \'66\', \'66\', \'66\']',
          'string2: 666-666-666 --&gt; [\'666\', \'666\', \'666\']',
          'string3: 666 66 66 66 --&gt; [\'666\', \'66\', \'66\', \'66\']',
          'string4: 666 666 666 --&gt; [\'666\', \'666\', \'666\']',
          'string5: 666666666 --&gt; [\'666666666\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora, definimos o separador a ser encontrado como um <code>-</code> ou um espaço.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'-\', \'-\', \'-\']',
          'string2: 666-666-666 --&gt; [\'-\', \'-\']',
          'string3: 666 66 66 66 --&gt; [\' \', \' \', \' \']',
          'string4: 666 666 666 --&gt; [\' \', \' \']',
          'string5: 666666666 --&gt; []',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como você pode ver na última string, ela não foi encontrada, então adicionamos um <code>?</code> para encontrar quando há zero ou um.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]?"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]?"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]?"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]?"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]?"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'\', \'\', \'\', \'-\', \'\', \'\', \'-\', \'\', \'\', \'-\', \'\', \'\', \'\']',
          'string2: 666-666-666 --&gt; [\'\', \'\', \'\', \'-\', \'\', \'\', \'\', \'-\', \'\', \'\', \'\', \'\']',
          'string3: 666 66 66 66 --&gt; [\'\', \'\', \'\', \' \', \'\', \'\', \' \', \'\', \'\', \' \', \'\', \'\', \'\']',
          'string4: 666 666 666 --&gt; [\'\', \'\', \'\', \' \', \'\', \'\', \'\', \' \', \'\', \'\', \'\', \'\']',
          'string5: 666666666 --&gt; [\'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora estamos procurando que tudo esteja junto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666-66-66-66\']',
          'string2: 666-666-666 --&gt; []',
          'string3: 666 66 66 66 --&gt; [\'666 66 66 66\']',
          'string4: 666 666 666 --&gt; []',
          'string5: 666666666 --&gt; [\'666666666\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver em <code>string2</code> e <code>string4</code>, ele não encontra nada. Definimos o filtro <code>[\d{opening_brace}2,{closing_brace}[\s]?</code> 4 vezes, ou seja, queremos uma sequência de pelo menos dois números, seguida por zero ou um hífen ou separador de espaço que se repita 4 vezes. Mas na última sequência não há necessidade do <code>[\d{opening_brace}2,{closing_brace}[\s]?</code>, pois ele nunca terminará um número com um espaço ou um hífen.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666-66-66-66\']',
          'string2: 666-666-666 --&gt; []',
          'string3: 666 66 66 66 --&gt; [\'666 66 66 66\']',
          'string4: 666 666 666 --&gt; []',
          'string5: 666666666 --&gt; [\'666666666\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ainda não foi encontrado para <code>string2</code> e <code>string4</code>. Isso ocorre porque a última coisa no filtro é um <code>d{opening_brace}2,{closing_brace}</code>, ou seja, após o terceiro separador, esperamos pelo menos dois números, mas isso não acontece em <code>string2</code> e <code>string4</code>, então colocamos o seguinte</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666-66-66-66\']',
          'string2: 666-666-666 --&gt; [\'666-666-666\']',
          'string3: 666 66 66 66 --&gt; [\'666 66 66 66\']',
          'string4: 666 666 666 --&gt; [\'666 666 666\']',
          'string5: 666666666 --&gt; [\'666666666\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="O-delimitador-?-como-um-delimitador-r%C3%A1pido">O delimitador <code>?</code> como um delimitador rápido<a class="anchor-link" href="#O-delimitador-?-como-um-delimitador-r%C3%A1pido"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 93" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>O exemplo acima pode ser filtrado usando <code>d+?[- ]</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+?[- ]"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+?[- ]"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+?[- ]"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+?[- ]"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+?[- ]"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666-\', \'66-\', \'66-\']',
          'string2: 666-666-666 --&gt; [\'666-\', \'666-\']',
          'string3: 666 66 66 66 --&gt; [\'666 \', \'66 \', \'66 \']',
          'string4: 666 666 666 --&gt; [\'666 \', \'666 \']',
          'string5: 666666666 --&gt; []',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Sem o delimitador <code>?</code>, teríamos <code>\d+[- ]</code>, o que significa uma sequência de um ou mais números seguidos por um espaço ou hífen. Mas o que o delimitador <code>?</code> faz é tornar essa busca mais rápida</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="O-negador">O negador<a class="anchor-link" href="#O-negador"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 94" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Anteriormente, vimos que com <code>d</code> encontramos dígitos, portanto, com <code>D</code> encontramos tudo o que não é dígito.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"E3s4t6e e1s2t3r5i6n7g8 t9i0e4n2e1 d4i5g7i9t0o5s2"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\D"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'E\', \'s\', \'t\', \'e\', \' \', \'e\', \'s\', \'t\', \'r\', \'i\', \'n\', \'g\', \' \', \'t\', \'i\', \'e\', \'n\', \'e\', \' \', \'d\', \'i\', \'g\', \'i\', \'t\', \'o\', \'s\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O mesmo vale para as letras: se você digitar <code>W</code>, ele encontrará tudo o que não for uma letra.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"Letras ab27_ no letras ,.:;´ç"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\W"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\' \', \' \', \' \', \' \', \',\', \'.\', \':\', \';\', \'´\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se colocarmos <code>S</code>, encontraremos tudo o que não for espaço</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\S"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'L\', \'e\', \'t\', \'r\', \'a\', \'s\', \'a\', \'b\', \'2\', \'7\', \'_\', \'n\', \'o\', \'l\', \'e\', \'t\', \'r\', \'a\', \'s\', \',\', \'.\', \':\', \';\', \'´\', \'ç\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mas, caso tenhamos uma classe ou outra coisa, podemos negá-la com <code>^</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"1234567890"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[^5-9]"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'1\', \'2\', \'3\', \'4\', \'0\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Voltando ao exemplo anterior dos números de telefone, podemos filtrá-los da seguinte forma</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666-66-66-66\']',
          'string2: 666-666-666 --&gt; [\'666-666-666\']',
          'string3: 666 66 66 66 --&gt; [\'666 66 66 66\']',
          'string4: 666 666 666 --&gt; [\'666 666 666\']',
          'string5: 666666666 --&gt; [\'666666666\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O que estamos fazendo é solicitar sequências de pelo menos dois dígitos seguidos de um ou nenhum não-dígito.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="O-in%C3%ADcio-%5E-e-o-final-da-linha-$.">O início <code>^</code> e o final da linha <code>$</code>.<a class="anchor-link" href="#O-in%C3%ADcio-%5E-e-o-final-da-linha-$."><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 95" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com <code>^</code>, podemos pesquisar o início de uma linha, por exemplo, se quisermos encontrar um dígito que esteja apenas no início de uma linha.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"linea 1"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"2ª linea"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"^\d"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"^\d"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[]',
          '[\'2\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como você pode ver, há apenas um dígito no início da linha em <code>string2</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Da mesma forma, o final de uma linha pode ser encontrado com <code>$</code>. Se quisermos encontrar um dígito apenas no final de uma linha</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"linea 1"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"2ª linea"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d$"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d$"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'1\']',
          '[]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Isso só ocorre em <code>string1</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Exemplos-pr%C3%A1ticos">Exemplos práticos<a class="anchor-link" href="#Exemplos-pr%C3%A1ticos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 96" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Registros">Registros<a class="anchor-link" href="#Registros"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 97" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se no registro a seguir quisermos encontrar apenas os <code>WARN</code>s</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">log</span> <span class="o">=</span> <span class="s2">"""[LOG ENTRY] [ERROR] The system is unstable</span>',
          '<span class="s2">[LOG ENTRY] [WARN] The system may be down</span>',
          '<span class="s2">[LOG ENTRY] [WARN] Microsoft just bought Github</span>',
          '<span class="s2">[LOG DATA] [LOG] Everything is OK</span>',
          '<span class="s2">[LOG ENTRY] [LOG] [user:@beco] Logged in</span>',
          '<span class="s2">[LOG ENTRY] [LOG] [user:@beco] Clicked here</span>',
          '<span class="s2">[LOG DATA] [LOG] [user:@celismx] Did something</span>',
          '<span class="s2">[LOG ENTRY] [LOG] [user:@beco] Rated the app</span>',
          '<span class="s2">[LOG ENTRY] [LOG] [user:@beco] Logged out</span>',
          '<span class="s2">[LOG LINE] [LOG] [user:@celismx] Logged in"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\[LOG.*\[WARN\].*"</span><span class="p">,</span> <span class="n">log</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'[LOG ENTRY] [WARN] The system may be down\',',
          ' \'[LOG ENTRY] [WARN] Microsoft just bought Github\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="N%C3%BAmero-de-telefone">Número de telefone<a class="anchor-link" href="#N%C3%BAmero-de-telefone"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 98" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dentro de um número, podemos encontrar letras como <code>e</code> para ramal, <code>#</code> também para ramal ou <code>p</code> para fazer uma pausa se um computador ligar. Também podemos encontrar o <code>+</code> para indicar um prefixo de país e separadores como espaços, <code>-</code>, <code>.</code>, <code>.</code>, <code>.</code>, <code>.</code>, <code>.</code>, <code>.</code>, <code>.</code>, <code>.</code>, <code>.</code>, <code>.</code>, <code>.</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tel</span> <span class="o">=</span> <span class="s2">"""555658</span>',
          '<span class="s2">56-58-11</span>',
          '<span class="s2">56.58.11</span>',
          '<span class="s2">56.78-98</span>',
          '<span class="s2">65 09 87</span>',
          '<span class="s2">76y87r98</span>',
          '<span class="s2">45y78-56</span>',
          '<span class="s2">78.87 65</span>',
          '<span class="s2">78 54-56</span>',
          '<span class="s2">+521565811</span>',
          '<span class="s2">58-11-11#246</span>',
          '<span class="s2">55256048p123</span>',
          '<span class="s2">55256048e123"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\+?\d{2,3}[^\da-zA-Z</span><span class="se">\\n</span><span class="s2">]?\d{2,3}[^\da-zA-Z</span><span class="se">\\n</span><span class="s2">]?\d{2,3}[#pe]?\d*"</span><span class="p">,</span> <span class="n">tel</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'555658\',',
          ' \'56-58-11\',',
          ' \'56.58.11\',',
          ' \'56.78-98\',',
          ' \'65 09 87\',',
          ' \'78.87 65\',',
          ' \'78 54-56\',',
          ' \'+521565811\',',
          ' \'58-11-11#246\',',
          ' \'55256048p123\',',
          ' \'55256048e123\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos explicar</p>
      <ul>
      <li><code>+?</code>: começando com o caractere <code>+</code> e contendo zero ou um</li>
      <li><code>d{opening_brace}2,3{closing_brace}</code>: a ser seguido por 2 a 3 dígitos</li>
      <li>Em seguida, pode haver zero ou um caractere que não seja um dígito, nem uma letra de <code>a</code> a <code>z</code>, nem uma letra de <code>A</code> a <code>Z</code>, nem uma quebra de linha.</li>
      <li><code>d{opening_brace}2,3{closing_brace}</code>: a ser seguido por 2 a 3 dígitos</li>
      <li>Em seguida, pode haver zero ou um caractere que não seja um dígito, nem uma letra de <code>a</code> a <code>z</code>, nem uma letra de <code>A</code> a <code>Z</code>, nem uma quebra de linha.</li>
      <li><code>d{opening_brace}2,3{closing_brace}</code>: a ser seguido por 2 a 3 dígitos</li>
      <li><code>[#pe]?</code>: então pode haver zero ou um caractere <code>#</code>, ou <code>p</code>, ou <code>e</code>.</li>
      <li>Por fim, que haja zero ou todos os números.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="URLs">URLs<a class="anchor-link" href="#URLs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 99" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">urls</span> <span class="o">=</span> <span class="s2">"""url: https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx</span>',
          '<span class="s2">url: http://instagram.com/p/blablablah</span>',
          '<span class="s2">url: http://itam.mx/test</span>',
          '<span class="s2">http://instagram.com/p/blablablah</span>',
          '<span class="s2">https://www.vanguarsoft.com.ve</span>',
          '<span class="s2">http://platzi.com</span>',
          '<span class="s2">https://traetelo.net</span>',
          '<span class="s2">https://traetelo.net/images archivo.jsp</span>',
          '<span class="s2">url: https://subdominio.traetelo.net</span>',
          '<span class="s2">url: https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx</span>',
          '<span class="s2">url: http://instagram.com/p/blablablah</span>',
          '<span class="s2">url: http://itam.mx/test</span>',
          '<span class="s2">http://instagram.com/p/blablablah</span>',
          '<span class="s2">https://www.google.com.co/</span>',
          '<span class="s2">https://sub.dominio.de.alguien.com/archivo.html</span>',
          '<span class="s2">https://en.wikipedia.org/wiki/.org</span>',
          '<span class="s2">https://cdn-microsoft.org/image/seixo2t9sjl_22.jpg</span>',
          '<span class="s2">https://hola.pizza</span>',
          '<span class="s2">https://platzi.com/clases/1301-expresiones-regulares/11860-urls9102/ clase</span>',
          '',
          '',
          '<span class="s2">https://api.giphy.com/v1/gifs/search?q=Rick and Morty&amp;limit=10&amp;api_key=DG3hItPp5HIRNC0nit3AOR7eQZAe</span>',
          '',
          '<span class="s2">http://localhost:3000/something?color1=red&amp;color2=blue</span>',
          '<span class="s2">http://localhost:3000/display/post?size=small</span>',
          '<span class="s2"> http://localhost:3000/?name=satyam</span>',
          '<span class="s2"> http://localhost:3000/scanned?orderid=234</span>',
          '<span class="s2"> http://localhost:3000/getUsers?userId=12354411&amp;name=Billy</span>',
          '<span class="s2"> http://localhost:3000/getUsers?userId=12354411</span>',
          '<span class="s2">http://localhost:3000/search?city=Barcelona</span>',
          '',
          '<span class="s2">www.sitiodeejemplo.net/pagina.php?nombredevalor1=valor1&amp;nombredevalor2=valor2"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"https?:\/\/[\w\-\.]+\.\w{2,6}\/?\S*"</span><span class="p">,</span> <span class="n">urls</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx\',',
          ' \'http://instagram.com/p/blablablah\',',
          ' \'http://itam.mx/test\',',
          ' \'http://instagram.com/p/blablablah\',',
          ' \'https://www.vanguarsoft.com.ve\',',
          ' \'http://platzi.com\',',
          ' \'https://traetelo.net\',',
          ' \'https://traetelo.net/images\',',
          ' \'https://subdominio.traetelo.net\',',
          ' \'https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx\',',
          ' \'http://instagram.com/p/blablablah\',',
          ' \'http://itam.mx/test\',',
          ' \'http://instagram.com/p/blablablah\',',
          ' \'https://www.google.com.co/\',',
          ' \'https://sub.dominio.de.alguien.com/archivo.html\',',
          ' \'https://en.wikipedia.org/wiki/.org\',',
          ' \'https://cdn-microsoft.org/image/seixo2t9sjl_22.jpg\',',
          ' \'https://hola.pizza\',',
          ' \'https://platzi.com/clases/1301-expresiones-regulares/11860-urls9102/\',',
          ' \'https://api.giphy.com/v1/gifs/search?q=Rick\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos explicar</p>
      <ul>
      <li><code>http</code>: queremos que ele comece com <code>http</code>.</li>
      <li><code>s?</code>: Então pode ou não haver um <code>s</code>.</li>
      <li><code>:\/</code>: seguido por <code>://</code></li>
      <li>`[+]: seguido de uma ou mais letras, traços ou pontos</li>
      <li>Então, um ponto</li>
      <li><code>w{opening_brace}2,6{closing_brace}</code>: Entre 2 e 6 letras para o tld</li>
      <li><code>\/?</code>: seguido por zero ou um <code>/</code></li>
      <li>Nenhum ou tudo que não seja um espaço.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="E-mails">E-mails<a class="anchor-link" href="#E-mails"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 100" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">mails</span> <span class="o">=</span> <span class="s2">"""esto.es_un.mail@mail.com</span>',
          '<span class="s2">esto.es_un.mail+complejo@mail.com</span>',
          '<span class="s2">dominio.com</span>',
          '<span class="s2">rodrigo.jimenez@yahoo.com.mx</span>',
          '<span class="s2">ruben@starbucks.com</span>',
          '<span class="s2">esto_no$es_email@dominio.com</span>',
          '<span class="s2">no_se_de_internet3@hotmail.com"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[\w\._]{5,30}\+?[\w\._]{0,10}@[\w\.-]{2,}\.\w{2,6}"</span><span class="p">,</span> <span class="n">mails</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'esto.es_un.mail@mail.com\',',
          ' \'esto.es_un.mail+complejo@mail.com\',',
          ' \'rodrigo.jimenez@yahoo.com.mx\',',
          ' \'ruben@starbucks.com\',',
          ' \'es_email@dominio.com\',',
          ' \'no_se_de_internet3@hotmail.com\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos explicar</p>
      <ul>
      <li>{opening_brace}5,30{closing_brace}`: queremos que ele comece com um número entre 5 e 30 (que é o mínimo e o máximo que o gmail suporta) letras, pontos ou sublinhados.</li>
      <li>Seguido por um zero ou um <code>+</code>.</li>
      <li>{opening_brace}0,10{closing_brace}`: Então, entre 0 e 10 letras, pontos ou barras</li>
      <li><code>@</code>: O <code>@</code>: O <code>@</code>: O <code>@</code>: O <code>@</code></li>
      <li><code>[{opening_brace}2,{closing_brace}</code>: Entre 2 e infinitas letras, pontos e hífens (domínio)</li>
      <li>seguido de um '`.</li>
      <li><code>w{opening_brace}2,6{closing_brace}</code>: E, finalmente, entre 2 e 6 letras para o tld</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Localiza%C3%A7%C3%B5es">Localizações<a class="anchor-link" href="#Localiza%C3%A7%C3%B5es"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 101" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Há duas maneiras possíveis de fornecer locais, portanto, examinaremos ambas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">loc</span> <span class="o">=</span> <span class="s2">"""-99.205646,19.429707,2275.10</span>',
          '<span class="s2">-99.205581, 19.429652,2275.10</span>',
          '<span class="s2">-99.204654,19.428952,2275.58"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\-?\d{1,3}\.\d{1,6},\s?\-?\d{1,3}\.\d{1,6},.*"</span><span class="p">,</span> <span class="n">loc</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'-99.205646,19.429707,2275.10\',',
          ' \'-99.205581, 19.429652,2275.10\',',
          ' \'-99.204654,19.428952,2275.58\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos explicar</p>
      <ul>
      <li>Queremos que ele comece com zero ou um sinal de menos.</li>
      <li>Seguido de um a três números</li>
      <li>Então, um ponto</li>
      <li><code>d{opening_brace}1,6{closing_brace}</code>: Depois de um a seis números</li>
      <li><code>,</code>: Then a <code>,</code>: Then a <code>,</code>: Then a <code>,</code>: Then a <code>,</code>: Then a <code>,</code></li>
      <li><code>s?</code>: Após zero ou um espaço</li>
      <li>``-?`: Zero ou um sinal de menos</li>
      <li>``: Então, entre um e três números</li>
      <li>Então, um ponto</li>
      <li>Seguido de um a seis números</li>
      <li><code>,</code>: depois uma vírgula</li>
      <li>Finalmente, nenhum ou todos os tipos de caracteres</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">loc</span> <span class="o">=</span> <span class="s2">"""-99 12\' 34.08"W, 19 34\' 56.98"N</span>',
          '<span class="s2">-34 54\' 32.00"E, -3 21\' 67.00"S"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\-?\d{1,3}\s\d{1,2}\'\s\d{1,2}\.\d{2,2}</span><span class="se">\\"</span><span class="s2">[WE],\s?\-?\d{1,3}\s\d{1,2}\'\s\d{1,2}\.\d{2,2}</span><span class="se">\\"</span><span class="s2">[SN]"</span><span class="p">,</span> <span class="n">loc</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'-99 12\' 34.08"W, 19 34\' 56.98"N\', \'-34 54\' 32.00"E, -3 21\' 67.00"S\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '-99 12\' 34.08"W, 19 34\' 56.98"N',
          '-34 54\' 32.00"E, -3 21\' 67.00"S',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos explicar</p>
      <ul>
      <li>Queremos que ele comece com zero ou um sinal de menos.</li>
      <li>Seguido de um a três números</li>
      <li><code>s</code>: Em seguida, um espaço</li>
      <li><code>d{opening_brace}1,2{closing_brace}</code>: Segmento de um a dois números</li>
      <li><code>'</code>: Then a <code>'</code>: Then a <code>'</code>: Then a <code>'</code>: Then a <code>'</code>: Then a <code>'</code></li>
      <li>Seguido de um espaço</li>
      <li>``: Então, entre um e dois números</li>
      <li>Após um ponto</li>
      <li><code>d{opening_brace}2,2{closing_brace}</code>: seguido por dois números</li>
      <li><code>"</code>: then a <code>"</code>: then a <code>"</code>: then a <code>"</code>: then a <code>"</code>.</li>
      <li><code>[WE]</code>: Em seguida, a letra <code>W</code> ou a letra <code>E</code>.</li>
      <li><code>,</code>: Após uma vírgula</li>
      <li>Seguido por um zero ou um espaço</li>
      <li>``-?`: Então, zero ou um sinal de menos</li>
      <li>``: Então, entre um e três números</li>
      <li>Seguido de um espaço</li>
      <li>``: Então, entre um e dois números</li>
      <li><code>'</code>: Then a <code>'</code>: After a <code>'</code></li>
      <li><code>s</code>: Em seguida, um espaço</li>
      <li><code></code>d{opening_brace}1,2{closing_brace}`: Então, entre um e dois números</li>
      <li>seguido de um ponto final</li>
      <li><code>d{opening_brace}2,2{closing_brace}</code>: Então, dois números</li>
      <li><code>"</code>: Seguido por <code>"</code>.</li>
      <li><code>[SN]</code>: E, finalmente, a letra <code>S</code> ou a letra <code>N</code>.</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Nomes">Nomes<a class="anchor-link" href="#Nomes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 102" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">nombres</span> <span class="o">=</span> <span class="s2">"""Camilo Sarmiento Gálvez</span>',
          '<span class="s2">Alejandro Pliego Abasto</span>',
          '<span class="s2">Milagros Reyes Japón</span>',
          '<span class="s2">Samuel París Arrabal</span>',
          '<span class="s2">Juan Pablo Tafalla</span>',
          '<span class="s2">Axel Gálvez Velázquez</span>',
          '<span class="s2">Óscar Montreal Aparicio</span>',
          '<span class="s2">Jacobo Pozo Tassis</span>',
          '<span class="s2">Guillermo Ordóñez Espiga</span>',
          '<span class="s2">Eduardo Pousa Curbelo</span>',
          '<span class="s2">Ivanna Bienvenida Kevin</span>',
          '<span class="s2">Ada Tasis López</span>',
          '<span class="s2">Luciana Sáenz García</span>',
          '<span class="s2">Florencia Sainz Márquz</span>',
          '<span class="s2">Catarina Cazalla Lombarda</span>',
          '<span class="s2">Paloma Gallo Perro</span>',
          '<span class="s2">Margarita Quesada Florez</span>',
          '<span class="s2">Vicente Fox Quesada</span>',
          '<span class="s2">Iris Graciani</span>',
          '<span class="s2">Asunción Carballar</span>',
          '<span class="s2">Constanza Muñoz</span>',
          '<span class="s2">Manuel Andres García Márquez"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[A-ZÁÉÍÓÚ][a-záéíóú]+\s[A-ZÁÉÍÓÚ][a-záéíóú]+\s[A-ZÁÉÍÓÚ][a-záéíóú]+"</span><span class="p">,</span> <span class="n">nombres</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Camilo Sarmiento Gálvez\',',
          ' \'Alejandro Pliego Abasto\',',
          ' \'Milagros Reyes Japón\',',
          ' \'Samuel París Arrabal\',',
          ' \'Juan Pablo Tafalla\',',
          ' \'Axel Gálvez Velázquez\',',
          ' \'Óscar Montreal Aparicio\',',
          ' \'Jacobo Pozo Tassis\',',
          ' \'Espiga\nEduardo Pousa\',',
          ' \'Curbelo\nIvanna Bienvenida\',',
          ' \'Kevin\nAda Tasis\',',
          ' \'López\nLuciana Sáenz\',',
          ' \'García\nFlorencia Sainz\',',
          ' \'Márquz\nCatarina Cazalla\',',
          ' \'Lombarda\nPaloma Gallo\',',
          ' \'Perro\nMargarita Quesada\',',
          ' \'Florez\nVicente Fox\',',
          ' \'Quesada\nIris Graciani\',',
          ' \'Asunción Carballar\nConstanza\',',
          ' \'Manuel Andres García\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos explicar</p>
      <ul>
      <li><code>[A-ZÁÉÍÓÚ]</code>: queremos que ele comece com uma letra maiúscula, incluindo acentos.</li>
      <li><code>[a-záééíóú]+</code>: seguido de uma ou mais letras minúsculas, entre espaços</li>
      <li>Seguido de um espaço</li>
      <li><code>[A-ZÁÉÍÓÚ]</code>: seguido de uma letra maiúscula, incluindo acentos</li>
      <li><code>[a-záééíóú]+</code>: seguido de uma ou mais letras minúsculas, entre espaços</li>
      <li>Seguido de um espaço</li>
      <li><code>[A-ZÁÉÍÓÚ]</code>: seguido de uma letra maiúscula, incluindo acentos</li>
      <li><code>[a-záééíóú]+</code>: seguido de uma ou mais letras minúsculas, entre espaços</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Pesquisar-e-substituir">Pesquisar e substituir<a class="anchor-link" href="#Pesquisar-e-substituir"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 103" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Faremos o download de um arquivo com vários filmes históricos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># download file from url</span>',
          '<span class="kn">import</span> <span class="nn">urllib.request</span>',
          '<span class="n">url</span> <span class="o">=</span> <span class="s2">"https://static.platzi.com/media/tmp/class-files/github/moviedemo/moviedemo-master/movies.dat"</span>',
          '<span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlretrieve</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="s2">"movies.dat"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">HTTPError</span>                                 Traceback (most recent call last)',
          'Cell <span class="ansi-green-fg">In[43], line 4</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      2</span> <span class="ansi-bold" style="color: rgb(0,135,0)">import</span> <span class="ansi-bold" style="color: rgb(0,0,255)">urllib</span><span class="ansi-bold" style="color: rgb(0,0,255)">.</span><span class="ansi-bold" style="color: rgb(0,0,255)">request</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      3</span> url <span style="color: rgb(98,98,98)">=</span> <span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">https://static.platzi.com/media/tmp/class-files/github/moviedemo/moviedemo-master/movies.dat</span><span style="color: rgb(175,0,0)">"</span>',
          '<span class="ansi-green-fg">----&gt; 4</span> urllib<span style="color: rgb(98,98,98)">.</span>request<span style="color: rgb(98,98,98)">.</span>urlretrieve(url, <span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">movies.dat</span><span style="color: rgb(175,0,0)">"</span>)',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:241</span>, in <span class="ansi-cyan-fg">urlretrieve</span><span class="ansi-blue-fg">(url, filename, reporthook, data)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    224</span> <span style="color: rgb(175,0,0)">"""</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    225</span> <span style="color: rgb(175,0,0)">Retrieve a URL into a temporary location on disk.</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    226</span> ',
          '<span class="ansi-green-fg">   (...)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    237</span> <span style="color: rgb(175,0,0)">data file as well as the resulting HTTPMessage object.</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    238</span> <span style="color: rgb(175,0,0)">"""</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    239</span> url_type, path <span style="color: rgb(98,98,98)">=</span> _splittype(url)',
          '<span class="ansi-green-fg">--&gt; 241</span> <span class="ansi-bold" style="color: rgb(0,135,0)">with</span> contextlib<span style="color: rgb(98,98,98)">.</span>closing(urlopen(url, data)) <span class="ansi-bold" style="color: rgb(0,135,0)">as</span> fp:',
          '<span class="ansi-green-intense-fg ansi-bold">    242</span>     headers <span style="color: rgb(98,98,98)">=</span> fp<span style="color: rgb(98,98,98)">.</span>info()',
          '<span class="ansi-green-intense-fg ansi-bold">    244</span>     <span style="color: rgb(95,135,135)"># Just return the local path and the "headers" for file://</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    245</span>     <span style="color: rgb(95,135,135)"># URLs. No sense in performing a copy unless requested.</span>',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:216</span>, in <span class="ansi-cyan-fg">urlopen</span><span class="ansi-blue-fg">(url, data, timeout, cafile, capath, cadefault, context)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    214</span> <span class="ansi-bold" style="color: rgb(0,135,0)">else</span>:',
          '<span class="ansi-green-intense-fg ansi-bold">    215</span>     opener <span style="color: rgb(98,98,98)">=</span> _opener',
          '<span class="ansi-green-fg">--&gt; 216</span> <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> opener<span style="color: rgb(98,98,98)">.</span>open(url, data, timeout)',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:525</span>, in <span class="ansi-cyan-fg">OpenerDirector.open</span><span class="ansi-blue-fg">(self, fullurl, data, timeout)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    523</span> <span class="ansi-bold" style="color: rgb(0,135,0)">for</span> processor <span class="ansi-bold" style="color: rgb(175,0,255)">in</span> <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>process_response<span style="color: rgb(98,98,98)">.</span>get(protocol, []):',
          '<span class="ansi-green-intense-fg ansi-bold">    524</span>     meth <span style="color: rgb(98,98,98)">=</span> <span style="color: rgb(0,135,0)">getattr</span>(processor, meth_name)',
          '<span class="ansi-green-fg">--&gt; 525</span>     response <span style="color: rgb(98,98,98)">=</span> meth(req, response)',
          '<span class="ansi-green-intense-fg ansi-bold">    527</span> <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> response',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:634</span>, in <span class="ansi-cyan-fg">HTTPErrorProcessor.http_response</span><span class="ansi-blue-fg">(self, request, response)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    631</span> <span style="color: rgb(95,135,135)"># According to RFC 2616, "2xx" code indicates that the client\'s</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    632</span> <span style="color: rgb(95,135,135)"># request was successfully received, understood, and accepted.</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    633</span> <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> <span class="ansi-bold" style="color: rgb(175,0,255)">not</span> (<span style="color: rgb(98,98,98)">200</span> <span style="color: rgb(98,98,98)">&lt;</span><span style="color: rgb(98,98,98)">=</span> code <span style="color: rgb(98,98,98)">&lt;</span> <span style="color: rgb(98,98,98)">300</span>):',
          '<span class="ansi-green-fg">--&gt; 634</span>     response <span style="color: rgb(98,98,98)">=</span> <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>parent<span style="color: rgb(98,98,98)">.</span>error(',
          '<span class="ansi-green-intense-fg ansi-bold">    635</span>         <span style="color: rgb(175,0,0)">\'</span><span style="color: rgb(175,0,0)">http</span><span style="color: rgb(175,0,0)">\'</span>, request, response, code, msg, hdrs)',
          '<span class="ansi-green-intense-fg ansi-bold">    637</span> <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> response',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:563</span>, in <span class="ansi-cyan-fg">OpenerDirector.error</span><span class="ansi-blue-fg">(self, proto, *args)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    561</span> <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> http_err:',
          '<span class="ansi-green-intense-fg ansi-bold">    562</span>     args <span style="color: rgb(98,98,98)">=</span> (<span style="color: rgb(0,135,0)">dict</span>, <span style="color: rgb(175,0,0)">\'</span><span style="color: rgb(175,0,0)">default</span><span style="color: rgb(175,0,0)">\'</span>, <span style="color: rgb(175,0,0)">\'</span><span style="color: rgb(175,0,0)">http_error_default</span><span style="color: rgb(175,0,0)">\'</span>) <span style="color: rgb(98,98,98)">+</span> orig_args',
          '<span class="ansi-green-fg">--&gt; 563</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>_call_chain(<span style="color: rgb(98,98,98)">*</span>args)',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:496</span>, in <span class="ansi-cyan-fg">OpenerDirector._call_chain</span><span class="ansi-blue-fg">(self, chain, kind, meth_name, *args)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    494</span> <span class="ansi-bold" style="color: rgb(0,135,0)">for</span> handler <span class="ansi-bold" style="color: rgb(175,0,255)">in</span> handlers:',
          '<span class="ansi-green-intense-fg ansi-bold">    495</span>     func <span style="color: rgb(98,98,98)">=</span> <span style="color: rgb(0,135,0)">getattr</span>(handler, meth_name)',
          '<span class="ansi-green-fg">--&gt; 496</span>     result <span style="color: rgb(98,98,98)">=</span> func(<span style="color: rgb(98,98,98)">*</span>args)',
          '<span class="ansi-green-intense-fg ansi-bold">    497</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> result <span class="ansi-bold" style="color: rgb(175,0,255)">is</span> <span class="ansi-bold" style="color: rgb(175,0,255)">not</span> <span class="ansi-bold" style="color: rgb(0,135,0)">None</span>:',
          '<span class="ansi-green-intense-fg ansi-bold">    498</span>         <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> result',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:643</span>, in <span class="ansi-cyan-fg">HTTPDefaultErrorHandler.http_error_default</span><span class="ansi-blue-fg">(self, req, fp, code, msg, hdrs)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    642</span> <span class="ansi-bold" style="color: rgb(0,135,0)">def</span> <span style="color: rgb(0,0,255)">http_error_default</span>(<span style="color: rgb(0,135,0)">self</span>, req, fp, code, msg, hdrs):',
          '<span class="ansi-green-fg">--&gt; 643</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">raise</span> HTTPError(req<span style="color: rgb(98,98,98)">.</span>full_url, code, msg, hdrs, fp)',
          '<span class="ansi-red-fg">HTTPError</span>: HTTP Error 403: Forbidden',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos imprimir as primeiras 10 linhas para analisá-las.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"movies.dat"</span><span class="p">,</span> <span class="s2">"r"</span><span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">file</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">10</span><span class="p">:</span>',
          '        <span class="k">break</span>',
          '',
          '<span class="n">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1::Toy Story (1995)::Adventure|Animation|Children|Comedy|Fantasy',
          '2::Jumanji (1995)::Adventure|Children|Fantasy',
          '3::Grumpier Old Men (1995)::Comedy|Romance',
          '4::Waiting to Exhale (1995)::Comedy|Drama|Romance',
          '5::Father of the Bride Part II (1995)::Comedy',
          '6::Heat (1995)::Action|Crime|Thriller',
          '7::Sabrina (1995)::Comedy|Romance',
          '8::Tom and Huck (1995)::Adventure|Children',
          '9::Sudden Death (1995)::Action',
          '10::GoldenEye (1995)::Action|Adventure|Thriller',
          '11::American President, The (1995)::Comedy|Drama|Romance',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como você pode ver, temos um ID, seguido por <code>::</code>, depois o nome do filme, entre parênteses o ano, seguido por <code>::</code> e depois os gêneros separados por <code>|</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos fazer uma limpeza de arquivo muito fácil usando expressões regulares, as funções <code>compile</code> e <code>match</code> e o uso de agrupamento com parênteses. Ao agrupar, selecionamos as áreas do texto que queremos manter e, em seguida, trabalhamos com elas como quisermos.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s2">"^\d+::([\w\s:,\(\)\.\-\'&amp;¡!/¿?ÁÉÍÓÚáéíóú\+*\$#°\'</span><span class="se">\"</span><span class="s2">\[\]@·]+)\s\((\d{4,4})\)::(.*)$"</span><span class="p">)</span>',
      '      ',
      '      <span class="n">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"movies.dat"</span><span class="p">,</span> <span class="s2">"r"</span><span class="p">)</span>',
      '      <span class="n">file_filtered</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"movies.csv"</span><span class="p">,</span> <span class="s2">"w"</span><span class="p">)</span>',
      '      <span class="n">file_filtered</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">"title,year,genders</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>',
      '      <span class="n">sep</span> <span class="o">=</span> <span class="s2">";;"</span>',
      '      <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">file</span><span class="p">:</span>',
      '          <span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>',
      '          <span class="k">if</span> <span class="n">result</span><span class="p">:</span>',
      '              <span class="n">file_filtered</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}{</span><span class="n">sep</span><span class="si">}{</span><span class="n">result</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="si">}{</span><span class="n">sep</span><span class="si">}{</span><span class="n">result</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>',
      '          <span class="k">else</span><span class="p">:</span>',
      '              <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
      '      <span class="n">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>',
      '      <span class="n">file_filtered</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>



















      
      <section class="section-block-markdown-cell">
      <p>Vejamos o que fizemos: primeiro, definimos um padrão com o seguinte:</p>
      <ul>
      <li><code>^</code>: Queremos que ele comece com o início da linha.</li>
      <li>Próximo um ou mais números</li>
      <li><code>::</code>: Seguido por <code>::</code></li>
      <li>`((([\¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡¡: esse é o primeiro agrupamento, procuramos qualquer palavra, espaço ou caractere entre colchetes que apareça uma ou mais vezes.</li>
      <li><code>s</code>: depois um espaço</li>
      <li>`: O fechamento de um parêntese</li>
      <li>(4,4{closing_brace})`: Aqui está o segundo agrupamento, estamos procurando por quatro números.</li>
      <li>Após o fechamento de um parêntese</li>
      <li><code>::</code>: Then <code>::</code></li>
      <li><code>(.*)</code>: o terceiro agrupamento, qualquer caractere que não ocorra nenhuma ou todas as vezes</li>
      <li><code>$</code>: Por último, o final da linha</li>
      </ul>
      <p>Dentro do <code>for</code>, analisamos linha por linha se o padrão que definimos foi encontrado e, se for encontrado, escrevemos os três padrões no <code>csv</code> separados por <code>sep</code>, que, no nosso caso, definimos como <code>;;</code>. Esse separador foi definido porque há títulos de filmes que têm <code>,</code>s.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Lemos o <code>csv</code> com o <code>Pandas</code>.</p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"movies.csv"</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s2">";;"</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s2">"python"</span><span class="p">)</span>
      <span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[100]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>title,year,genders</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>Toy Story</th>
      <th>1995</th>
      <td>Adventure|Animation|Children|Comedy|Fantasy</td>
      </tr>
      <tr>
      <th>Jumanji</th>
      <th>1995</th>
      <td>Adventure|Children|Fantasy</td>
      </tr>
      <tr>
      <th>Grumpier Old Men</th>
      <th>1995</th>
      <td>Comedy|Romance</td>
      </tr>
      <tr>
      <th>Waiting to Exhale</th>
      <th>1995</th>
      <td>Comedy|Drama|Romance</td>
      </tr>
      <tr>
      <th>Father of the Bride Part II</th>
      <th>1995</th>
      <td>Comedy</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Folha-de-dicas">Folha de dicas<a class="anchor-link" href="#Folha-de-dicas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 104" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Aqui está um [cheatsheet] (<a href="https://cheatography.com/davechild/cheat-sheets/regular-expressions/pdf/" target="_blank" rel="nofollow noreferrer">https://cheatography.com/davechild/cheat-sheets/regular-expressions/pdf/</a>) com vários padrões</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="davechild_regular-expressions" src="http://maximofn.com/wp-content/uploads/2024/02/davechild_regular-expressions-scaled.webp" width="848" height="1200"/></p>
      </section>
      






    </div>

  </section>

</PostLayout>
