---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Tuplas de um único elemento em Python';
const end_url = 'tips/single-element-tuples';
const description = 'Dica para criar tuplas de um único elemento em Python';
const keywords = 'tuplas, python, único elemento';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/single-element-tuples.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1280
    image_height=720
    image_extension=webp
    article_date=2024-09-09+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Tuplas-de-um-%C3%BAnico-elemento">Tuplas de um único elemento<a class="anchor-link" href="#Tuplas-de-um-%C3%BAnico-elemento"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o português usando um modelo de tradução automática. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se em Python queremos criar uma lista de um único elemento simplesmente escrevemos o elemento entre colchetes, por exemplo:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'list',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>No entanto, com as tuplas não podemos escrever um elemento entre parênteses</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'int',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, Python o interpreta como um inteiro, não como uma tupla. Para resolver isso, adiciona-se uma vírgula após o elemento, por exemplo:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'tuple',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E para que isso serve? Quando temos uma função que devolve vários parâmetros, na verdade o que está devolvendo é uma tupla. Então pode acontecer de termos um código que chama uma função, verifica o comprimento da tupla que ela devolve e processa cada elemento da tupla. Vamos ver um exemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">return_tuple</span><span class="p">():</span>',
          '    <span class="k">return</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>',
          '',
          '<span class="k">def</span> <span class="nf">process_tuple</span><span class="p">():</span>',
          '    <span class="nb">tuple</span> <span class="o">=</span> <span class="n">return_tuple</span><span class="p">()</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">tuple</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
          '',
          '<span class="n">process_tuple</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1',
          '2',
          '3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mas o que acontece neste exemplo se a função não devolver uma tupla? Obteremos um erro</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">return_int</span><span class="p">():</span>',
          '    <span class="k">return</span> <span class="mi">1</span>',
          '',
          '<span class="k">def</span> <span class="nf">process_tuple</span><span class="p">():</span>',
          '    <span class="nb">tuple</span> <span class="o">=</span> <span class="n">return_int</span><span class="p">()</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">tuple</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
          '',
          '<span class="n">process_tuple</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">TypeError</span>                                 Traceback (most recent call last)',
          'Cell <span class="ansi-green-fg">In[5], line 9</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      6</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">for</span> i <span class="ansi-bold" style="color: rgb(175,0,255)">in</span> <span style="color: rgb(0,135,0)">tuple</span>:',
          '<span class="ansi-green-intense-fg ansi-bold">      7</span>         <span style="color: rgb(0,135,0)">print</span>(i)',
          '<span class="ansi-green-fg">----&gt; 9</span> process_tuple()',
          'Cell <span class="ansi-green-fg">In[5], line 6</span>, in <span class="ansi-cyan-fg">process_tuple</span><span class="ansi-blue-fg">()</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      4</span> <span class="ansi-bold" style="color: rgb(0,135,0)">def</span> <span style="color: rgb(0,0,255)">process_tuple</span>():',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span>     <span style="color: rgb(0,135,0)">tuple</span> <span style="color: rgb(98,98,98)">=</span> return_int()',
          '<span class="ansi-green-fg">----&gt; 6</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">for</span> i <span class="ansi-bold" style="color: rgb(175,0,255)">in</span> <span style="color: rgb(0,135,0)">tuple</span>:',
          '<span class="ansi-green-intense-fg ansi-bold">      7</span>         <span style="color: rgb(0,135,0)">print</span>(i)',
          '<span class="ansi-red-fg">TypeError</span>: \'int\' object is not iterable',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos um erro porque Python tenta iterar através do que a função retorna, mas como retorna um inteiro, não pode iterar através dele. Temos duas maneiras de resolver isso, uma é que a função que processa verifique se uma tupla foi retornada e, nesse caso, a processe, outra é que a função que retorna valores sempre retorne uma tupla, mesmo que seja de um único elemento.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">return_int</span><span class="p">():</span>',
          '    <span class="k">return</span> <span class="mi">1</span><span class="p">,</span>',
          '',
          '<span class="k">def</span> <span class="nf">process_tuple</span><span class="p">():</span>',
          '    <span class="nb">tuple</span> <span class="o">=</span> <span class="n">return_int</span><span class="p">()</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">tuple</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
          '',
          '<span class="n">process_tuple</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, na função <code>return_int</code> foi colocada uma <code>,</code> no final do <code>return</code>, então está devolvendo uma tupla de um único elemento, por isso a função <code>process_tuple</code> não dará erro.</p>
      </section>
      






    </div>

  </section>

</PostLayout>
