---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Tokens';
const end_url = 'tokens';
const description = 'Descubra o que são tokens e como as palavras são divididas em unidades mínimas de representação das palavras';
const keywords = 'tokens, token, openai, tiktoken, gpt-4, gpt-3.5-turbo, text-embedding-ada-002';
const languaje = 'PT';
const image_path = 'https://images.maximofn.com/tokens.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1024
    image_height=1024
    image_extension=webp
    article_date=2023-12-08+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o português usando um modelo de tradução automática. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Agora que os <code>LLM</code>s estão em alta, não paramos de ouvir o número de <code>token</code>s que cada modelo suporta, mas o que são os <code>token</code>s? São as unidades mínimas de representação das palavras</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para explicar o que são os <code>token</code>s, primeiro vejamos com um exemplo prático, vamos usar o tokenizador de <code>OpenAI</code>, chamado <a href="https://github.com/openai/tiktoken" target="_blank" rel="nofollow noreferrer">tiktoken</a>.</p>
      <p>Então, primeiro instalamos o pacote:</p>
      <div class='highlight'><pre><code class="language-bash">pip install tiktoken</code></pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uma vez instalado, criamos um tokenizador usando o modelo <code>cl100k_base</code>, que no notebook de exemplo <a href="https://github.com/openai/openai-cookbook/blob/main/examples/How_to_count_tokens_with_tiktoken.ipynb" target="_blank" rel="nofollow noreferrer">How to count tokens with tiktoken</a> explica que é o usado pelos modelos <code>gpt-4</code>, <code>gpt-3.5-turbo</code> e <code>text-embedding-ada-002</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span><span class="w"> </span><span class="nn">tiktoken</span>',
      '<span class="w"> </span>',
      '<span class="n">encoder</span> <span class="o">=</span> <span class="n">tiktoken</span><span class="o">.</span><span class="n">get_encoding</span><span class="p">(</span><span class="s2">&quot;cl100k_base&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora criamos uma palavra de exemplo para tokenizá-la</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">example_word</span> <span class="o">=</span> <span class="s2">&quot;breakdown&quot;</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <section class="section-block-markdown-cell">
      <p>E tokenizamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">tokens</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">example_word</span><span class="p">)</span>',
      '<span class="n">tokens</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '[9137, 2996]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>A palavra foi dividida em 2 <code>token</code>s, o <code>9137</code> e o <code>2996</code>. Vamos ver a quais palavras correspondem.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">word1</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">.</span><span class="n">decode</span><span class="p">([</span><span class="n">tokens</span><span class="p">[</span><span class="mi">0</span><span class="p">]])</span>',
      '<span class="n">word2</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">.</span><span class="n">decode</span><span class="p">([</span><span class="n">tokens</span><span class="p">[</span><span class="mi">1</span><span class="p">]])</span>',
      '<span class="n">word1</span><span class="p">,</span> <span class="n">word2</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          '(&#x27;break&#x27;, &#x27;down&#x27;)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O tokenizador da <code>OpenAI</code> dividiu a palavra <code>breakdown</code> nas palavras <code>break</code> e <code>down</code>. Ou seja, ele dividiu a palavra em 2 mais simples.</p>
      <p>Isto é importante, pois quando se diz que um <code>LLM</code> suporta x <code>token</code>s, não significa que ele suporta x palavras, mas sim que ele suporta x unidades mínimas de representação das palavras.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se você tem um texto e quer ver o número de <code>token</code>s que ele possui para o tokenizador de <code>OpenAI</code>, pode verificar na página <a href="https://platform.openai.com/tokenizer" target="_blank" rel="nofollow noreferrer">Tokenizer</a>, que mostra cada <code>token</code> em uma cor diferente.</p>
      <img decoding="async" onerror="this.parentNode.removeChild(this)" src="https://images.maximofn.com/tokenizer.webp" alt="tokenizer">
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vimos o tokenizador da <code>OpenAI</code>, mas cada <code>LLM</code> poderá usar outro.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como dissemos, os <code>tokens</code> são as unidades mínimas de representação das palavras, então vamos ver quantos tokens distintos tem <code>tiktoken</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">n_vocab</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">.</span><span class="n">n_vocab</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Vocab size: </span><span class="si">{</span><span class="n">n_vocab</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Vocab size: 100277',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver como tokeniza outro tipo de palavras</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="k">def</span><span class="w"> </span><span class="nf">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>',
      '<span class="w">    </span><span class="n">tokens</span> <span class="o">=</span> <span class="n">encoder</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="w">    </span><span class="n">decode_tokens</span> <span class="o">=</span> <span class="p">[]</span>',
      '<span class="w">    </span><span class="k">for</span> <span class="n">token</span> <span class="ow">in</span> <span class="n">tokens</span><span class="p">:</span>',
      '<span class="w">        </span><span class="n">decode_tokens</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">encoder</span><span class="o">.</span><span class="n">decode</span><span class="p">([</span><span class="n">token</span><span class="p">]))</span>',
      '<span class="w">    </span><span class="k">return</span> <span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;dog&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;tomorrow...&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;artificial intelligence&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;Python&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;12/25/2023&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;😊&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Word: dog ==&amp;gt; tokens: [18964], decode_tokens: [&#x27;dog&#x27;]',
          'Word: tomorrow... ==&amp;gt; tokens: [38501, 7924, 1131], decode_tokens: [&#x27;tom&#x27;, &#x27;orrow&#x27;, &#x27;...&#x27;]',
          'Word: artificial intelligence ==&amp;gt; tokens: [472, 16895, 11478], decode_tokens: [&#x27;art&#x27;, &#x27;ificial&#x27;, &#x27; intelligence&#x27;]',
          'Word: Python ==&amp;gt; tokens: [31380], decode_tokens: [&#x27;Python&#x27;]',
          'Word: 12/25/2023 ==&amp;gt; tokens: [717, 14, 914, 14, 2366, 18], decode_tokens: [&#x27;12&#x27;, &#x27;/&#x27;, &#x27;25&#x27;, &#x27;/&#x27;, &#x27;202&#x27;, &#x27;3&#x27;]',
          'Word: 😊 ==&amp;gt; tokens: [76460, 232], decode_tokens: [&#x27;�&#x27;, &#x27;�&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Por último vamos a vê-lo com palavras em outro idioma</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;perro&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;perra&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;mañana...&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;inteligencia artificial&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;Python&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;12/25/2023&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
      '<span class="w"> </span>',
      '<span class="n">word</span> <span class="o">=</span> <span class="s2">&quot;😊&quot;</span>',
      '<span class="n">tokens</span><span class="p">,</span> <span class="n">decode_tokens</span> <span class="o">=</span> <span class="n">encode_decode</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>',
      '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">&quot;Word: </span><span class="si">{</span><span class="n">word</span><span class="si">}</span><span class="s2"> ==&amp;gt; tokens: </span><span class="si">{</span><span class="n">tokens</span><span class="si">}</span><span class="s2">, decode_tokens: </span><span class="si">{</span><span class="n">decode_tokens</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      
      <CodeBlockOutputCell
        text={[
          'Word: perro ==&amp;gt; tokens: [716, 299], decode_tokens: [&#x27;per&#x27;, &#x27;ro&#x27;]',
          'Word: perra ==&amp;gt; tokens: [79, 14210], decode_tokens: [&#x27;p&#x27;, &#x27;erra&#x27;]',
          'Word: mañana... ==&amp;gt; tokens: [1764, 88184, 1131], decode_tokens: [&#x27;ma&#x27;, &#x27;ñana&#x27;, &#x27;...&#x27;]',
          'Word: inteligencia artificial ==&amp;gt; tokens: [396, 39567, 8968, 21075], decode_tokens: [&#x27;int&#x27;, &#x27;elig&#x27;, &#x27;encia&#x27;, &#x27; artificial&#x27;]',
          'Word: Python ==&amp;gt; tokens: [31380], decode_tokens: [&#x27;Python&#x27;]',
          'Word: 12/25/2023 ==&amp;gt; tokens: [717, 14, 914, 14, 2366, 18], decode_tokens: [&#x27;12&#x27;, &#x27;/&#x27;, &#x27;25&#x27;, &#x27;/&#x27;, &#x27;202&#x27;, &#x27;3&#x27;]',
          'Word: 😊 ==&amp;gt; tokens: [76460, 232], decode_tokens: [&#x27;�&#x27;, &#x27;�&#x27;]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver para palavras semelhantes, em espanhol são gerados mais <code>token</code>s do que em inglês, portanto, para um mesmo texto, com um número similar de palavras, o número de <code>token</code>s será maior em espanhol do que em inglês.</p>
      </section>







    </div>

  </section>

</PostLayout>
