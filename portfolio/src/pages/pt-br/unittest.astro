---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'unittest';
const end_url = 'unittest';
const description = 'Refatore sem medo üõ†Ô∏è gra√ßas aos testes unit√°rios. Neste post voc√™ aprender√° a fazer testes unit√°rios em Python com a biblioteca unittest üêç‚úÖ e medir a cobertura de testes üìä para que voc√™ possa fazer todas as modifica√ß√µes que desejar sem medo de quebrar nada üí™';
const keywords = 'unnittest, python, testes unit√°rios, cobertura de testes, biblioteca de testes unittest, conjunto de testes, caso de teste, fixture de teste, executor de teste, resultado de teste, descoberta de teste, carregador de teste, conjunto de testes, teste';
const languaje = 'PT';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/unittest.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=522
    image_height=298
    image_extension=webp
    article_date=2024-11-03+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Bibliotecas-necess%C3%A1rias"><h2>Bibliotecas necess√°rias</h2></a>
      <a class="anchor-link" href="#Primeiros-testes"><h2>Primeiros testes</h2></a>
      <a class="anchor-link" href="#Configura%C3%A7%C3%A3o-dos-testes"><h2>Configura√ß√£o dos testes</h2></a>
      <a class="anchor-link" href="#setUp"><h3><code>setUp</code></h3></a>
      <a class="anchor-link" href="#tearDown"><h3><code>tearDown</code></h3></a>
      <a class="anchor-link" href="#Documenta%C3%A7%C3%A3o-de-erros"><h3>Documenta√ß√£o de erros</h3></a>
      <a class="anchor-link" href="#asserts"><h3><code>assert</code>s</h3></a>
      <a class="anchor-link" href="#skip"><h3><code>skip</code></h3></a>
      <a class="anchor-link" href="#skipIf"><h3><code>skipIf</code></h3></a>
      <a class="anchor-link" href="#falhaEsperada"><h3><code>falhaEsperada</code></h3></a>
      <a class="anchor-link" href="#skipUnless"><h3><code>skipUnless</code></h3></a>
      <a class="anchor-link" href="#Organizar-os-testes"><h2>Organizar os testes</h2></a>
      <a class="anchor-link" href="#Melhores-pr%C3%A1ticas-ao-nomear-os-testes"><h2>Melhores pr√°ticas ao nomear os testes</h2></a>
      <a class="anchor-link" href="#Mocking-de-APIs"><h2>Mocking de APIs</h2></a>
      <a class="anchor-link" href="#Modificar-o-resultado-de-objetos-atrav%C3%A9s-do-patch"><h2>Modificar o resultado de objetos atrav√©s do <code>patch</code></h2></a>
      <a class="anchor-link" href="#Parametrizar-testes-com-subTest"><h2>Parametrizar testes com <code>subTest</code></h2></a>
      <a class="anchor-link" href="#Cobertura-de-teste"><h2>Cobertura de teste</h2></a>
      <a class="anchor-link" href="#Relat%C3%B3rio-de-cobertura"><h3>Relat√≥rio de cobertura</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="unittest-Python">unittest Python<a class="anchor-link" href="#unittest-Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 38" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <blockquote>
      <p>Aviso: Este post foi traduzido para o portugu√™s usando um modelo de tradu√ß√£o autom√°tica. Por favor, me avise se encontrar algum erro.</p>
      </blockquote>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para realizar este post vamos a criar uma pasta chamada <code>testing_python</code> onde vamos criar todo o c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>testing_python',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Dentro dessa pasta vamos criar as pastas <code>src</code> e <code>tests</code> onde vamos colocar o c√≥digo fonte e os testes respectivamente.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>testing_python/src',
      '<span class="o">!</span>mkdir<span class="w"> </span>testing_python/tests',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <h2 id="Bibliotecas-necess%C3%A1rias">Bibliotecas necess√°rias<a class="anchor-link" href="#Bibliotecas-necess%C3%A1rias"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 39" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para fazer os testes vamos usar a biblioteca <code>unittest</code> que vem por padr√£o no Python, mas al√©m disso vamos instalar o <code>coverage</code> para poder ver a cobertura dos testes. A instalamos com Conda</p>
      <div class="highlight"><pre><span></span>conda<span class="w"> </span>install<span class="w"> </span>conda-forge::coverage
      </pre></div>
      <p>O com pip</p>
      <div class="highlight"><pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>coverage
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Primeiros-testes">Primeiros testes<a class="anchor-link" href="#Primeiros-testes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 40" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar um primeiro arquivo chamado <code>calculator.py</code> na pasta <code>src</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def sum(a, b):"</span><span class="w">           </span>&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return a + b"</span><span class="w">        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def substract(a, b):"</span><span class="w">    </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return a - b"</span><span class="w">        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def multiply(a, b):"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return a * b"</span><span class="w">        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def divide(a, b):"</span><span class="w">       </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return a / b"</span><span class="w">        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
















      
      <section class="section-block-markdown-cell">
      <p>Agora criamos um arquivo chamado <code>test_calculator.py</code> na pasta <code>tests</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                  </span>&gt;<span class="w">  </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.calculator import sum, substract, multiply, divide"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestCalculator(unittest.TestCase):"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_sum(self):"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(sum(2, 2), 4)"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_substract(self):"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(substract(2, 1), 1)"</span><span class="w">                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_multiply(self):"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(multiply(2, 3), 6)"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_divide(self):"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(divide(6, 3), 2)"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




















      
      <section class="section-block-markdown-cell">
      <p>Agora para execut√°-lo fazemos <code>python -m unittest tests/test_calculator.py discover -s tests</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....',
          '----------------------------------------------------------------------',
          'Ran 4 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, aparecem quatro pontos pelos dois testes que foram executados e que foram corretos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a modificar o arquivo de teste para provocar um erro, vamos fazer com que ao somar 2 e 2 nos d√™ 5</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                  </span>&gt;<span class="w">  </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.calculator import sum, substract, multiply, divide"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestCalculator(unittest.TestCase):"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_sum(self):"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(sum(2, 2), 5)"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_substract(self):"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(substract(2, 1), 1)"</span><span class="w">                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_multiply(self):"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(multiply(2, 3), 6)"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_divide(self):"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(divide(6, 3), 2)"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




















      
      <section class="section-block-markdown-cell">
      <p>Agora rodamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '...F',
          '======================================================================',
          'FAIL: test_sum (tests.test_calculator.TestCalculator)',
          '----------------------------------------------------------------------',
          'Traceback (most recent call last):',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_calculator.py", line 6, in test_sum',
          '    self.assertEqual(sum(2, 2), 5)',
          'AssertionError: 4 != 5',
          '----------------------------------------------------------------------',
          'Ran 4 tests in 0.000s',
          'FAILED (failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, agora aparece uma <code>F</code> que significa que um teste falhou, al√©m disso, fornecemos a seguinte informa√ß√£o</p>
      <pre><code>FALHA: test_soma (tests.test_calculadora.TestCalculadora)
      ---------------------------------------------------------------------------
      Rastreio de chamada (mais recente por √∫ltimo):
      Arquivo "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_calculator.py", linha 6, em test_sum
      self.assertEqual(sum(2, 2), 5)
      AssertionError: 4 != 5</code></pre>
      <p>Ele nos diz que o teste <code>test_sum</code> falhou na linha 6, que √© a que modificamos, e que o resultado esperado era 5 e o obtido foi 4.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uma coisa que n√£o dissemos e que √© importante, √© que n√£o chamamos os m√©todos <code>test_sum</code> e <code>test_subtract</code> diretamente, eles foram executados automaticamente. Isso se deve ao fato de que os m√©todos que come√ßam com <code>test_</code> s√£o os que s√£o executados automaticamente.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Uma forma mais simples de executar os testes √© usar o comando <code>discover</code> que procura todos os arquivos que come√ßam com <code>test_</code> na pasta que passarmos pelo par√¢metro <code>-s</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro reescrevemos bem os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                  </span>&gt;<span class="w">  </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.calculator import sum, substract, multiply, divide"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestCalculator(unittest.TestCase):"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_sum(self):"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(sum(2, 2), 4)"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_substract(self):"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(substract(2, 1), 1)"</span><span class="w">                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_multiply(self):"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(multiply(2, 3), 6)"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_divide(self):"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(divide(6, 3), 2)"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




















      
      <section class="section-block-markdown-cell">
      <p>E agora passamos os testes atrav√©s de <code>discover</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....',
          '----------------------------------------------------------------------',
          'Ran 4 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ele encontrou os testes e os passou corretamente</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Configura%C3%A7%C3%A3o-dos-testes">Configura√ß√£o dos testes<a class="anchor-link" href="#Configura%C3%A7%C3%A3o-dos-testes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 41" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="setUp"><code>setUp</code><a class="anchor-link" href="#setUp"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 42" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Com a biblioteca <code>unittest</code> podemos configurar os testes, mas para v√™-los, primeiro vamos criar um novo arquivo de c√≥digo chamado <code>bank_account.py</code> na pasta <code>src</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class BankAccount:"</span><span class="w">                           </span>&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def __init__(self, balance=0):"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.balance = balance"</span><span class="w">              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def deposit(self, amount):"</span><span class="w">              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance += amount"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def withdraw(self, amount):"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance -= amount"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def get_balance(self):"</span><span class="w">                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>





















      
      <section class="section-block-markdown-cell">
      <p>Agora adicionamos testes ao novo c√≥digo, criando um arquivo chamado <code>test_bank_account.py</code> na pasta <code>tests</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar primeiro o teste para adicionar dep√≥sito, ou seja, o m√©todo <code>deposit</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                              </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        account = BankAccount()"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = account.deposit(1500)"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>













      
      <section class="section-block-markdown-cell">
      <p>Passamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '.....',
          '----------------------------------------------------------------------',
          'Ran 5 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que h√° cinco pontos, mas n√≥s s√≥ escrevemos um teste, ent√£o usamos a flag <code>-v</code> para ver mais informa√ß√µes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 5 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que <code>discover</code> encontrou os testes <code>test_calculator</code> e <code>test_bank_account</code> e ambos passaram.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a criar os testes para o resto dos m√©todos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                              </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        account = BankAccount(balance=1000)"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = account.deposit(500)"</span><span class="w">   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        account = BankAccount(balance=1000)"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = account.withdraw(200)"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800)"</span><span class="w">   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        account = BankAccount(balance=1000)"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = account.get_balance()"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>























      
      <section class="section-block-markdown-cell">
      <p>Passamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 7 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que passaram satisfatoriamente. Agora vejamos uma coisa, em todos os testes fizemos <code>account = BankAccount(balance=1000)</code> e depois chamamos os m√©todos, isso √© porque cada teste √© executado em um novo objeto, ou seja, os objetos n√£o s√£o compartilhados entre os testes.</p>
      <p>Ent√£o podemos usar o m√©todo <code>setUp</code> para criar um objeto que seja compartilhado entre todos os testes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000)"</span><span class="w">    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800)"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>























      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, criamos a conta no m√©todo <code>setUp</code> e removemos a cria√ß√£o da conta nos testes. Vamos rodar os testes.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 7 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="tearDown"><code>tearDown</code><a class="anchor-link" href="#tearDown"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 43" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Assim como com o m√©todo <code>setUp</code> configuramos o ambiente antes de executar os testes, com o m√©todo <code>tearDown</code> podemos limpar o ambiente ap√≥s executar os testes. Para test√°-lo vamos adicionar ao c√≥digo de <code>bank_account.py</code> que as opera√ß√µes sejam escritas em um arquivo de log.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class BankAccount:"</span><span class="w">                                                                   </span>&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def __init__(self, balance=0, log_file=None):"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.balance = balance"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.log_file = log_file"</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self._log_transaction(\'Account created\')"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def _log_transaction(self, message):"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if self.log_file:"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            with open(self.log_file, \'a\') as file:"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                file.write(f\'{message}\\\\\n\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def deposit(self, amount):"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance += amount"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self._log_transaction(f\'Deposit {amount}, new balance {self.balance}\')"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def withdraw(self, amount):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance -= amount"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self._log_transaction(f\'Withdraw {amount}, new balance {self.balance}\')"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def get_balance(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self._log_transaction(f\'Balance check, balance {self.balance}\')"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>































      
      <section class="section-block-markdown-cell">
      <p>Agora adicionamos um teste ao novo m√©todo <code>_log_transaction</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800)"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        assert os.path.exists(\'test_log.txt\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1000\\\\n\', "</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'])"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









































      
      <section class="section-block-markdown-cell">
      <p>Passamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_transaction_log (test_bank_account.TestBankAccount) ... FAIL',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '======================================================================',
          'FAIL: test_transaction_log (test_bank_account.TestBankAccount)',
          '----------------------------------------------------------------------',
          'Traceback (most recent call last):',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_bank_account.py", line 28, in test_transaction_log',
          '    self.assertEqual(content, [',
          'AssertionError: Lists differ: [\'Acc[224 chars]00\n\', \'Account created\n\', \'Withdraw 200, new[246 chars]0\n\'] != [\'Acc[224 chars]00\n\']',
          'First list contains 10 additional elements.',
          'First extra element 8:',
          '\'Account created\n\'',
          '  [\'Account created\n\',',
          '   \'Deposit 500, new balance 1500\n\',',
          '   \'Account created\n\',',
          '   \'Balance check, balance 1000\n\',',
          '   \'Account created\n\',',
          '   \'Deposit 500, new balance 1500\n\',',
          '   \'Withdraw 200, new balance 1300\n\',',
          '-  \'Balance check, balance 1300\n\',',
          '-  \'Account created\n\',',
          '-  \'Withdraw 200, new balance 800\n\',',
          '-  \'Account created\n\',',
          '-  \'Deposit 500, new balance 1500\n\',',
          '-  \'Account created\n\',',
          '-  \'Balance check, balance 1000\n\',',
          '-  \'Account created\n\',',
          '-  \'Deposit 500, new balance 1500\n\',',
          '-  \'Withdraw 200, new balance 1300\n\',',
          '   \'Balance check, balance 1300\n\']',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'FAILED (failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Os testes sa√≠ram bem, mas vemos que no arquivo de log h√° muitas linhas com o texto <code>Account created</code>, isso √© porque no in√≠cio de cada teste √© executado o m√©todo <code>setUp</code> que cria uma conta, por isso precisamos criar o m√©todo <code>tearDown</code> para eliminar o arquivo de log ap√≥s cada teste.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como √© um arquivo gerado para o teste, n√£o deveria existir ap√≥s executar os testes, ent√£o vamos adicionar o m√©todo <code>tearDown</code> para apagar o arquivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800)"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        assert os.path.exists(\'test_log.txt\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1000\\\\n\', "</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>














































      
      <section class="section-block-markdown-cell">
      <p>Voltamos a passar os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_transaction_log (test_bank_account.TestBankAccount) ... FAIL',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '======================================================================',
          'FAIL: test_transaction_log (test_bank_account.TestBankAccount)',
          '----------------------------------------------------------------------',
          'Traceback (most recent call last):',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_bank_account.py", line 32, in test_transaction_log',
          '    self.assertEqual(content, [',
          'AssertionError: Lists differ: [\'Acc[48 chars]n\', \'Withdraw 200, new balance 1300\n\', \'Balan[21 chars]0\n\'] != [\'Acc[48 chars]n\', \'Account created\n\', \'Balance check, balan[131 chars]0\n\']',
          'First differing element 2:',
          '\'Withdraw 200, new balance 1300\n\'',
          '\'Account created\n\'',
          'Second list contains 4 additional elements.',
          'First extra element 4:',
          '\'Account created\n\'',
          '  [\'Account created\n\',',
          '+  \'Deposit 500, new balance 1500\n\',',
          '+  \'Account created\n\',',
          '+  \'Balance check, balance 1000\n\',',
          '+  \'Account created\n\',',
          '   \'Deposit 500, new balance 1500\n\',',
          '   \'Withdraw 200, new balance 1300\n\',',
          '   \'Balance check, balance 1300\n\']',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'FAILED (failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Mas agora estamos recebendo um erro, porque, ao final de cada teste, temos exclu√≠do o arquivo de log, ent√£o n√£o precisamos verificar se foi escrito tanto texto, mas apenas o do teste que estamos realizando. Ent√£o vamos modificar o teste para que verifique apenas se foi escrito o texto do teste.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800)"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        assert os.path.exists(\'test_log.txt\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










































      
      <section class="section-block-markdown-cell">
      <p>E passamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Documenta%C3%A7%C3%A3o-de-erros">Documenta√ß√£o de erros<a class="anchor-link" href="#Documenta%C3%A7%C3%A3o-de-erros"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 44" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se voc√™ notou, at√© agora nos testes est√°vamos usando <code>assertEqual</code>. Este m√©todo nos d√° a op√ß√£o de escrever uma mensagem de erro quando a condi√ß√£o n√£o √© atendida. Vamos modificar um teste para que ele falhe e ver a mensagem de erro.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 500, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        assert os.path.exists(\'test_log.txt\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










































      
      <section class="section-block-markdown-cell">
      <p>Passamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... FAIL',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '======================================================================',
          'FAIL: test_withdraw (test_bank_account.TestBankAccount)',
          '----------------------------------------------------------------------',
          'Traceback (most recent call last):',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_bank_account.py", line 19, in test_withdraw',
          '    self.assertEqual(new_balace, 500, \'Balance is not correct\')',
          'AssertionError: 800 != 500 : Balance is not correct',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'FAILED (failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, temos a mensagem que escrevemos no teste <code>AssertionError: 800 != 500 : Balance is not correct</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="asserts"><code>assert</code>s<a class="anchor-link" href="#asserts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 45" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>At√© agora usamos os <code>assertEqual</code>, mas h√° mais, como por exemplo o <code>assertTrue</code>. Vamos modificar a linha <code>assert os.path.exists('test_log.txt')</code> para <code>self.assertTrue(os.path.exists('test_log.txt'))</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                     </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










































      
      <section class="section-block-markdown-cell">
      <p>E passamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Alguns outros <code>assert</code>s que podemos usar s√£o:</p>
      <ul>
      <li><code>assertEqual</code></li>
      <li><code>assertNotEqual</code></li>
      <li><code>assertTrue</code></li>
      <li><code>assertFalse</code></li>
      <li><code>assertRaises</code></li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="skip"><code>skip</code><a class="anchor-link" href="#skip"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 46" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Assim como em Python podemos usar <code>pass</code> para n√£o fazer nada, em testes podemos usar <code>skip</code> para saltar um teste. Isso pode ser √∫til quando sabemos que queremos passar algumas provas, mas ainda n√£o temos o c√≥digo para isso.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vou adicionar um teste para verificar se o usu√°rio tem um empr√©stimo, mas como ainda n√£o h√° c√≥digo relacionado aos empr√©stimos, vou pular o teste.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>














































      
      <section class="section-block-markdown-cell">
      <p>Vamos ver o que acontece ao execut√°-lo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_has_loan (test_bank_account.TestBankAccount) ... skipped \'Not implemented yet\'',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 9 tests in 0.001s',
          'OK (skipped=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver <code>test_has_loan (test_bank_account.TestBankAccount) ... skipped 'Not implemented yet'</code> que esse teste foi pulado como quer√≠amos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="skipIf"><code>skipIf</code><a class="anchor-link" href="#skipIf"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 47" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Outra op√ß√£o √© usar <code>skipIf</code> para pular um teste se uma condi√ß√£o for atendida. Vou adicionar uma vari√°vel no in√≠cio chamada <code>server</code> para saber se estamos em um ambiente local ou no servidor, e o teste verificar√° essa vari√°vel, de modo que, se estivermos no servidor, o teste ser√° pulado.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"SERVER = True"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipIf(SERVER, \'Only for local testing\')"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_server(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(SERVER)"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




















































      
      <section class="section-block-markdown-cell">
      <p>Se passarmos nos testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_has_loan (test_bank_account.TestBankAccount) ... skipped \'Not implemented yet\'',
          'test_server (test_bank_account.TestBankAccount) ... skipped \'Only for local testing\'',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 10 tests in 0.001s',
          'OK (skipped=2)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos <code>test_server (test_bank_account.TestBankAccount) ... skipped 'Only for local testing'</code> j√° que, como <code>SERVER = True</code>, o teste foi pulado.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="falhaEsperada"><code>falhaEsperada</code><a class="anchor-link" href="#falhaEsperada"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 48" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Deve ocorrer um erro quando um usu√°rio tenta sacar mais dinheiro do que possui, de modo que com o m√©todo <code>expectedFailure</code> podemos indicar que esperamos que o teste falhe.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"SERVER = True"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipIf(SERVER, \'Only for local testing\')"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_server(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(SERVER)"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.expectedFailure"</span><span class="w">                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_fail(self):"</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(1200)"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Not enough money\')"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>

























































      
      <section class="section-block-markdown-cell">
      <p>Passamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_fail (test_bank_account.TestBankAccount) ... expected failure',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_has_loan (test_bank_account.TestBankAccount) ... skipped \'Not implemented yet\'',
          'test_server (test_bank_account.TestBankAccount) ... skipped \'Only for local testing\'',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 11 tests in 0.001s',
          'OK (skipped=2, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, obtemos <code>test_fail (test_bank_account.TestBankAccount) ... expected failure</code> porque √© um erro que esper√°vamos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="skipUnless"><code>skipUnless</code><a class="anchor-link" href="#skipUnless"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 49" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Assim como antes, pode haver testes que queiramos fazer apenas no ambiente de desenvolvimento, mas nunca no servidor, ou em staging, ou em produ√ß√£o. Para isso, podemos usar <code>skipUnless</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"SERVER = True"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"ENVIRONMENT = \'server\'"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipIf(SERVER, \'Only for local testing\')"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_server(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(SERVER)"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.expectedFailure"</span><span class="w">                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_fail(self):"</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(1200)"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Not enough money\')"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipUnless(ENVIRONMENT == \'dev\', \'Only for dev environment\')"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_environment(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(ENVIRONMENT, \'dev\')"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






























































      
      <section class="section-block-markdown-cell">
      <p>Passamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_environment (test_bank_account.TestBankAccount) ... skipped \'Only for dev environment\'',
          'test_fail (test_bank_account.TestBankAccount) ... expected failure',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_has_loan (test_bank_account.TestBankAccount) ... skipped \'Not implemented yet\'',
          'test_server (test_bank_account.TestBankAccount) ... skipped \'Only for local testing\'',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 12 tests in 0.001s',
          'OK (skipped=3, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtemos <code>test_environment (test_bank_account.TestBankAccount) ... skipped 'Only for dev environment'</code> porque esse teste s√≥ ser√° executado no ambiente de desenvolvimento e assume-se que estamos no servidor.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Organizar-os-testes">Organizar os testes<a class="anchor-link" href="#Organizar-os-testes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 50" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos organizar os testes organizando o que s√£o chamados de <code>test suites</code>. Para isso, vamos criar um arquivo chamado <code>test_suites.py</code> na pasta <code>tests</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">cd</span><span class="w"> </span>tests<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>touch<span class="w"> </span>test_suites.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>E agora geramos duas suites de teste com os testes de <code>test_calculator</code> e <code>test_bank_account</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                              </span>&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from test_calculator import TestCalculator"</span><span class="w">                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def calculator_suite():"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite = unittest.TestSuite()"</span><span class="w">                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestCalculator(\'test_sum\'))"</span><span class="w">               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestCalculator(\'test_substract\'))"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestCalculator(\'test_multiply\'))"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestCalculator(\'test_divide\'))"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return suite"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"if __name__ == \'__main__\':"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    runner = unittest.TextTestRunner()"</span><span class="w">                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    runner.run(calculator_suite())"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




















      
      <section class="section-block-markdown-cell">
      <p>Agora o de <code>test_bank_account</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                              </span>&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from test_bank_account import TestBankAccount"</span><span class="w">               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def bank_account_suite():"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite = unittest.TestSuite()"</span><span class="w">                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_deposit\'))"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_withdraw\'))"</span><span class="w">         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_get_balance\'))"</span><span class="w">      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_transaction_log\'))"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_has_loan\'))"</span><span class="w">         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_server\'))"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_fail\'))"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_environment\'))"</span><span class="w">      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return suite"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"if __name__ == \'__main__\':"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    runner = unittest.TextTestRunner()"</span><span class="w">                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    runner.run(bank_account_suite())"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
























      
      <section class="section-block-markdown-cell">
      <p>Podemos executar apenas os testes de <code>test_calculator</code> com o comando <code>python tests/test_suite_calculator.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>tests/test_suite_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Traceback (most recent call last):',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_suite_calculator.py", line 3, in &lt;module&gt;',
          '    from test_calculator import TestCalculator',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_calculator.py", line 2, in &lt;module&gt;',
          '    from src.calculator import sum, substract, multiply, divide',
          'ModuleNotFoundError: No module named \'src\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que n√£o encontra o m√≥dulo <code>src</code> de <code>test_calculator.py</code>, isso √© porque ele n√£o est√° no caminho, ent√£o vamos adicion√°-lo.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">PYTHONPATH</span><span class="o">=</span>.<span class="w"> </span>python<span class="w"> </span>tests/test_suite_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....',
          '----------------------------------------------------------------------',
          'Ran 4 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que s√≥ passou os testes de <code>test_calculator</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos passar agora os de <code>test_bank_account.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">PYTHONPATH</span><span class="o">=</span>.<span class="w"> </span>python<span class="w"> </span>tests/test_suite_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....ssxs',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK (skipped=3, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>E aqui vemos que passa os testes de <code>test_bank_account</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>√â preciso diferenciar do que faz√≠amos no in√≠cio, antes de usar <code>discover</code>, quando execut√°vamos <code>!cd testing_python &amp;&amp; python -m unittest tests/test_calculator.py</code>. Porque em <code>test_calculator.py</code> podemos escrever todos os poss√≠veis testes para <code>calculator.py</code>, mas com as <code>suite</code>s executamos os testes que quisermos. Podemos ter v√°rias <code>suite</code>s para executar os testes que quisermos de <code>test_calculator.py</code> e <code>test_bank_account.py</code>.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Melhores-pr%C3%A1ticas-ao-nomear-os-testes">Melhores pr√°ticas ao nomear os testes<a class="anchor-link" href="#Melhores-pr%C3%A1ticas-ao-nomear-os-testes"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 51" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Na hora de nomear os testes, √© bom seguir as seguintes diretrizes:</p>
      <ul>
      <li>Uma classe de teste para cada classe de c√≥digo</li>
      <li>Todos os testes devem come√ßar com <code>test_</code> para saber que √© um c√≥digo</li>
      <li>A seguir deve estar o nome da fun√ß√£o ou m√©todo que est√° sendo testado</li>
      <li>A seguir deve vir o cen√°rio do teste, pois um m√©todo ou fun√ß√£o pode ter v√°rios cen√°rios de teste. Por exemplo, com todos os poss√≠veis valores de entrada, com valores limite, com valores incorretos, etc.</li>
      <li>Por √∫ltimo, deve-se adicionar o resultado esperado</li>
      </ul>
      <p>Portanto, um teste deve ter o seguinte formato <code>test_&lt;nome_fun√ß√£o&gt;_&lt;cen√°rio&gt;_&lt;resultado_esperado&gt;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Mocking-de-APIs">Mocking de APIs<a class="anchor-link" href="#Mocking-de-APIs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 52" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que nosso c√≥digo chama uma API externa e queremos fazer testes do nosso c√≥digo sem depender da API externa. Para isso, podemos usar <code>unittest.mock</code>, que vem por padr√£o no Python.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primeiro vamos a criar um arquivo chamado <code>api.py</code> na pasta <code>src</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import requests"</span><span class="w">                                              </span>&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def get_api():"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    url = \'https://jsonplaceholder.typicode.com/posts/1\'"</span><span class="w">    </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    try:"</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        response = requests.get(url)"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        response.raise_for_status()"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        data = response.json()"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        print(data)"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return data"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    except requests.exceptions.RequestException as e:"</span><span class="w">       </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        print(f\'error: {e}\')"</span><span class="w">                                </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return None"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"if __name__ == \'__main__\':"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    get_api()"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>





















      
      <section class="section-block-markdown-cell">
      <p>Vamos a executar o arquivo para ver o que ele retorna.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python/src<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'userId\': 1, \'id\': 1, \'title\': \'sunt aut facere repellat provident occaecati excepturi optio reprehenderit\', \'body\': \'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Agora criamos o teste</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                              </span>&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.api import get_api"</span><span class="w">                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestApi(unittest.TestCase):"</span><span class="w">                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_api(self):"</span><span class="w">                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        data = get_api()"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsNotNone(data)"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsInstance(data, dict)"</span><span class="w">                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'userId\', data)"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'id\', data)"</span><span class="w">                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'title\', data)"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'body\', data)"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(data[\'userId\'], 1)"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(data[\'id\'], 1)"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>



















      
      <section class="section-block-markdown-cell">
      <p>Passamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>tests/test_api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'userId\': 1, \'id\': 1, \'title\': \'sunt aut facere repellat provident occaecati excepturi optio reprehenderit\', \'body\': \'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto\'}',
          '.',
          '----------------------------------------------------------------------',
          'Ran 1 test in 0.074s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a passar os testes de <code>bank_account</code> para ver quanto demora</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">PYTHONPATH</span><span class="o">=</span>.<span class="w"> </span>python<span class="w"> </span>tests/test_suite_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....ssxs',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK (skipped=3, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos 8 testes demoraram 0.001 segundos, enquanto 1 √∫nico teste da API demorou 0.074 segundos. Isso pode fazer com que um c√≥digo com muitas chamadas a uma API demore muito para executar os testes. Al√©m disso, corremos o risco de que se a API mudar e n√£o retornar o que esperamos, os testes falhar√£o, mesmo que nosso c√≥digo esteja correto. Ent√£o, para isso, as APIs s√£o mockadas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver como fazer isso.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                              </span>&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.api import get_api"</span><span class="w">                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from unittest.mock import patch"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestApi(unittest.TestCase):"</span><span class="w">                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @patch(\'src.api.requests.get\')"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_api(self, mock_get):"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_get.return_value.status_code = 200"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_get.return_value.json.return_value = {"</span><span class="w">         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'userId\': 1,"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'id\': 1,"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'title\': \'title\',"</span><span class="w">                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'body\': \'body\'"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        }"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        data = get_api()"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsNotNone(data)"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsInstance(data, dict)"</span><span class="w">                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'userId\', data)"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'id\', data)"</span><span class="w">                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'title\', data)"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'body\', data)"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(data[\'userId\'], 1)"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(data[\'id\'], 1)"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        "</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_get.assert_called_once_with(\'https://jsonplaceholder.typicode.com/posts/1\')"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






























      
      <section class="section-block-markdown-cell">
      <p>O que fizemos foi</p>
      <ul>
      <li>Importar <code>patch</code> de <code>unittest.mock</code>.</li>
      <li>N√≥s colocamos um decorador na fun√ß√£o <code>test_get_data</code> e passamos como par√¢metro ao decorador a fun√ß√£o que queremos mockar.</li>
      <li>Criamos um objeto <code>mock_get</code> que vai substituir a fun√ß√£o original com o m√©todo <code>return_value</code>, que √© o valor que a fun√ß√£o mockeada vai retornar.</li>
      <li>Quando <code>get_api()</code> for chamada, em vez de executar a fun√ß√£o original, ser√° obtido em <code>data</code> o valor que foi mockeado em <code>return_value</code></li>
      <li>Por √∫ltimo, adicionamos a verifica√ß√£o de que √© poss√≠vel chamar a <code>URL</code> da API</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>tests/test_api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'userId\': 1, \'id\': 1, \'title\': \'title\', \'body\': \'body\'}',
          '.',
          '----------------------------------------------------------------------',
          'Ran 1 test in 0.001s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, agora leva apenas 0,002 segundos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Modificar-o-resultado-de-objetos-atrav%C3%A9s-do-patch">Modificar o resultado de objetos atrav√©s do <code>patch</code><a class="anchor-link" href="#Modificar-o-resultado-de-objetos-atrav%C3%A9s-do-patch"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 53" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que queremos modificar o m√©todo de sacar dinheiro para que s√≥ possa ser feito em um intervalo de hor√°rios.</p>
      <p>Primeiro modificamos a fun√ß√£o de retirar dinheiro</p>
      <div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">sacar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>
      <span class="n">agora</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
      <span class="n">se</span> <span class="n">now</span><span class="o">.</span><span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">7</span> <span class="n">ou</span> <span class="n">now</span><span class="o">.</span><span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">:</span>
      <span class="nb">print</span><span class="p">(</span><span class="s1">'Fora do hor√°rio comercial'</span><span class="p">)</span>
      <span class="n">retorne</span> <span class="kc">None</span>
      <span class="k">if</span> <span class="n">amount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">balance</span> <span class="o">-=</span> <span class="n">amount</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">_log_transaction</span><span class="p">(</span><span class="sa">f</span><span class="s1">'Saque </span><span class="si">{opening_brace}</span><span class="n">amount</span><span class="si">{closing_brace}</span><span class="s1">, novo saldo </span><span class="si">{opening_brace}</span><span class="bp">self</span><span class="o">.</span><span class="n">balance</span><span class="si">{closing_brace}</span><span class="s1">'</span><span class="p">)</span>
      <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">balance</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from datetime import datetime"</span><span class="w">                                                        </span>&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class BankAccount:"</span><span class="w">                                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def __init__(self, balance=0, log_file=None):"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.balance = balance"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.log_file = log_file"</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self._log_transaction(\'Account created\')"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def _log_transaction(self, message):"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if self.log_file:"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            with open(self.log_file, \'a\') as file:"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                file.write(f\'{message}\\\\\n\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def deposit(self, amount):"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance += amount"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self._log_transaction(f\'Deposit {amount}, new balance {self.balance}\')"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def withdraw(self, amount):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        now = datetime.now()"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if now.hour &lt; 7 or now.hour &gt; 18:"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            print(\'Out of hours\')"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            return None"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance -= amount"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self._log_transaction(f\'Withdraw {amount}, new balance {self.balance}\')"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def get_balance(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self._log_transaction(f\'Balance check, balance {self.balance}\')"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>





































      
      <section class="section-block-markdown-cell">
      <p>Agora precisamos poder testar o saque de dinheiro em diferentes hor√°rios, mas n√£o podemos estar mudando a hora do sistema, nem podemos esperar at√© que seja uma hora espec√≠fica para realizar o teste. Para isso, podemos usar <code>patch</code> para modificar o resultado de <code>datetime.now()</code></p>
      <div class="highlight"><pre><span></span><span class="nd">@patch</span><span class="p">(</span><span class="s1">'src.bank_account.datetime.now'</span><span class="p">)</span>
      <span class="k">def</span> <span class="nf">test_retirada_durante_horas_de_trabalho</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mock_now</span><span class="p">):</span>
      <span class="n">mock_now</span><span class="o">.</span><span class="n">return_value</span><span class="o">.</span><span class="n">hour</span> <span class="o">=</span> <span class="mi">10</span>
      <span class="n">new_balance</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">account</span><span class="o">.</span><span class="n">withdraw</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">new_balance</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="s1">'O saldo n√£o est√° correto'</span><span class="p">)</span>
      
      <span class="nd">@patch</span><span class="p">(</span><span class="s1">'src.bank_account.datetime.now'</span><span class="p">)</span>
      <span class="k">def</span> <span class="nf">testar_retirada_fora_do_hor√°rio_de_trabalho</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mock_agora</span><span class="p">):</span>
      <span class="n">mock_now</span><span class="o">.</span><span class="n">return_value</span><span class="o">.</span><span class="n">hour</span> <span class="o">=</span> <span class="mi">20</span>
      <span class="n">new_balance</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">account</span><span class="o">.</span><span class="n">withdraw</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">assertIsNone</span><span class="p">(</span><span class="n">new_balance</span><span class="p">,</span> <span class="s1">'O saldo n√£o est√° correto'</span><span class="p">)</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from unittest.mock import patch"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"SERVER = True"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"ENVIRONMENT = \'server\'"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @patch(\'src.bank_account.datetime.now\')"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw_during_working_hours(self, mock_now):"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_now.return_value.hour = 10"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @patch(\'src.bank_account.datetime.now\')"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw_during_non_working_hours(self, mock_now):"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_now.return_value.hour = 20"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsNone(new_balace, \'Balance is not correct\')"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipIf(SERVER, \'Only for local testing\')"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_server(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(SERVER)"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.expectedFailure"</span><span class="w">                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_fail(self):"</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(1200)"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Not enough money\')"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipUnless(ENVIRONMENT == \'dev\', \'Only for dev environment\')"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_environment(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(ENVIRONMENT, \'dev\')"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











































































      
      <section class="section-block-markdown-cell">
      <p>Passamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">PYTHONPATH</span><span class="o">=</span>.<span class="w"> </span>python<span class="w"> </span>tests/test_suite_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....ssxs',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK (skipped=3, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Parametrizar-testes-com-subTest">Parametrizar testes com <code>subTest</code><a class="anchor-link" href="#Parametrizar-testes-com-subTest"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 54" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Suponhamos que queremos fazer v√°rias testes de sacar dinheiro para diferentes valores, poder√≠amos escrever um teste para cada valor de dinheiro que queremos testar, mas seria repetir c√≥digo. Para isso podemos usar <code>subTest</code> que nos permite fazer v√°rias testes com um √∫nico teste.</p>
      <p>O que fazemos √© criar um dicion√°rio com os diferentes valores que queremos testar e o resultado esperado, e depois com um loop <code>for</code> e <code>subTest</code> realizamos os testes. Assim ficaria o teste do m√©todo <code>withdraw</code></p>
      <div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">test_withdraw</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
      <span class="err">```</span><span class="n">markdown</span>
      <span class="n">test_cases</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
      </pre></div>
      <p>test_200: {opening_brace}
      'amount': 200,
      'esperado': 800
      {closing_brace},
      test_400: {opening_brace}
      'amount': 400,
      'esperado': 600
      {closing_brace},
      test_600: {opening_brace}
      'amount': 600,
      'esperado': 400
      {closing_brace},
      test_800: {opening_brace}
      'amount': 800,
      'esperado': 200
      {closing_brace},
      test_1000: {opening_brace}
      'amount': 1000,
      'esperado': 0
      {closing_brace}
      {closing_brace}</p>
      <p>para nome_do_teste, caso_de_teste in casos_de_teste.items():
      com self.subTest(test_name):
      self.account = BankAccount(balance=1000, log_file='test_log.txt')
      new_balance = self.account.withdraw(test_case['amount'])
      self.assertEqual(new_balance, test_case['expected'], 'O saldo n√£o est√° correto')</p>
      <pre><code></code></pre>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from unittest.mock import patch"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"SERVER = True"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"ENVIRONMENT = \'server\'"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        test_cases = {"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'test_200\': {"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'amount\': 200,"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'expected\': 800"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            },"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'test_400\': {"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'amount\': 400,"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'expected\': 600"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            },"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'test_600\': {"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'amount\': 600,"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'expected\': 400"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            },"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'test_800\': {"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'amount\': 800,"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'expected\': 200"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            },"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'test_1000\': {"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'amount\': 1000,"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'expected\': 0"</span><span class="w">                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            }"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        }"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        for test_case, values in test_cases.items():"</span><span class="w">                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            with self.subTest(test_case=test_case):"</span><span class="w">                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                new_balace = self.account.withdraw(values[\'amount\'])"</span><span class="w">                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                self.assertEqual(new_balace, values[\'expected\'], \'Balance is not correct\')"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @patch(\'src.bank_account.datetime.now\')"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw_during_working_hours(self, mock_now):"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_now.return_value.hour = 10"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @patch(\'src.bank_account.datetime.now\')"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw_during_non_working_hours(self, mock_now):"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_now.return_value.hour = 20"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsNone(new_balace, \'Balance is not correct\')"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipIf(SERVER, \'Only for local testing\')"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_server(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(SERVER)"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.expectedFailure"</span><span class="w">                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_fail(self):"</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(1200)"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Not enough money\')"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipUnless(ENVIRONMENT == \'dev\', \'Only for dev environment\')"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_environment(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(ENVIRONMENT, \'dev\')"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




































































































      
      <section class="section-block-markdown-cell">
      <p>Passamos os testes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">PYTHONPATH</span><span class="o">=</span>.<span class="w"> </span>python<span class="w"> </span>tests/test_suite_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....ssxs',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK (skipped=3, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Cobertura-de-teste">Cobertura de teste<a class="anchor-link" href="#Cobertura-de-teste"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 55" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver a cobertura dos testes que temos, pois mesmo pensando que testamos tudo, pode haver partes do c√≥digo que n√£o foram testadas. Para isso, vamos usar a biblioteca <code>coverage</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>coverage<span class="w"> </span>run<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....',
          '----------------------------------------------------------------------',
          'Ran 4 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, apenas passamos os testes de <code>test_calculator</code>, mas ainda n√£o sabemos a cobertura.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Relat%C3%B3rio-de-cobertura">Relat√≥rio de cobertura<a class="anchor-link" href="#Relat%C3%B3rio-de-cobertura"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 56" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Depois de executar <code>coverage</code>, podemos solicitar um relat√≥rio da cobertura dos testes com o comando <code>coverage report</code>.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>coverage<span class="w"> </span>report',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Name                       Stmts   Miss  Cover',
          '----------------------------------------------',
          'src/calculator.py              8      0   100%',
          'tests/test_calculator.py      11      0   100%',
          '----------------------------------------------',
          'TOTAL                         19      0   100% ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O pedi-lo por meio de um arquivo HTML com o comando <code>coverage html</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>coverage<span class="w"> </span>html',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Wrote HTML report to ]8;;file:///home/wallabot/Documentos/web/portafolio/posts/testing_python/htmlcov/index.htmlhtmlcov/index.html]8;;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Cria-se um arquivo <code>index.html</code> na pasta <code>htmlcov</code> que podemos abrir no navegador e ver a cobertura dos testes.</p>
      </section>
      






    </div>

  </section>

</PostLayout>
