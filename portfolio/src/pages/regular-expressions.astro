---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Regular expressions';
const end_url = 'regular-expressions';
const description = 'Explora el poder y la precisión de las expresiones regulares, herramientas esenciales en la programación que permiten describir patrones en cadenas de texto para una búsqueda, extracción y manipulación eficiente. Este post desentraña desde los fundamentos hasta técnicas avanzadas de regex, ofreciendo una guía práctica con ejemplos claros para dominar su uso en el análisis y manejo de datos. Prepárate para transformar tu enfoque hacia el procesamiento de texto, desbloqueando nuevas posibilidades en tus proyectos de desarrollo';
const keywords = 'python, regex, expresiones regulares, programación, análisis de datos, procesamiento de texto, gestión de datos';
const languaje = 'ES';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/regular-expresions.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1280
    image_height=720
    image_extension=webp
    article_date=2024-02-10+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#M%C3%A9todos"><h2>Métodos</h2></a>
      <a class="anchor-link" href="#Findall"><h3>Findall</h3></a>
      <a class="anchor-link" href="#Search"><h3>Search</h3></a>
      <a class="anchor-link" href="#Match"><h3>Match</h3></a>
      <a class="anchor-link" href="#Span"><h3>Span</h3></a>
      <a class="anchor-link" href="#Group"><h3>Group</h3></a>
      <a class="anchor-link" href="#Split"><h3>Split</h3></a>
      <a class="anchor-link" href="#Sub"><h3>Sub</h3></a>
      <a class="anchor-link" href="#Patrones"><h2>Patrones</h2></a>
      <a class="anchor-link" href="#El-caracter-."><h3>El caracter <code>.</code></h3></a>
      <a class="anchor-link" href="#Las-clases-predefinidas-y-construidas"><h3>Las clases predefinidas y construidas</h3></a>
      <a class="anchor-link" href="#D%C3%ADgito"><h4>Dígito</h4></a>
      <a class="anchor-link" href="#Letra"><h4>Letra</h4></a>
      <a class="anchor-link" href="#Espacios"><h4>Espacios</h4></a>
      <a class="anchor-link" href="#Rangos"><h4>Rangos</h4></a>
      <a class="anchor-link" href="#Corchete-%5B-y-corchete-%5D"><h4>Corchete <code>[</code> y corchete <code>]</code></h4></a>
      <a class="anchor-link" href="#Los-delimitadores-+,-*,-?"><h3>Los delimitadores <code>+</code>, <code>*</code>, <code>?</code></h3></a>
      <a class="anchor-link" href="#Star-*-(ninguno-o-todos)"><h4>Star <code>*</code> (ninguno o todos)</h4></a>
      <a class="anchor-link" href="#Plus-+-(uno-o-m%C3%A1s)"><h4>Plus <code>+</code> (uno o más)</h4></a>
      <a class="anchor-link" href="#Optional-?-(cero-o-uno)"><h4>Optional <code>?</code> (cero o uno)</h4></a>
      <a class="anchor-link" href="#Contadores"><h3>Contadores</h3></a>
      <a class="anchor-link" href="#Clases"><h3>Clases</h3></a>
      <a class="anchor-link" href="#El-delimitador-?-como-delimitador-r%C3%A1pido"><h3>El delimitador <code>?</code> como delimitador rápido</h3></a>
      <a class="anchor-link" href="#El-negador"><h3>El negador</h3></a>
      <a class="anchor-link" href="#El-principio-%5E-y-final-de-l%C3%ADnea-$"><h3>El principio <code>^</code> y final de línea <code>$</code></h3></a>
      <a class="anchor-link" href="#Ejemplos-pr%C3%A1cticos"><h2>Ejemplos prácticos</h2></a>
      <a class="anchor-link" href="#Logs"><h3>Logs</h3></a>
      <a class="anchor-link" href="#N%C3%BAmero-de-tel%C3%A9fono"><h3>Número de teléfono</h3></a>
      <a class="anchor-link" href="#URLs"><h3>URLs</h3></a>
      <a class="anchor-link" href="#Mails"><h3>Mails</h3></a>
      <a class="anchor-link" href="#Localizaciones"><h3>Localizaciones</h3></a>
      <a class="anchor-link" href="#Nombres"><h3>Nombres</h3></a>
      <a class="anchor-link" href="#B%C3%BAsqueda-y-remplazo"><h2>Búsqueda y remplazo</h2></a>
      <a class="anchor-link" href="#Cheatsheet"><h2>Cheatsheet</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Expresiones-regulares">Expresiones regulares<a class="anchor-link" href="#Expresiones-regulares"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 0" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="kn">import</span> <span class="nn">re</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <h2 id="M%C3%A9todos">Métodos<a class="anchor-link" href="#M%C3%A9todos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Findall">Findall<a class="anchor-link" href="#Findall"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con el método <code>findall()</code> podemos encontrar todas las coincidencias de un patrón en un string</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="kn">import</span> <span class="nn">re</span>',
          '</span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"Hola, soy"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Hola, soy\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Search">Search<a class="anchor-link" href="#Search"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Pero si queremos encontrar la posición donde se encuentra un patrón, podemos usar el método <code>search()</code> para buscar un patrón en un string. Este método devuelve un objeto de tipo Match si encuentra una coincidencia, y si no devuelve None.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">search</span><span class="p">(</span><span class="s2">"soy"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;re.Match object; span=(6, 9), match=\'soy\'&gt;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Match">Match<a class="anchor-link" href="#Match"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>También podemos usar el método <code>match()</code> que busca el patrón <strong>al principio</strong> del string.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">"soy"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '&lt;re.Match object; span=(0, 4), match=\'Hola\'&gt;',
          'None',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Span">Span<a class="anchor-link" href="#Span"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos obtener la posición de la coincidencia, podemos usar el método <code>span()</code> que devuelve una tupla con la posición inicial y final de la coincidencia.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span><span class="o">.</span><span class="n">span</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '(0, 4)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Group">Group<a class="anchor-link" href="#Group"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Sabiendo la posición de la coincidencia, podemos usar el método <code>group()</code> para obtener la subcadena que coincide con el patrón.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span><span class="o">.</span><span class="n">group</span><span class="p">())</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>También podríamos usar el inicio y el final de la coincidencia para hacer un slice del string.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">start</span><span class="p">,</span> <span class="n">end</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">"Hola"</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span><span class="o">.</span><span class="n">span</span><span class="p">()</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">string</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">end</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Split">Split<a class="anchor-link" href="#Split"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con el método <code>split()</code> podemos dividir un string en una lista de subcadenas usando un patrón como separador.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">split</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">"soy"</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">split</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Hola, \', \' un string\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se ha dividido la frase en dos strings usando "soy" como separador.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Sub">Sub<a class="anchor-link" href="#Sub"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con el método <code>sub()</code> podemos reemplazar todas las coincidencias de un patrón por otra subcadena.</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">sub</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">"soy"</span><span class="p">,</span> <span class="s2">"eres"</span><span class="p">,</span> <span class="n">string</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">sub</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, eres un string',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ha reemplazado todas las coincidencias de "soy" por "eres".</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Patrones">Patrones<a class="anchor-link" href="#Patrones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="El-caracter-.">El caracter <code>.</code><a class="anchor-link" href="#El-caracter-."><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con el caracter <code>.</code> podemos buscar cualquier caracter, cualquier caracter que haya en nuestro string será encontrado</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"."</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'H\', \'o\', \'l\', \'a\', \',\', \' \', \'s\', \'o\', \'y\', \' \', \'u\', \'n\', \' \', \'s\', \'t\', \'r\', \'i\', \'n\', \'g\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si por ejemplo queremos secuencias de dos caracteres buscaríamos con dos <code>.</code>s seguidos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"Hola, soy un string"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"Hola, soy un string2"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">".."</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">".."</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Ho\', \'la\', \', \', \'so\', \'y \', \'un\', \' s\', \'tr\', \'in\']',
          '[\'Ho\', \'la\', \', \', \'so\', \'y \', \'un\', \' s\', \'tr\', \'in\', \'g2\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver <code>string1</code> tiene un numero impar de caracteres, por lo que la última <code>g</code> no la coge, si embargo <code>string2</code> tiene un número par de caracteres, por lo que coge todos los caracteres</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver esto de otra forma, vamos a cambiar cada secuencia de tres caracteres por un símbolo de <code>$</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">string1</span><span class="p">)</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">"..."</span><span class="p">,</span> <span class="s2">"$  "</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola, soy un string',
          '$  $  $  $  $  $  g',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>He impreso dos espacios después de cada <code>$</code> para que se vea el cambio, se puede ver como el último caracter no lo convierte</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Las-clases-predefinidas-y-construidas">Las clases predefinidas y construidas<a class="anchor-link" href="#Las-clases-predefinidas-y-construidas"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="D%C3%ADgito">Dígito<a class="anchor-link" href="#D%C3%ADgito"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos encontrar los dígitos necesitamos usar <code>\d</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'1\', \'2\', \'3\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que antes, si por ejemplo queremos dos dígitos, ponemos <code>\d</code> dos veces</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d\d"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'12\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Letra">Letra<a class="anchor-link" href="#Letra"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos encontrar letras necesitamos usar <code>\w</code>. Se entiende por <code>word</code> todas las letras de la <code>a</code> a la <code>z</code>, de la <code>A</code> a la <code>Z</code>, los números de <code>0</code> al <code>9</code> y el <code>_</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un_string con, 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\w"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'H\', \'o\', \'l\', \'a\', \'s\', \'o\', \'y\', \'u\', \'n\', \'_\', \'s\', \'t\', \'r\', \'i\', \'n\', \'g\', \'c\', \'o\', \'n\', \'1\', \'2\', \'3\', \'d\', \'i\', \'g\', \'i\', \'t\', \'o\', \'s\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos coge todo menos los espacios y la coma</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Espacios">Espacios<a class="anchor-link" href="#Espacios"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos encontrar espacios necesitamos <code>\s</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un_string con, 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">"\s"</span><span class="p">,</span> <span class="s2">"*"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola,*soy*un_string*con,*123*digitos',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Las expresiones regulares considera los saltos de línea como espacios</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"""Hola, soy un string </span>',
          '<span class="s2">con un salto de línea"""</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">"\s"</span><span class="p">,</span> <span class="s2">"*"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Hola,*soy*un*string**con*un*salto*de*línea',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Rangos">Rangos<a class="anchor-link" href="#Rangos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos buscar un rango usamos <code>[]</code>, por ejemplo, si queremos los números del 4 al 8 usamos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"1234567890"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[4-8]"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'4\', \'5\', \'6\', \'7\', \'8\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ampliar el rango de búsqueda</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"1234567890"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[2-57-9]"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'2\', \'3\', \'4\', \'5\', \'7\', \'8\', \'9\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si además queremos encontrar un caracter en concreto ponemos el carcacter seguido de <code>\</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"1234567890."</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[2-57-9\.]"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'2\', \'3\', \'4\', \'5\', \'7\', \'8\', \'9\', \'.\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Corchete-%5B-y-corchete-%5D">Corchete <code>[</code> y corchete <code>]</code><a class="anchor-link" href="#Corchete-%5B-y-corchete-%5D"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como hemos visto, si queremos encontrar rangos usamos <code>[]</code>, pero ¿qué pasa si queremos encontrar solo el <code>[</code> o el <code>]</code>? Para ello tenemos que usar <code>\[</code> y <code>\]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"[1234567890]"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\["</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\]"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'[\']',
          '[\']\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Los-delimitadores-+,-*,-?">Los delimitadores <code>+</code>, <code>*</code>, <code>?</code><a class="anchor-link" href="#Los-delimitadores-+,-*,-?"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Star-*-(ninguno-o-todos)">Star <code>*</code> (ninguno o todos)<a class="anchor-link" href="#Star-*-(ninguno-o-todos)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con el delimitador <code>*</code> se indica que quieres que te busque ninguno o todos, no uno a uno como antes</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 12 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d*"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'1\', \'2\', \'1\', \'2\', \'3\']',
          '[\'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'12\', \'\', \'123\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, al poner el <code>*</code> ha encontrado todas las posiciones en las que hay cero caracteres o todos los caracteres</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h4 id="Plus-+-(uno-o-m%C3%A1s)">Plus <code>+</code> (uno o más)<a class="anchor-link" href="#Plus-+-(uno-o-m%C3%A1s)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 19" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con el delimitador <code>+</code> se indica que quieres que te busque uno o más</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'1\', \'12\', \'123\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h4 id="Optional-?-(cero-o-uno)">Optional <code>?</code> (cero o uno)<a class="anchor-link" href="#Optional-?-(cero-o-uno)"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 20" src={svg_paths.link_svg_path}/></a></h4>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con el delimitador <code>?</code> se indica que quieres que te busque cero o uno</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s2">"\d?"</span><span class="p">,</span> <span class="s2">"-"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '-H-o-l-a-,- -s-o-y- -u-n- -s-t-r-i-n-g- -c-o-n- -- --- ---- -d-i-g-i-t-o-s-',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Contadores">Contadores<a class="anchor-link" href="#Contadores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 21" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Cuando queremos encontrar algo que aparezca x veces usamos los contadores mediante las llaves <code>{opening_brace}{closing_brace}</code>. Por ejemplo, si queremos encontrar una secuencia en la que al menos haya dos dígitos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 1234 1234digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d</span><span class="si">{2}</span><span class="s2">"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'12\', \'12\', \'12\', \'34\', \'12\', \'34\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver ha encontrado las secuencias <code>12</code> y <code>34</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Los contadores aceptan una cota superior e inferior <code>{opening_brace}inf, sup{closing_brace}</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 1234 1234digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,5}"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'12\', \'123\', \'1234\', \'1234\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si no se define la cota superior, significa que se quiere como mínimo la cantidad de elementos que se ha indicado, pero sin límite superior</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 1234 12345464168415641646451563416 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'12\', \'123\', \'1234\', \'12345464168415641646451563416\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si queremos usar la notación de cota superior e inferior, pero queremos un número fijo, se tiene que poner dicho número en las dos cotas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string</span> <span class="o">=</span> <span class="s2">"Hola, soy un string con 1 12 123 1234 12345464168415641646451563416 digitos"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,3}"</span><span class="p">,</span> <span class="n">string</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'12\', \'123\', \'123\', \'123\', \'454\', \'641\', \'684\', \'156\', \'416\', \'464\', \'515\', \'634\', \'16\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Clases">Clases<a class="anchor-link" href="#Clases"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 22" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se pueden crear clases mediante corchetes <code>[]</code>. En realidad vimos que este servía para los rangos, pero, una vez que se define lo que se quiere que haya dentro, se puede considerar como una clase y operar con el</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Por ejemplo, supongamos que tenemos un número de teléfono, que puede darse de las siguientes maneras</p>
      <ul>
      <li>666-66-66-66</li>
      <li>666-666-666</li>
      <li>666 666 666</li>
      <li>666 66 66 66</li>
      <li>666666666</li>
      </ul>
      <p>Hay muchas maneras de dar un número, así que vamos a ver cómo crear una clase para definir el delimitador</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero vamos a decir que busque todas las secuencias de números en las que haya como mínimo dos números</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666\', \'66\', \'66\', \'66\']',
          'string2: 666-666-666 --&gt; [\'666\', \'666\', \'666\']',
          'string3: 666 66 66 66 --&gt; [\'666\', \'66\', \'66\', \'66\']',
          'string4: 666 666 666 --&gt; [\'666\', \'666\', \'666\']',
          'string5: 666666666 --&gt; [\'666666666\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora definimos que encuentre el separador como un <code>-</code> o un espacio</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'-\', \'-\', \'-\']',
          'string2: 666-666-666 --&gt; [\'-\', \'-\']',
          'string3: 666 66 66 66 --&gt; [\' \', \' \', \' \']',
          'string4: 666 666 666 --&gt; [\' \', \' \']',
          'string5: 666666666 --&gt; []',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se ve en el último string no ha encontrado, por lo que añadimos un <code>?</code> para que encuentre cuando haya cero o uno</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]?"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]?"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]?"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]?"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[-\s]?"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'\', \'\', \'\', \'-\', \'\', \'\', \'-\', \'\', \'\', \'-\', \'\', \'\', \'\']',
          'string2: 666-666-666 --&gt; [\'\', \'\', \'\', \'-\', \'\', \'\', \'\', \'-\', \'\', \'\', \'\', \'\']',
          'string3: 666 66 66 66 --&gt; [\'\', \'\', \'\', \' \', \'\', \'\', \' \', \'\', \'\', \' \', \'\', \'\', \'\']',
          'string4: 666 666 666 --&gt; [\'\', \'\', \'\', \' \', \'\', \'\', \'\', \' \', \'\', \'\', \'\', \'\']',
          'string5: 666666666 --&gt; [\'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\', \'\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora buscamos que esté todo junto</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666-66-66-66\']',
          'string2: 666-666-666 --&gt; []',
          'string3: 666 66 66 66 --&gt; [\'666 66 66 66\']',
          'string4: 666 666 666 --&gt; []',
          'string5: 666666666 --&gt; [\'666666666\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos en el <code>string2</code> y <code>string4</code>, no encuentra nada. Hemos puesto el filtro <code>\d{opening_brace}2,{closing_brace}[\-\s]?</code> 4 veces, es decir queremos una secuencia de al menos dos números, seguido de cero o un separador de tipo guion o espacio que se repita 4 veces. Pero en la última secuencia no hace falta el <code>[\-\s]?</code>, ya que nunca va a terminar un número con un espacio o un guión</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666-66-66-66\']',
          'string2: 666-666-666 --&gt; []',
          'string3: 666 66 66 66 --&gt; [\'666 66 66 66\']',
          'string4: 666 666 666 --&gt; []',
          'string5: 666666666 --&gt; [\'666666666\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Sigue sin encontrar para <code>string2</code> y <code>string4</code>. Esto es porque lo último que hay en el filtro es un <code>d{opening_brace}2,{closing_brace}</code>, es decir, después del tercer separador estamos esperando al menos 2 números, pero eso en <code>string2</code> y <code>string4</code> no pasa, así que ponemos lo siguiente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666-66-66-66\']',
          'string2: 666-666-666 --&gt; [\'666-666-666\']',
          'string3: 666 66 66 66 --&gt; [\'666 66 66 66\']',
          'string4: 666 666 666 --&gt; [\'666 666 666\']',
          'string5: 666666666 --&gt; [\'666666666\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="El-delimitador-?-como-delimitador-r%C3%A1pido">El delimitador <code>?</code> como delimitador rápido<a class="anchor-link" href="#El-delimitador-?-como-delimitador-r%C3%A1pido"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 23" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>El ejemplo anterior lo podemos filtrar mediante <code>\d+?[- ]</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+?[- ]"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+?[- ]"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+?[- ]"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+?[- ]"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d+?[- ]"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666-\', \'66-\', \'66-\']',
          'string2: 666-666-666 --&gt; [\'666-\', \'666-\']',
          'string3: 666 66 66 66 --&gt; [\'666 \', \'66 \', \'66 \']',
          'string4: 666 666 666 --&gt; [\'666 \', \'666 \']',
          'string5: 666666666 --&gt; []',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si no estuviese el delimitador <code>?</code> tendríamos <code>\d+[- ]</code>, lo que quiere decir una secuencia de uno o más números seguidos de un espacio o un guión. Pero lo que hace el delimitador <code>?</code> es hacer esta búsqueda más rápido</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="El-negador">El negador<a class="anchor-link" href="#El-negador"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 24" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Antes hemos visto que con <code>\d</code> encotrábamos dígitos, pues con <code>\D</code> encontramos todo lo que no sean dígitos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"E3s4t6e e1s2t3r5i6n7g8 t9i0e4n2e1 d4i5g7i9t0o5s2"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\D"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'E\', \'s\', \'t\', \'e\', \' \', \'e\', \'s\', \'t\', \'r\', \'i\', \'n\', \'g\', \' \', \'t\', \'i\', \'e\', \'n\', \'e\', \' \', \'d\', \'i\', \'g\', \'i\', \'t\', \'o\', \'s\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lo mismo ocurre con las letras, si escribimos <code>\W</code> encontrará todo lo que no sean letras</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"Letras ab27_ no letras ,.:;´ç"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\W"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\' \', \' \', \' \', \' \', \',\', \'.\', \':\', \';\', \'´\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Si ponemos <code>\S</code> encontraremos todo lo que no sean espacios</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\S"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'L\', \'e\', \'t\', \'r\', \'a\', \'s\', \'a\', \'b\', \'2\', \'7\', \'_\', \'n\', \'o\', \'l\', \'e\', \'t\', \'r\', \'a\', \'s\', \',\', \'.\', \':\', \';\', \'´\', \'ç\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero en caso que tengamos una clase o quialquier otra cosa, podemos negar mediante <code>^</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"1234567890"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[^5-9]"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'1\', \'2\', \'3\', \'4\', \'0\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Volviendo al ejemplo de los números de teléfono de antes, podemos filtrarlos mediante los siguiente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"666-66-66-66"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"666-666-666"</span>',
          '<span class="n">string3</span> <span class="o">=</span> <span class="s2">"666 66 66 66"</span>',
          '<span class="n">string4</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666666666"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string1: </span><span class="si">{</span><span class="n">string1</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string2: </span><span class="si">{</span><span class="n">string2</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string3: </span><span class="si">{</span><span class="n">string3</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*"</span><span class="p">,</span> <span class="n">string3</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string4: </span><span class="si">{</span><span class="n">string4</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*"</span><span class="p">,</span> <span class="n">string4</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="sa">f</span><span class="s2">"string5: </span><span class="si">{</span><span class="n">string5</span><span class="si">}</span><span class="s2"> --&gt;"</span><span class="p">,</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*"</span><span class="p">,</span> <span class="n">string5</span><span class="p">))</span>',
          '<span class="n">string5</span> <span class="o">=</span> <span class="s2">"666 666 666"</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'string1: 666-66-66-66 --&gt; [\'666-66-66-66\']',
          'string2: 666-666-666 --&gt; [\'666-666-666\']',
          'string3: 666 66 66 66 --&gt; [\'666 66 66 66\']',
          'string4: 666 666 666 --&gt; [\'666 666 666\']',
          'string5: 666666666 --&gt; [\'666666666\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Lo que estamos haciendo es pedir secuencias de al menos dos dígitos seguido de uno o ningún no dígito</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="El-principio-%5E-y-final-de-l%C3%ADnea-$">El principio <code>^</code> y final de línea <code>$</code><a class="anchor-link" href="#El-principio-%5E-y-final-de-l%C3%ADnea-$"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 25" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con <code>^</code> podemos buscar el inicio de línea, por ejemplo, si queremos encontrar un dígito que solo esté al inicio de una línea</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"linea 1"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"2ª linea"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"^\d"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"^\d"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[]',
          '[\'2\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver solo hay un dígito al inicio de linea en <code>string2</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al igual, el final de línea se puede encontrar con <code>$</code>. Si queremos encontrar un dígito solo al final de una línea</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">string1</span> <span class="o">=</span> <span class="s2">"linea 1"</span>',
          '<span class="n">string2</span> <span class="o">=</span> <span class="s2">"2ª linea"</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d$"</span><span class="p">,</span> <span class="n">string1</span><span class="p">))</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\d$"</span><span class="p">,</span> <span class="n">string2</span><span class="p">))</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'1\']',
          '[]',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Esto solo ocurre en el <code>string1</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Ejemplos-pr%C3%A1cticos">Ejemplos prácticos<a class="anchor-link" href="#Ejemplos-pr%C3%A1cticos"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 26" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Logs">Logs<a class="anchor-link" href="#Logs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 27" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si en el siguiente log queremos encontrar solo los <code>WARN</code>s</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">log</span> <span class="o">=</span> <span class="s2">"""[LOG ENTRY] [ERROR] The system is unstable</span>',
          '<span class="s2">[LOG ENTRY] [WARN] The system may be down</span>',
          '<span class="s2">[LOG ENTRY] [WARN] Microsoft just bought Github</span>',
          '<span class="s2">[LOG DATA] [LOG] Everything is OK</span>',
          '<span class="s2">[LOG ENTRY] [LOG] [user:@beco] Logged in</span>',
          '<span class="s2">[LOG ENTRY] [LOG] [user:@beco] Clicked here</span>',
          '<span class="s2">[LOG DATA] [LOG] [user:@celismx] Did something</span>',
          '<span class="s2">[LOG ENTRY] [LOG] [user:@beco] Rated the app</span>',
          '<span class="s2">[LOG ENTRY] [LOG] [user:@beco] Logged out</span>',
          '<span class="s2">[LOG LINE] [LOG] [user:@celismx] Logged in"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\[LOG.*\[WARN\].*"</span><span class="p">,</span> <span class="n">log</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'[LOG ENTRY] [WARN] The system may be down\',',
          ' \'[LOG ENTRY] [WARN] Microsoft just bought Github\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="N%C3%BAmero-de-tel%C3%A9fono">Número de teléfono<a class="anchor-link" href="#N%C3%BAmero-de-tel%C3%A9fono"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 28" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Dentro de un número podemos encontrarnos letras como la <code>e</code> de extensión, <code>#</code> también para la extensión, o la <code>p</code> para que si llama un ordenador haga una pausa. También podemos encontrar el <code>+</code> para indicar un prefijo de pais y separadores como espacios, <code>-</code>, <code>.</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tel</span> <span class="o">=</span> <span class="s2">"""555658</span>',
          '<span class="s2">56-58-11</span>',
          '<span class="s2">56.58.11</span>',
          '<span class="s2">56.78-98</span>',
          '<span class="s2">65 09 87</span>',
          '<span class="s2">76y87r98</span>',
          '<span class="s2">45y78-56</span>',
          '<span class="s2">78.87 65</span>',
          '<span class="s2">78 54-56</span>',
          '<span class="s2">+521565811</span>',
          '<span class="s2">58-11-11#246</span>',
          '<span class="s2">55256048p123</span>',
          '<span class="s2">55256048e123"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\+?\d{2,3}[^\da-zA-Z</span><span class="se">\\n</span><span class="s2">]?\d{2,3}[^\da-zA-Z</span><span class="se">\\n</span><span class="s2">]?\d{2,3}[#pe]?\d*"</span><span class="p">,</span> <span class="n">tel</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'555658\',',
          ' \'56-58-11\',',
          ' \'56.58.11\',',
          ' \'56.78-98\',',
          ' \'65 09 87\',',
          ' \'78.87 65\',',
          ' \'78 54-56\',',
          ' \'+521565811\',',
          ' \'58-11-11#246\',',
          ' \'55256048p123\',',
          ' \'55256048e123\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pasamos a explicarlo</p>
      <ul>
      <li><code>\+?</code>: Que empiece con el caracter <code>+</code> y que haya cero o uno</li>
      <li><code>\d{opening_brace}2,3{closing_brace}</code>: Que siga con entre 2 y 3 dígitos</li>
      <li><code>[^\da-zA-Z\n]?</code>: A continuación puede haber cero o un caracter que no sea ni un dígito, ni una letra de la <code>a</code> la <code>z</code>, ni una letra de la <code>A</code> a la <code>Z</code>, ni un salto de línea</li>
      <li><code>\d{opening_brace}2,3{closing_brace}</code>: Que siga con entre 2 y 3 dígitos</li>
      <li><code>[^\da-zA-Z\n]?</code>: A continuación puede haber cero o un caracter que no sea ni un dígito, ni una letra de la <code>a</code> la <code>z</code>, ni una letra de la <code>A</code> a la <code>Z</code>, ni un salto de línea</li>
      <li><code>\d{opening_brace}2,3{closing_brace}</code>: Que siga con entre 2 y 3 dígitos</li>
      <li><code>[#pe]?</code>: A continuación puede haber cero o un caracter tanto <code>#</code>, como <code>p</code>, como <code>e</code></li>
      <li><code>\d*</code>: Por último que haya cero o todos los números</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="URLs">URLs<a class="anchor-link" href="#URLs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 29" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">urls</span> <span class="o">=</span> <span class="s2">"""url: https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx</span>',
          '<span class="s2">url: http://instagram.com/p/blablablah</span>',
          '<span class="s2">url: http://itam.mx/test</span>',
          '<span class="s2">http://instagram.com/p/blablablah</span>',
          '<span class="s2">https://www.vanguarsoft.com.ve</span>',
          '<span class="s2">http://platzi.com</span>',
          '<span class="s2">https://traetelo.net</span>',
          '<span class="s2">https://traetelo.net/images archivo.jsp</span>',
          '<span class="s2">url: https://subdominio.traetelo.net</span>',
          '<span class="s2">url: https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx</span>',
          '<span class="s2">url: http://instagram.com/p/blablablah</span>',
          '<span class="s2">url: http://itam.mx/test</span>',
          '<span class="s2">http://instagram.com/p/blablablah</span>',
          '<span class="s2">https://www.google.com.co/</span>',
          '<span class="s2">https://sub.dominio.de.alguien.com/archivo.html</span>',
          '<span class="s2">https://en.wikipedia.org/wiki/.org</span>',
          '<span class="s2">https://cdn-microsoft.org/image/seixo2t9sjl_22.jpg</span>',
          '<span class="s2">https://hola.pizza</span>',
          '<span class="s2">https://platzi.com/clases/1301-expresiones-regulares/11860-urls9102/ clase</span>',
          '',
          '',
          '<span class="s2">https://api.giphy.com/v1/gifs/search?q=Rick and Morty&amp;limit=10&amp;api_key=DG3hItPp5HIRNC0nit3AOR7eQZAe</span>',
          '',
          '<span class="s2">http://localhost:3000/something?color1=red&amp;color2=blue</span>',
          '<span class="s2">http://localhost:3000/display/post?size=small</span>',
          '<span class="s2"> http://localhost:3000/?name=satyam</span>',
          '<span class="s2"> http://localhost:3000/scanned?orderid=234</span>',
          '<span class="s2"> http://localhost:3000/getUsers?userId=12354411&amp;name=Billy</span>',
          '<span class="s2"> http://localhost:3000/getUsers?userId=12354411</span>',
          '<span class="s2">http://localhost:3000/search?city=Barcelona</span>',
          '',
          '<span class="s2">www.sitiodeejemplo.net/pagina.php?nombredevalor1=valor1&amp;nombredevalor2=valor2"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"https?:\/\/[\w\-\.]+\.\w{2,6}\/?\S*"</span><span class="p">,</span> <span class="n">urls</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx\',',
          ' \'http://instagram.com/p/blablablah\',',
          ' \'http://itam.mx/test\',',
          ' \'http://instagram.com/p/blablablah\',',
          ' \'https://www.vanguarsoft.com.ve\',',
          ' \'http://platzi.com\',',
          ' \'https://traetelo.net\',',
          ' \'https://traetelo.net/images\',',
          ' \'https://subdominio.traetelo.net\',',
          ' \'https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx\',',
          ' \'http://instagram.com/p/blablablah\',',
          ' \'http://itam.mx/test\',',
          ' \'http://instagram.com/p/blablablah\',',
          ' \'https://www.google.com.co/\',',
          ' \'https://sub.dominio.de.alguien.com/archivo.html\',',
          ' \'https://en.wikipedia.org/wiki/.org\',',
          ' \'https://cdn-microsoft.org/image/seixo2t9sjl_22.jpg\',',
          ' \'https://hola.pizza\',',
          ' \'https://platzi.com/clases/1301-expresiones-regulares/11860-urls9102/\',',
          ' \'https://api.giphy.com/v1/gifs/search?q=Rick\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pasamos a explicarlo</p>
      <ul>
      <li><code>http</code>: Queremos que empiece por <code>http</code></li>
      <li><code>s?</code>: A continuación puede haber o no una <code>s</code></li>
      <li><code>:\/\/</code>: Seguido de <code>://</code></li>
      <li><code>[\w\-\.]+</code>: Seguido de uno o más letras, giones o puntos</li>
      <li><code>\.</code>: A continuación un punto</li>
      <li><code>\w{opening_brace}2,6{closing_brace}</code>: Entre 2 y 6 letras para el tld</li>
      <li><code>\/?</code>: Seguido de cero o un <code>/</code></li>
      <li><code>\S*</code>: Ninguno o todo lo que no sea un espacio</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Mails">Mails<a class="anchor-link" href="#Mails"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 30" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">mails</span> <span class="o">=</span> <span class="s2">"""esto.es_un.mail@mail.com</span>',
          '<span class="s2">esto.es_un.mail+complejo@mail.com</span>',
          '<span class="s2">dominio.com</span>',
          '<span class="s2">rodrigo.jimenez@yahoo.com.mx</span>',
          '<span class="s2">ruben@starbucks.com</span>',
          '<span class="s2">esto_no$es_email@dominio.com</span>',
          '<span class="s2">no_se_de_internet3@hotmail.com"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[\w\._]{5,30}\+?[\w\._]{0,10}@[\w\.-]{2,}\.\w{2,6}"</span><span class="p">,</span> <span class="n">mails</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'esto.es_un.mail@mail.com\',',
          ' \'esto.es_un.mail+complejo@mail.com\',',
          ' \'rodrigo.jimenez@yahoo.com.mx\',',
          ' \'ruben@starbucks.com\',',
          ' \'es_email@dominio.com\',',
          ' \'no_se_de_internet3@hotmail.com\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pasamos a explicarlo</p>
      <ul>
      <li><code>[\w\._]{opening_brace}5,30{closing_brace}</code>: Queremos que empiece por entre 5 y 30 (que es lo mínimo y máximo que admite gmail) letras, puntos o barras bajas</li>
      <li><code>\+?</code>: Seguido de cero o un <code>+</code></li>
      <li><code>[\w\._]{opening_brace}0,10{closing_brace}</code>: A continuación entre 0 y 10 letras, puntos o barras bajas</li>
      <li><code>@</code>: La <code>@</code></li>
      <li><code>[\w\.-]{opening_brace}2,{closing_brace}</code>: Entre 2 e infinitas letras, puntos y guiones (dominio)</li>
      <li><code>\.</code>: Seguido de un <code>.</code></li>
      <li><code>\w{opening_brace}2,6{closing_brace}</code>: Y por último entre 2 y 6 letras para el tld</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Localizaciones">Localizaciones<a class="anchor-link" href="#Localizaciones"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 31" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay dos posibles manera de dar localizaciones, por lo que analizamos las dos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">loc</span> <span class="o">=</span> <span class="s2">"""-99.205646,19.429707,2275.10</span>',
          '<span class="s2">-99.205581, 19.429652,2275.10</span>',
          '<span class="s2">-99.204654,19.428952,2275.58"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\-?\d{1,3}\.\d{1,6},\s?\-?\d{1,3}\.\d{1,6},.*"</span><span class="p">,</span> <span class="n">loc</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'-99.205646,19.429707,2275.10\',',
          ' \'-99.205581, 19.429652,2275.10\',',
          ' \'-99.204654,19.428952,2275.58\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pasamos a explicarlo</p>
      <ul>
      <li><code>\-?</code>: Queremos que empiece con cero o un signo menos</li>
      <li><code>\d{opening_brace}1,3{closing_brace}</code>: Seguido de entre uno y tres números</li>
      <li><code>\.</code>: A continuación un punto</li>
      <li><code>\d{opening_brace}1,6{closing_brace}</code>: Después entre uno y seis números</li>
      <li><code>,</code>: A continuación una <code>,</code></li>
      <li><code>\s?</code>: Después cero o un espacio</li>
      <li><code>\-?</code>: Cero o un signo menos</li>
      <li><code>\d{opening_brace}1,3{closing_brace}</code>: A continuación entre uno y tres números</li>
      <li><code>\.</code>: A continuación un punto</li>
      <li><code>\d{opening_brace}1,6{closing_brace}</code>: Seguido de entre uno y seis números</li>
      <li><code>,</code>: Luego una coma</li>
      <li><code>.*</code>: Por último ninguno o todo tipo de caracteres</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">loc</span> <span class="o">=</span> <span class="s2">"""-99 12\' 34.08"W, 19 34\' 56.98"N</span>',
          '<span class="s2">-34 54\' 32.00"E, -3 21\' 67.00"S"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"\-?\d{1,3}\s\d{1,2}\'\s\d{1,2}\.\d{2,2}</span><span class="se">\\"</span><span class="s2">[WE],\s?\-?\d{1,3}\s\d{1,2}\'\s\d{1,2}\.\d{2,2}</span><span class="se">\\"</span><span class="s2">[SN]"</span><span class="p">,</span> <span class="n">loc</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'-99 12\' 34.08"W, 19 34\' 56.98"N\', \'-34 54\' 32.00"E, -3 21\' 67.00"S\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>',
          '<span class="nb">print</span><span class="p">(</span><span class="n">result</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '-99 12\' 34.08"W, 19 34\' 56.98"N',
          '-34 54\' 32.00"E, -3 21\' 67.00"S',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pasamos a explicarlo</p>
      <ul>
      <li><code>\-?</code>: Queremos que empiece con cero o un signo menos</li>
      <li><code>\d{opening_brace}1,3{closing_brace}</code>: Seguido de entre uno y tres números</li>
      <li><code>\s</code>: Después un espacio</li>
      <li><code>\d{opening_brace}1,2{closing_brace}</code>: Segiodo de entre uno y dos números</li>
      <li><code>'</code>: A continuación un <code>'</code></li>
      <li><code>\s</code>: Seguido de un espacio</li>
      <li><code>\d{opening_brace}1,2{closing_brace}</code>: A continuación entre uno y dos números</li>
      <li><code>\.</code>: Después un punto</li>
      <li><code>\d{opening_brace}2,2{closing_brace}</code>: Seguido de dos números</li>
      <li><code>\"</code>: Después un <code>"</code></li>
      <li><code>[WE]</code>: A continuación la letra <code>W</code> o la letra <code>E</code></li>
      <li><code>,</code>: Después una coma</li>
      <li><code>\s?</code>: Seguido de cero o un espacio</li>
      <li><code>\-?</code>: Después cero o un signo menos</li>
      <li><code>\d{opening_brace}1,3{closing_brace}</code>: A continuación entre uno y tres números</li>
      <li><code>\s</code>: Seguido de un espacio</li>
      <li><code>\d{opening_brace}1,2{closing_brace}</code>: A continuación entre uno y dos números</li>
      <li><code>'</code>: Después un <code>'</code></li>
      <li><code>\s</code>: Después un espacio</li>
      <li><code>\d{opening_brace}1,2{closing_brace}</code>: A continuación entre uno y dos númeors</li>
      <li><code>\.</code>: Seguido de un punto</li>
      <li><code>\d{opening_brace}2,2{closing_brace}</code>: Después dos números</li>
      <li><code>\"</code>: Segido de <code>"</code></li>
      <li><code>[SN]</code>: Y por último la letra <code>S</code> o la letra <code>N</code></li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Nombres">Nombres<a class="anchor-link" href="#Nombres"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 32" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">nombres</span> <span class="o">=</span> <span class="s2">"""Camilo Sarmiento Gálvez</span>',
          '<span class="s2">Alejandro Pliego Abasto</span>',
          '<span class="s2">Milagros Reyes Japón</span>',
          '<span class="s2">Samuel París Arrabal</span>',
          '<span class="s2">Juan Pablo Tafalla</span>',
          '<span class="s2">Axel Gálvez Velázquez</span>',
          '<span class="s2">Óscar Montreal Aparicio</span>',
          '<span class="s2">Jacobo Pozo Tassis</span>',
          '<span class="s2">Guillermo Ordóñez Espiga</span>',
          '<span class="s2">Eduardo Pousa Curbelo</span>',
          '<span class="s2">Ivanna Bienvenida Kevin</span>',
          '<span class="s2">Ada Tasis López</span>',
          '<span class="s2">Luciana Sáenz García</span>',
          '<span class="s2">Florencia Sainz Márquz</span>',
          '<span class="s2">Catarina Cazalla Lombarda</span>',
          '<span class="s2">Paloma Gallo Perro</span>',
          '<span class="s2">Margarita Quesada Florez</span>',
          '<span class="s2">Vicente Fox Quesada</span>',
          '<span class="s2">Iris Graciani</span>',
          '<span class="s2">Asunción Carballar</span>',
          '<span class="s2">Constanza Muñoz</span>',
          '<span class="s2">Manuel Andres García Márquez"""</span>',
          '<span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s2">"[A-ZÁÉÍÓÚ][a-záéíóú]+\s[A-ZÁÉÍÓÚ][a-záéíóú]+\s[A-ZÁÉÍÓÚ][a-záéíóú]+"</span><span class="p">,</span> <span class="n">nombres</span><span class="p">)</span>',
          '<span class="n">result</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '[\'Camilo Sarmiento Gálvez\',',
          ' \'Alejandro Pliego Abasto\',',
          ' \'Milagros Reyes Japón\',',
          ' \'Samuel París Arrabal\',',
          ' \'Juan Pablo Tafalla\',',
          ' \'Axel Gálvez Velázquez\',',
          ' \'Óscar Montreal Aparicio\',',
          ' \'Jacobo Pozo Tassis\',',
          ' \'Espiga\nEduardo Pousa\',',
          ' \'Curbelo\nIvanna Bienvenida\',',
          ' \'Kevin\nAda Tasis\',',
          ' \'López\nLuciana Sáenz\',',
          ' \'García\nFlorencia Sainz\',',
          ' \'Márquz\nCatarina Cazalla\',',
          ' \'Lombarda\nPaloma Gallo\',',
          ' \'Perro\nMargarita Quesada\',',
          ' \'Florez\nVicente Fox\',',
          ' \'Quesada\nIris Graciani\',',
          ' \'Asunción Carballar\nConstanza\',',
          ' \'Manuel Andres García\']',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pasamos a explicarlo</p>
      <ul>
      <li><code>[A-ZÁÉÍÓÚ]</code>: Queremos que empiece con una letra mayúscula, incluidas con acentos</li>
      <li><code>[a-záéíóú]+</code>: Seguido de una o mas letras minúsculas, incluidas con espacios</li>
      <li><code>\s</code>: Segido de un espacio</li>
      <li><code>[A-ZÁÉÍÓÚ]</code>: A continuación una letra mayúscula, incluidas con acentos</li>
      <li><code>[a-záéíóú]+</code>: Seguido de una o mas letras minúsculas, incluidas con espacios</li>
      <li><code>\s</code>: Segido de un espacio</li>
      <li><code>[A-ZÁÉÍÓÚ]</code>: A continuación una letra mayúscula, incluidas con acentos</li>
      <li><code>[a-záéíóú]+</code>: Seguido de una o mas letras minúsculas, incluidas con espacios</li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="B%C3%BAsqueda-y-remplazo">Búsqueda y remplazo<a class="anchor-link" href="#B%C3%BAsqueda-y-remplazo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 33" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a descargarnos un archivo con un montón de películas históricas</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="c1"># download file from url</span>',
          '<span class="kn">import</span> <span class="nn">urllib.request</span>',
          '<span class="n">url</span> <span class="o">=</span> <span class="s2">"https://static.platzi.com/media/tmp/class-files/github/moviedemo/moviedemo-master/movies.dat"</span>',
          '<span class="n">urllib</span><span class="o">.</span><span class="n">request</span><span class="o">.</span><span class="n">urlretrieve</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="s2">"movies.dat"</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">HTTPError</span>                                 Traceback (most recent call last)',
          'Cell <span class="ansi-green-fg">In[43], line 4</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      2</span> <span class="ansi-bold" style="color: rgb(0,135,0)">import</span> <span class="ansi-bold" style="color: rgb(0,0,255)">urllib</span><span class="ansi-bold" style="color: rgb(0,0,255)">.</span><span class="ansi-bold" style="color: rgb(0,0,255)">request</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      3</span> url <span style="color: rgb(98,98,98)">=</span> <span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">https://static.platzi.com/media/tmp/class-files/github/moviedemo/moviedemo-master/movies.dat</span><span style="color: rgb(175,0,0)">"</span>',
          '<span class="ansi-green-fg">----&gt; 4</span> urllib<span style="color: rgb(98,98,98)">.</span>request<span style="color: rgb(98,98,98)">.</span>urlretrieve(url, <span style="color: rgb(175,0,0)">"</span><span style="color: rgb(175,0,0)">movies.dat</span><span style="color: rgb(175,0,0)">"</span>)',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:241</span>, in <span class="ansi-cyan-fg">urlretrieve</span><span class="ansi-blue-fg">(url, filename, reporthook, data)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    224</span> <span style="color: rgb(175,0,0)">"""</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    225</span> <span style="color: rgb(175,0,0)">Retrieve a URL into a temporary location on disk.</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    226</span> ',
          '<span class="ansi-green-fg">   (...)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    237</span> <span style="color: rgb(175,0,0)">data file as well as the resulting HTTPMessage object.</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    238</span> <span style="color: rgb(175,0,0)">"""</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    239</span> url_type, path <span style="color: rgb(98,98,98)">=</span> _splittype(url)',
          '<span class="ansi-green-fg">--&gt; 241</span> <span class="ansi-bold" style="color: rgb(0,135,0)">with</span> contextlib<span style="color: rgb(98,98,98)">.</span>closing(urlopen(url, data)) <span class="ansi-bold" style="color: rgb(0,135,0)">as</span> fp:',
          '<span class="ansi-green-intense-fg ansi-bold">    242</span>     headers <span style="color: rgb(98,98,98)">=</span> fp<span style="color: rgb(98,98,98)">.</span>info()',
          '<span class="ansi-green-intense-fg ansi-bold">    244</span>     <span style="color: rgb(95,135,135)"># Just return the local path and the "headers" for file://</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    245</span>     <span style="color: rgb(95,135,135)"># URLs. No sense in performing a copy unless requested.</span>',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:216</span>, in <span class="ansi-cyan-fg">urlopen</span><span class="ansi-blue-fg">(url, data, timeout, cafile, capath, cadefault, context)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    214</span> <span class="ansi-bold" style="color: rgb(0,135,0)">else</span>:',
          '<span class="ansi-green-intense-fg ansi-bold">    215</span>     opener <span style="color: rgb(98,98,98)">=</span> _opener',
          '<span class="ansi-green-fg">--&gt; 216</span> <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> opener<span style="color: rgb(98,98,98)">.</span>open(url, data, timeout)',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:525</span>, in <span class="ansi-cyan-fg">OpenerDirector.open</span><span class="ansi-blue-fg">(self, fullurl, data, timeout)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    523</span> <span class="ansi-bold" style="color: rgb(0,135,0)">for</span> processor <span class="ansi-bold" style="color: rgb(175,0,255)">in</span> <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>process_response<span style="color: rgb(98,98,98)">.</span>get(protocol, []):',
          '<span class="ansi-green-intense-fg ansi-bold">    524</span>     meth <span style="color: rgb(98,98,98)">=</span> <span style="color: rgb(0,135,0)">getattr</span>(processor, meth_name)',
          '<span class="ansi-green-fg">--&gt; 525</span>     response <span style="color: rgb(98,98,98)">=</span> meth(req, response)',
          '<span class="ansi-green-intense-fg ansi-bold">    527</span> <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> response',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:634</span>, in <span class="ansi-cyan-fg">HTTPErrorProcessor.http_response</span><span class="ansi-blue-fg">(self, request, response)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    631</span> <span style="color: rgb(95,135,135)"># According to RFC 2616, "2xx" code indicates that the client\'s</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    632</span> <span style="color: rgb(95,135,135)"># request was successfully received, understood, and accepted.</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    633</span> <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> <span class="ansi-bold" style="color: rgb(175,0,255)">not</span> (<span style="color: rgb(98,98,98)">200</span> <span style="color: rgb(98,98,98)">&lt;</span><span style="color: rgb(98,98,98)">=</span> code <span style="color: rgb(98,98,98)">&lt;</span> <span style="color: rgb(98,98,98)">300</span>):',
          '<span class="ansi-green-fg">--&gt; 634</span>     response <span style="color: rgb(98,98,98)">=</span> <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>parent<span style="color: rgb(98,98,98)">.</span>error(',
          '<span class="ansi-green-intense-fg ansi-bold">    635</span>         <span style="color: rgb(175,0,0)">\'</span><span style="color: rgb(175,0,0)">http</span><span style="color: rgb(175,0,0)">\'</span>, request, response, code, msg, hdrs)',
          '<span class="ansi-green-intense-fg ansi-bold">    637</span> <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> response',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:563</span>, in <span class="ansi-cyan-fg">OpenerDirector.error</span><span class="ansi-blue-fg">(self, proto, *args)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    561</span> <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> http_err:',
          '<span class="ansi-green-intense-fg ansi-bold">    562</span>     args <span style="color: rgb(98,98,98)">=</span> (<span style="color: rgb(0,135,0)">dict</span>, <span style="color: rgb(175,0,0)">\'</span><span style="color: rgb(175,0,0)">default</span><span style="color: rgb(175,0,0)">\'</span>, <span style="color: rgb(175,0,0)">\'</span><span style="color: rgb(175,0,0)">http_error_default</span><span style="color: rgb(175,0,0)">\'</span>) <span style="color: rgb(98,98,98)">+</span> orig_args',
          '<span class="ansi-green-fg">--&gt; 563</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> <span style="color: rgb(0,135,0)">self</span><span style="color: rgb(98,98,98)">.</span>_call_chain(<span style="color: rgb(98,98,98)">*</span>args)',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:496</span>, in <span class="ansi-cyan-fg">OpenerDirector._call_chain</span><span class="ansi-blue-fg">(self, chain, kind, meth_name, *args)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    494</span> <span class="ansi-bold" style="color: rgb(0,135,0)">for</span> handler <span class="ansi-bold" style="color: rgb(175,0,255)">in</span> handlers:',
          '<span class="ansi-green-intense-fg ansi-bold">    495</span>     func <span style="color: rgb(98,98,98)">=</span> <span style="color: rgb(0,135,0)">getattr</span>(handler, meth_name)',
          '<span class="ansi-green-fg">--&gt; 496</span>     result <span style="color: rgb(98,98,98)">=</span> func(<span style="color: rgb(98,98,98)">*</span>args)',
          '<span class="ansi-green-intense-fg ansi-bold">    497</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">if</span> result <span class="ansi-bold" style="color: rgb(175,0,255)">is</span> <span class="ansi-bold" style="color: rgb(175,0,255)">not</span> <span class="ansi-bold" style="color: rgb(0,135,0)">None</span>:',
          '<span class="ansi-green-intense-fg ansi-bold">    498</span>         <span class="ansi-bold" style="color: rgb(0,135,0)">return</span> result',
          'File <span class="ansi-green-fg">~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:643</span>, in <span class="ansi-cyan-fg">HTTPDefaultErrorHandler.http_error_default</span><span class="ansi-blue-fg">(self, req, fp, code, msg, hdrs)</span>',
          '<span class="ansi-green-intense-fg ansi-bold">    642</span> <span class="ansi-bold" style="color: rgb(0,135,0)">def</span> <span style="color: rgb(0,0,255)">http_error_default</span>(<span style="color: rgb(0,135,0)">self</span>, req, fp, code, msg, hdrs):',
          '<span class="ansi-green-fg">--&gt; 643</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">raise</span> HTTPError(req<span style="color: rgb(98,98,98)">.</span>full_url, code, msg, hdrs, fp)',
          '<span class="ansi-red-fg">HTTPError</span>: HTTP Error 403: Forbidden',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a imprimir las primeras 10 lineas para analizarlo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"movies.dat"</span><span class="p">,</span> <span class="s2">"r"</span><span class="p">)</span>',
          '',
          '<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">line</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">file</span><span class="p">):</span>',
          '    <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
          '    <span class="k">if</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">10</span><span class="p">:</span>',
          '        <span class="k">break</span>',
          '',
          '<span class="n">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1::Toy Story (1995)::Adventure|Animation|Children|Comedy|Fantasy',
          '2::Jumanji (1995)::Adventure|Children|Fantasy',
          '3::Grumpier Old Men (1995)::Comedy|Romance',
          '4::Waiting to Exhale (1995)::Comedy|Drama|Romance',
          '5::Father of the Bride Part II (1995)::Comedy',
          '6::Heat (1995)::Action|Crime|Thriller',
          '7::Sabrina (1995)::Comedy|Romance',
          '8::Tom and Huck (1995)::Adventure|Children',
          '9::Sudden Death (1995)::Action',
          '10::GoldenEye (1995)::Action|Adventure|Thriller',
          '11::American President, The (1995)::Comedy|Drama|Romance',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como se puede ver, tenemos un ID, seguido de <code>::</code>, a continuación el nombre de la película, entre paréntesis el año, sguido de <code>::</code> y después géneros separados por <code>|</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos hacer una limpieza del archivo muy fácil mediante las expresiones regulares, las funciones <code>compile</code> y <code>match</code> y el uso de agrupaciones con paréntesis. Al hacer agurpaciones, seleccionamos qué zonas del texto queremos guardar para luego trabajar con ellas como queramos, vamos e verlo con un ejemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="n">pattern</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="sa">r</span><span class="s2">"^\d+::([\w\s:,\(\)\.\-\'&amp;¡!/¿?ÁÉÍÓÚáéíóú\+*\$#°\'</span><span class="se">\"</span><span class="s2">\[\]@·]+)\s\((\d{4,4})\)::(.*)$"</span><span class="p">)</span>',
      '      ',
      '      <span class="n">file</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"movies.dat"</span><span class="p">,</span> <span class="s2">"r"</span><span class="p">)</span>',
      '      <span class="n">file_filtered</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="s2">"movies.csv"</span><span class="p">,</span> <span class="s2">"w"</span><span class="p">)</span>',
      '      <span class="n">file_filtered</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s2">"title,year,genders</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>',
      '      <span class="n">sep</span> <span class="o">=</span> <span class="s2">";;"</span>',
      '      <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">file</span><span class="p">:</span>',
      '          <span class="n">result</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">line</span><span class="p">)</span>',
      '          <span class="k">if</span> <span class="n">result</span><span class="p">:</span>',
      '              <span class="n">file_filtered</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="sa">f</span><span class="s2">"</span><span class="si">{</span><span class="n">result</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="si">}{</span><span class="n">sep</span><span class="si">}{</span><span class="n">result</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="si">}{</span><span class="n">sep</span><span class="si">}{</span><span class="n">result</span><span class="o">.</span><span class="n">group</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>',
      '          <span class="k">else</span><span class="p">:</span>',
      '              <span class="nb">print</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s2">""</span><span class="p">)</span>',
      '      <span class="n">file</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>',
      '      <span class="n">file_filtered</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>



















      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver qué hemos hecho, primero hemos definido un patrón con lo siguiente:</p>
      <ul>
      <li><code>^</code>: Queremos que empiece con el inicio de línea</li>
      <li><code>\d+</code>: A continuación uno o más números</li>
      <li><code>::</code>: Seguido de <code>::</code></li>
      <li><code>([\w\s:,\(\)\.\-'&amp;¡!/¿?ÁÉÍÓÚáéíóú\+*\$#°\'\"\[\]@·]+)</code>: Esta es la primera agrupación, buscamos cualquier palabra, espacio o caracter de entre los corchetes que aparezca una o más veces</li>
      <li><code>\s</code>: A continuación un espacio</li>
      <li><code>\(</code>: La apretura de un paréntesis</li>
      <li><code>(\d{opening_brace}4,4{closing_brace})</code>: Aquí esta la segunda agrupación, buscamos cuatro números</li>
      <li><code>\)</code>: Después el cierre de un paréntesis</li>
      <li><code>::</code>: A continuación <code>::</code></li>
      <li><code>(.*)</code>: La tercera agrupación, cualquier caracter que aparezca ninguna o todas las veces</li>
      <li><code>$</code>: Por último el final de línea</li>
      </ul>
      <p>Dentro del <code>for</code> analizamos línea a línea si se encuentra el patrón que hemos definido, y si se encuentra se escriben los tres patrones en el <code>csv</code> separados por <code>sep</code>, que en nuestro caso lo hemos definido como <code>;;</code>. Se ha definido ese separador, porque hay títulos de películas que tienen <code>,</code>s.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Leemos el <code>csv</code> con <code>Pandas</code></p>
      </section>
      
      <section class="section-block-code-cell-">
      <div class="input-code">
      <div class="highlight hl-ipython3">
<pre><span></span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="nn">pd</span>
      <span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s2">"movies.csv"</span><span class="p">,</span> <span class="n">sep</span><span class="o">=</span><span class="s2">";;"</span><span class="p">,</span> <span class="n">engine</span><span class="o">=</span><span class="s2">"python"</span><span class="p">)</span>
      <span class="n">df</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
      </pre></div>
      </div>
      <div class="output-wrapper">
      <div class="output-area">
      <div class="prompt-output-prompt">Out[ ]:</div>
      <div class="output-html-rendered-html-output-subareaoutput_execute_result"><div>
      <style scoped="">
          .dataframe tbody tr th:only-of-type {
              vertical-align: middle;
          }
      
          .dataframe tbody tr th {
              vertical-align: top;
          }
      
          .dataframe thead th {
              text-align: right;
          }
      </style>
      <table border="1" class="dataframe">
      <thead>
      <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>title,year,genders</th>
      </tr>
      </thead>
      <tbody>
      <tr>
      <th>Toy Story</th>
      <th>1995</th>
      <td>Adventure|Animation|Children|Comedy|Fantasy</td>
      </tr>
      <tr>
      <th>Jumanji</th>
      <th>1995</th>
      <td>Adventure|Children|Fantasy</td>
      </tr>
      <tr>
      <th>Grumpier Old Men</th>
      <th>1995</th>
      <td>Comedy|Romance</td>
      </tr>
      <tr>
      <th>Waiting to Exhale</th>
      <th>1995</th>
      <td>Comedy|Drama|Romance</td>
      </tr>
      <tr>
      <th>Father of the Bride Part II</th>
      <th>1995</th>
      <td>Comedy</td>
      </tr>
      </tbody>
      </table>
      </div></div>
      </div>
      </div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Cheatsheet">Cheatsheet<a class="anchor-link" href="#Cheatsheet"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 34" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Aquí tienes un <a href="https://cheatography.com/davechild/cheat-sheets/regular-expressions/pdf/" target="_blank" rel="nofollow noreferrer">cheatsheet</a> con un montón de patrones</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="davechild_regular-expressions" src="http://maximofn.com/wp-content/uploads/2024/02/davechild_regular-expressions-scaled.webp" width="848" height="1200"/></p>
      </section>
      






    </div>

  </section>

</PostLayout>
