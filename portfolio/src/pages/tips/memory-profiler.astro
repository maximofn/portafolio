---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Ver el uso de memoria de un script';
const end_url = 'tips/memory-profiler';
const description = 'Ver el uso de memoria de un script';
const keywords = 'python, memoria, profiler';
const languaje = 'ES';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/memory_profiling_thumbnail.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1999
    image_height=1125
    image_extension=webp
    article_date=2025-01-30+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Instalaci%C3%B3n"><h2>Instalación</h2></a>
      <a class="anchor-link" href="#Uso"><h2>Uso</h2></a>
      <a class="anchor-link" href="#Decorador"><h3>Decorador</h3></a>
      <a class="anchor-link" href="#Uso-de-memoria-en-el-tiempo"><h2>Uso de memoria en el tiempo</h2></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Ver-el-uso-de-memoria-de-un-script">Ver el uso de memoria de un script<a class="anchor-link" href="#Ver-el-uso-de-memoria-de-un-script"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 0" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si un script nos consume mucha RAM podemos monitorizarlo para ver qué es lo que está consumiendo.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Instalaci%C3%B3n">Instalación<a class="anchor-link" href="#Instalaci%C3%B3n"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para poder monitorearlo vamos a instalar <code>memory_profiler</code>. Lo podemos instalar con Conda</p>
      <div class="highlight"><pre><span></span>conda<span class="w"> </span>install<span class="w"> </span>memory_profiler
      </pre></div>
      <p>o con pip</p>
      <div class="highlight"><pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>memory_profiler
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso">Uso<a class="anchor-link" href="#Uso"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Decorador">Decorador<a class="anchor-link" href="#Decorador"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos poner un decorador en la función que queremos monitorizar.</p>
      <div class="highlight"><pre><span></span><span class="kn">from</span> <span class="nn">memory_profiler</span> <span class="kn">import</span> <span class="n">profile</span>
      
      <span class="nd">@profile</span>
      <span class="k">def</span> <span class="nf">my_function</span><span class="p">():</span>
          <span class="k">pass</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">%%writefile</span> memory_profiler_decorator.py',
          '<span class="kn">from</span> <span class="nn">memory_profiler</span> <span class="kn">import</span> <span class="n">profile</span>',
          '',
          '<span class="nd">@profile</span>',
          '<span class="k">def</span> <span class="nf">my_function</span><span class="p">():</span>',
          '    <span class="n">a</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">10</span> <span class="o">**</span> <span class="mi">6</span><span class="p">)</span>',
          '    <span class="n">b</span> <span class="o">=</span> <span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">*</span> <span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">**</span> <span class="mi">7</span><span class="p">)</span>',
          '    <span class="k">del</span> <span class="n">b</span>',
          '    <span class="k">return</span> <span class="n">a</span>',
          '',
          '<span class="k">if</span> <span class="vm">__name__</span> <span class="o">==</span> <span class="s1">\'__main__\'</span><span class="p">:</span>',
          '    <span class="n">my_function</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Overwriting memory_profiler_decorator.py',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora lo ejecutamos usando <code>-m memory_profiles memory_profiler_decorator.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>python<span class="w"> </span>-m<span class="w"> </span>memory_profiler<span class="w"> </span>memory_profiler_decorator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Filename: memory_profiler_decorator.py',
          'Line #    Mem usage    Increment  Occurrences   Line Contents',
          '=============================================================',
          '     3     49.5 MiB     49.5 MiB           1   @profile',
          '     4                                         def my_function():',
          '     5     57.0 MiB      7.5 MiB           1       a = [1] * (10 ** 6)',
          '     6    209.6 MiB    152.6 MiB           1       b = [2] * (2 * 10 ** 7)',
          '     7     57.2 MiB   -152.4 MiB           1       del b',
          '     8     57.2 MiB      0.0 MiB           1       return a',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, obtenemos el uso de memoria de cada línea del script.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Uso-de-memoria-en-el-tiempo">Uso de memoria en el tiempo<a class="anchor-link" href="#Uso-de-memoria-en-el-tiempo"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos obtener una gráfica del uso de memoria en el tiempo haciendo</p>
      <div class="highlight"><pre><span></span>mprof<span class="w"> </span>run<span class="w"> </span>memory_profiler_decorator.py
      mprof<span class="w"> </span>plot
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mprof<span class="w"> </span>run<span class="w"> </span>memory_profiler_decorator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'mprof: Sampling memory every 0.1s',
          'running new process',
          'running as a Python program...',
          'Filename: memory_profiler_decorator.py',
          'Line #    Mem usage    Increment  Occurrences   Line Contents',
          '=============================================================',
          '     3     49.5 MiB     49.5 MiB           1   @profile',
          '     4                                         def my_function():',
          '     5     57.0 MiB      7.5 MiB           1       a = [1] * (10 ** 6)',
          '     6    209.6 MiB    152.6 MiB           1       b = [2] * (2 * 10 ** 7)',
          '     7     57.2 MiB   -152.4 MiB           1       del b',
          '     8     57.2 MiB      0.0 MiB           1       return a',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span>mprof<span class="w"> </span>plot',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Using last profile data.',
          'Figure(1260x540)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Al ejecutarlo se crea esta gráfica</p>
      <p><img decoding="async" onerror="this.parentNode.removeChild(this)" alt="memory_profiler plot" src="https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/memory_profiler_plot.webp" width="1280" height="634"/></p>
      </section>
      






    </div>

  </section>

</PostLayout>
