---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'Tuplas de un solo elemento en Python';
const end_url = 'tips/single-element-tuples';
const description = 'Tip para crear tuplas de un solo elemento en Python';
const keywords = 'tuplas, python, un solo elemento';
const languaje = 'ES';
const image_path = 'https://images.maximofn.com/single-element-tuples.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=1280
    image_height=720
    image_extension=webp
    article_date=2024-09-09+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="Tuplas-de-un-solo-elemento">Tuplas de un solo elemento<a class="anchor-link" href="#Tuplas-de-un-solo-elemento"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 0" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si en Python queremos crear una lista de un solo elemento simplemente escribimos el elemento entre corchetes, por ejemplo:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="nb">list</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">]</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'list',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Sin embargo, con las tuplas no podemos escribir un elemento entre paréntesis</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'int',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, Python lo interpreta como un entero, no como una tupla. Para solucionar esto, se añade una coma después del elemento, por ejemplo:</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="n">tupla</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,)</span>',
          '<span class="nb">type</span><span class="p">(</span><span class="n">tupla</span><span class="p">)</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'tuple',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>¿Y esto para qué sirve? Cuando tenemos una función que devuelve varios parámetros, en realidad lo que está devolviendo es una tupla. Así que se puede dar el caso en el que tengamos un código que llama a una función, compruebe la longitud de la tupla que devuelve y procese cada elemento de la tupla. Veamos un ejemplo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">return_tuple</span><span class="p">():</span>',
          '    <span class="k">return</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span>',
          '',
          '<span class="k">def</span> <span class="nf">process_tuple</span><span class="p">():</span>',
          '    <span class="nb">tuple</span> <span class="o">=</span> <span class="n">return_tuple</span><span class="p">()</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">tuple</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
          '',
          '<span class="n">process_tuple</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1',
          '2',
          '3',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero, ¿qué pasa en este ejemplo si la función no devuelve una tupla? Obtendríamos un error</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">return_int</span><span class="p">():</span>',
          '    <span class="k">return</span> <span class="mi">1</span>',
          '',
          '<span class="k">def</span> <span class="nf">process_tuple</span><span class="p">():</span>',
          '    <span class="nb">tuple</span> <span class="o">=</span> <span class="n">return_int</span><span class="p">()</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">tuple</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
          '',
          '<span class="n">process_tuple</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '<span class="ansi-red-fg">---------------------------------------------------------------------------</span>',
          '<span class="ansi-red-fg">TypeError</span>                                 Traceback (most recent call last)',
          'Cell <span class="ansi-green-fg">In[5], line 9</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      6</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">for</span> i <span class="ansi-bold" style="color: rgb(175,0,255)">in</span> <span style="color: rgb(0,135,0)">tuple</span>:',
          '<span class="ansi-green-intense-fg ansi-bold">      7</span>         <span style="color: rgb(0,135,0)">print</span>(i)',
          '<span class="ansi-green-fg">----&gt; 9</span> process_tuple()',
          'Cell <span class="ansi-green-fg">In[5], line 6</span>, in <span class="ansi-cyan-fg">process_tuple</span><span class="ansi-blue-fg">()</span>',
          '<span class="ansi-green-intense-fg ansi-bold">      4</span> <span class="ansi-bold" style="color: rgb(0,135,0)">def</span> <span style="color: rgb(0,0,255)">process_tuple</span>():',
          '<span class="ansi-green-intense-fg ansi-bold">      5</span>     <span style="color: rgb(0,135,0)">tuple</span> <span style="color: rgb(98,98,98)">=</span> return_int()',
          '<span class="ansi-green-fg">----&gt; 6</span>     <span class="ansi-bold" style="color: rgb(0,135,0)">for</span> i <span class="ansi-bold" style="color: rgb(175,0,255)">in</span> <span style="color: rgb(0,135,0)">tuple</span>:',
          '<span class="ansi-green-intense-fg ansi-bold">      7</span>         <span style="color: rgb(0,135,0)">print</span>(i)',
          '<span class="ansi-red-fg">TypeError</span>: \'int\' object is not iterable',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtenemos un error porque Python intenta iterar a través de lo que devuelve la función, pero como devuelve un entero no puede iterar a través de él. Tenemos dos maneras de solucionar esto, una es que la función que procesa compruebe si se ha devuelto una tupla y en ese caso la procese, otra es que la función que devuelve valores, siempre devuelva una tupla, aunque sea de un solo elemento</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="k">def</span> <span class="nf">return_int</span><span class="p">():</span>',
          '    <span class="k">return</span> <span class="mi">1</span><span class="p">,</span>',
          '',
          '<span class="k">def</span> <span class="nf">process_tuple</span><span class="p">():</span>',
          '    <span class="nb">tuple</span> <span class="o">=</span> <span class="n">return_int</span><span class="p">()</span>',
          '    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">tuple</span><span class="p">:</span>',
          '        <span class="nb">print</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>',
          '',
          '<span class="n">process_tuple</span><span class="p">()</span>',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '1',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, en la función <code>return_int</code> se ha puesto una <code>,</code> al final del <code>return</code>, así que está devolviendo una tupla de un solo elemento, por lo que la función <code>process_tuple</code> no dará error.</p>
      </section>
      






    </div>

  </section>

</PostLayout>
