---
import PostLayout from '@layouts/PostLayout.astro';
import CodeBlockInputCell from '@components/CodeBlockInputCell.astro';
import CodeBlockOutputCell from '@components/CodeBlockOutputCell.astro';

const { metadata_page } = await import('@portfolio/consts.json');
const { colors } = await import('@portfolio/consts.json');
const { svg_paths } = await import('@portfolio/consts.json');

const page_title = 'unittest';
const end_url = 'unittest';
const description = 'Refactoriza sin miedo üõ†Ô∏è gracias a los test unitarios. En este post vas a aprender a hacer test unitarios en Python con la librer√≠a unittest üêç‚úÖ y a medir la cobertura de test üìä para que puedas hacer todas las modificaciones que quieras sin miedo a romper nada üí™';
const keywords = 'unnittest, python, test unitarios, cobertura de test, librer√≠a unittest, suite de test, caso de test, fixture de test, corredor de test, resultado de test, descubrimiento de test, cargador de test, suite de test, test';
const languaje = 'ES';
const image_path = 'https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/unittest.webp';
const opening_brace = '{';
const closing_brace = '}';
---

<PostLayout 
    title={page_title}
    languaje={languaje}
    description={description}
    keywords={keywords}
    author={metadata_page.author}
    theme_color={colors.background_color}
    end_url={end_url}
    image_path={image_path}
    image_width=522
    image_height=298
    image_extension=webp
    article_date=2024-11-03+T00:00:00Z
>

  <section class="post-body">


    <aside class="post-index">
      <a class="anchor-link" href="#Librer%C3%ADas-necesarias"><h2>Librer√≠as necesarias</h2></a>
      <a class="anchor-link" href="#Primeros-tests"><h2>Primeros tests</h2></a>
      <a class="anchor-link" href="#Configuraci%C3%B3n-de-los-tests"><h2>Configuraci√≥n de los tests</h2></a>
      <a class="anchor-link" href="#setUp"><h3><code>setUp</code></h3></a>
      <a class="anchor-link" href="#tearDown"><h3><code>tearDown</code></h3></a>
      <a class="anchor-link" href="#Documentaci%C3%B3n-de-errores"><h3>Documentaci√≥n de errores</h3></a>
      <a class="anchor-link" href="#asserts"><h3><code>assert</code>s</h3></a>
      <a class="anchor-link" href="#skip"><h3><code>skip</code></h3></a>
      <a class="anchor-link" href="#skipIf"><h3><code>skipIf</code></h3></a>
      <a class="anchor-link" href="#expectedFailure"><h3><code>expectedFailure</code></h3></a>
      <a class="anchor-link" href="#skipUnless"><h3><code>skipUnless</code></h3></a>
      <a class="anchor-link" href="#Organizar-los-tests"><h2>Organizar los tests</h2></a>
      <a class="anchor-link" href="#Mejores-pr%C3%A1cticas-a-la-hora-de-nombrar-los-test"><h2>Mejores pr√°cticas a la hora de nombrar los test</h2></a>
      <a class="anchor-link" href="#Mocking-de-APIs"><h2>Mocking de APIs</h2></a>
      <a class="anchor-link" href="#Modificar-el-resultado-de-objetos-mediante-patch"><h2>Modificar el resultado de objetos mediante <code>patch</code></h2></a>
      <a class="anchor-link" href="#Parametrizar-pruebas-con-subTest"><h2>Parametrizar pruebas con <code>subTest</code></h2></a>
      <a class="anchor-link" href="#Cobertura-de-test"><h2>Cobertura de test</h2></a>
      <a class="anchor-link" href="#Reporte-de-cobertura"><h3>Reporte de cobertura</h3></a>
    </aside>


    <div class="post-body-content">
      
      <section class="section-block-markdown-cell">
      <h1 id="unittest-Python">unittest Python<a class="anchor-link" href="#unittest-Python"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 0" src={svg_paths.link_svg_path}/></a></h1>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para realizar este post vamos a crear una carpeta llamada <code>testing_python</code> donde vamos a crear todo el c√≥digo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>testing_python',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Dentro de esa carpeta vamos a crear las carpetas <code>src</code> y <code>tests</code> donde vamos a poner el c√≥digo fuente y los tests respectivamente</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span>mkdir<span class="w"> </span>testing_python/src',
      '<span class="o">!</span>mkdir<span class="w"> </span>testing_python/tests',
        ]}
        languaje='python'
      ></CodeBlockInputCell>







      
      <section class="section-block-markdown-cell">
      <h2 id="Librer%C3%ADas-necesarias">Librer√≠as necesarias<a class="anchor-link" href="#Librer%C3%ADas-necesarias"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 1" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Para hacer los tests vamos a usar la librer√≠a <code>unittest</code> que viene por defecto en Python, pero adem√°s vamos a instalar <code>coverage</code> para poder ver la cobertura de los tests. La instalamos con Conda</p>
      <div class="highlight"><pre><span></span>conda<span class="w"> </span>install<span class="w"> </span>conda-forge::coverage
      </pre></div>
      <p>O con pip</p>
      <div class="highlight"><pre><span></span>pip<span class="w"> </span>install<span class="w"> </span>coverage
      </pre></div>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Primeros-tests">Primeros tests<a class="anchor-link" href="#Primeros-tests"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 2" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear un primer archivo llamado <code>calculator.py</code> en la carpeta <code>src</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def sum(a, b):"</span><span class="w">           </span>&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return a + b"</span><span class="w">        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def substract(a, b):"</span><span class="w">    </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return a - b"</span><span class="w">        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def multiply(a, b):"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return a * b"</span><span class="w">        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def divide(a, b):"</span><span class="w">       </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return a / b"</span><span class="w">        </span>&gt;&gt;<span class="w"> </span>testing_python/src/calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
















      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos un archivo llamado <code>test_calculator.py</code> en la carpeta <code>tests</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                  </span>&gt;<span class="w">  </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.calculator import sum, substract, multiply, divide"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestCalculator(unittest.TestCase):"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_sum(self):"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(sum(2, 2), 4)"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_substract(self):"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(substract(2, 1), 1)"</span><span class="w">                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_multiply(self):"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(multiply(2, 3), 6)"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_divide(self):"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(divide(6, 3), 2)"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




















      
      <section class="section-block-markdown-cell">
      <p>Ahora para ejecutarlo hacemos <code>python -m unittest tests/test_calculator.py discover -s tests</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....',
          '----------------------------------------------------------------------',
          'Ran 4 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, aparecen cuatro puntos por los dos tests que se han pasado y que han sido correctos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a modificar el archivo de test para provocar un error, vamos a hacer que al sumar 2 y 2 nos d√© 5</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                  </span>&gt;<span class="w">  </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.calculator import sum, substract, multiply, divide"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestCalculator(unittest.TestCase):"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_sum(self):"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(sum(2, 2), 5)"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_substract(self):"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(substract(2, 1), 1)"</span><span class="w">                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_multiply(self):"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(multiply(2, 3), 6)"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_divide(self):"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(divide(6, 3), 2)"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




















      
      <section class="section-block-markdown-cell">
      <p>Ahora corremos los test</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '...F',
          '======================================================================',
          'FAIL: test_sum (tests.test_calculator.TestCalculator)',
          '----------------------------------------------------------------------',
          'Traceback (most recent call last):',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_calculator.py", line 6, in test_sum',
          '    self.assertEqual(sum(2, 2), 5)',
          'AssertionError: 4 != 5',
          '----------------------------------------------------------------------',
          'Ran 4 tests in 0.000s',
          'FAILED (failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, ahora nos sale una <code>F</code> que significa que ha fallado un test, adem√°s, nos da la siguiente informaci√≥n</p>
      <pre><code>FAIL: test_sum (tests.test_calculator.TestCalculator)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_calculator.py", line 6, in test_sum
    self.assertEqual(sum(2, 2), 5)
AssertionError: 4 != 5</code></pre>
      <p>Nos est√° diciendo que ha fallado el test <code>test_sum</code> en la l√≠nea 6, que es la que hemos modificado, y que el resultado esperado era 5 y el obtenido 4</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una cosa que no hemos dicho y que es importante, es que no hemos llamado a los m√©todos <code>test_sum</code> y <code>test_subtract</code> directamente, se han ejecutado autom√°ticamente. Esto es debido a que los m√©todos que empiezan por <code>test_</code> son los que se ejecutan autom√°ticamente</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Una forma m√°s sencilla de ejecutar los tests es usar el comando <code>discover</code> que busca todos los archivos que empiezan por <code>test_</code> en la carpeta que le pasemos por el par√°metro <code>-s</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero volvemos a escribir bien los test</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                  </span>&gt;<span class="w">  </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.calculator import sum, substract, multiply, divide"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestCalculator(unittest.TestCase):"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_sum(self):"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(sum(2, 2), 4)"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_substract(self):"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(substract(2, 1), 1)"</span><span class="w">                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_multiply(self):"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(multiply(2, 3), 6)"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_divide(self):"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(divide(6, 3), 2)"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




















      
      <section class="section-block-markdown-cell">
      <p>Y ahora pasamos los tests mediante <code>discover</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....',
          '----------------------------------------------------------------------',
          'Ran 4 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ha encontrado los test y los ha pasado correctamente</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Configuraci%C3%B3n-de-los-tests">Configuraci√≥n de los tests<a class="anchor-link" href="#Configuraci%C3%B3n-de-los-tests"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 3" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="setUp"><code>setUp</code><a class="anchor-link" href="#setUp"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 4" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Con la librer√≠a <code>unittest</code> podemos configurar los tests, pero para verlo, primero vamos a crear un nuevo archivo de c√≥digo llamado <code>bank_account.py</code> en la carpeta <code>src</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class BankAccount:"</span><span class="w">                           </span>&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def __init__(self, balance=0):"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.balance = balance"</span><span class="w">              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def deposit(self, amount):"</span><span class="w">              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance += amount"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def withdraw(self, amount):"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance -= amount"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def get_balance(self):"</span><span class="w">                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>





















      
      <section class="section-block-markdown-cell">
      <p>Ahora a√±adimos tests al nuevo c√≥digo, creando un archivo llamado <code>test_bank_account.py</code> en la carpeta <code>tests</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear primero la prueba de a√±adir dep√≥sito, es decir, el m√©todo <code>deposit</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                              </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        account = BankAccount()"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = account.deposit(1500)"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>













      
      <section class="section-block-markdown-cell">
      <p>Pasamos los tests</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '.....',
          '----------------------------------------------------------------------',
          'Ran 5 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que hay cinco puntos, pero nosotros solo hemos escrito un test, as√≠ que usamos el flag <code>-v</code> para ver m√°s informaci√≥n</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 5 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que <code>discover</code> ha encontrado los tests <code>test_calculator</code> y <code>test_bank_account</code> y ha pasado los dos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a crear los tests para el resto de m√©todos</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                              </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        account = BankAccount(balance=1000)"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = account.deposit(500)"</span><span class="w">   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        account = BankAccount(balance=1000)"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = account.withdraw(200)"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800)"</span><span class="w">   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        account = BankAccount(balance=1000)"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = account.get_balance()"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>























      
      <section class="section-block-markdown-cell">
      <p>Pasamos los tests</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 7 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que han pasado satisfactoriamente. Ahora veamos una cosa, en todos los tests hemos hecho <code>account = BankAccount(balance=1000)</code> y luego hemos llamado a los m√©todos, esto es porque cada test se ejecuta en un nuevo objeto, es decir, no se comparten los objetos entre tests.</p>
      <p>De modo que podemos usar el m√©todo <code>setUp</code> para crear un objeto que se comparta entre todos los test</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000)"</span><span class="w">    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800)"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>























      
      <section class="section-block-markdown-cell">
      <p>Como vemos, hemos creado la cuenta en el m√©todo <code>setUp</code> y hemos eliminado la creaci√≥n de la cuenta en los tests. Vamos a pasar los test</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 7 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="tearDown"><code>tearDown</code><a class="anchor-link" href="#tearDown"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 5" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Igual que con el m√©todo <code>setUp</code> configuramos el entorno antes de ejecutar los tests, con el m√©todo <code>tearDown</code> podemos limpiar el entorno despu√©s de ejecutar los tests. Para probarlo vamos a a√±adir al c√≥digo de <code>bank_account.py</code> que las operaciones se escriban en un archivo de log</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class BankAccount:"</span><span class="w">                                                                   </span>&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def __init__(self, balance=0, log_file=None):"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.balance = balance"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.log_file = log_file"</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self._log_transaction(\'Account created\')"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def _log_transaction(self, message):"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if self.log_file:"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            with open(self.log_file, \'a\') as file:"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                file.write(f\'{message}\\\\\n\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def deposit(self, amount):"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance += amount"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self._log_transaction(f\'Deposit {amount}, new balance {self.balance}\')"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def withdraw(self, amount):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance -= amount"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self._log_transaction(f\'Withdraw {amount}, new balance {self.balance}\')"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def get_balance(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self._log_transaction(f\'Balance check, balance {self.balance}\')"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>































      
      <section class="section-block-markdown-cell">
      <p>Ahora a√±adimos un test al nuevo m√©todo <code>_log_transaction</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800)"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        assert os.path.exists(\'test_log.txt\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1000\\\\n\', "</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'])"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>









































      
      <section class="section-block-markdown-cell">
      <p>Pasamos los tests</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_transaction_log (test_bank_account.TestBankAccount) ... FAIL',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '======================================================================',
          'FAIL: test_transaction_log (test_bank_account.TestBankAccount)',
          '----------------------------------------------------------------------',
          'Traceback (most recent call last):',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_bank_account.py", line 28, in test_transaction_log',
          '    self.assertEqual(content, [',
          'AssertionError: Lists differ: [\'Acc[224 chars]00\n\', \'Account created\n\', \'Withdraw 200, new[246 chars]0\n\'] != [\'Acc[224 chars]00\n\']',
          'First list contains 10 additional elements.',
          'First extra element 8:',
          '\'Account created\n\'',
          '  [\'Account created\n\',',
          '   \'Deposit 500, new balance 1500\n\',',
          '   \'Account created\n\',',
          '   \'Balance check, balance 1000\n\',',
          '   \'Account created\n\',',
          '   \'Deposit 500, new balance 1500\n\',',
          '   \'Withdraw 200, new balance 1300\n\',',
          '-  \'Balance check, balance 1300\n\',',
          '-  \'Account created\n\',',
          '-  \'Withdraw 200, new balance 800\n\',',
          '-  \'Account created\n\',',
          '-  \'Deposit 500, new balance 1500\n\',',
          '-  \'Account created\n\',',
          '-  \'Balance check, balance 1000\n\',',
          '-  \'Account created\n\',',
          '-  \'Deposit 500, new balance 1500\n\',',
          '-  \'Withdraw 200, new balance 1300\n\',',
          '   \'Balance check, balance 1300\n\']',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'FAILED (failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Los test han salido bien, pero vemos que en el archivo de log hay muchas l√≠neas con el texto <code>Account created</code>, esto es porque al principio de cada test se ejecuta el m√©todo <code>setUp</code> que crea una cuenta, por lo que tenemos que crear el m√©todo <code>tearDown</code> para eliminar el archivo de log despu√©s de cada test</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Como es un archivo generado para el test, no deber√≠a existir despu√©s de ejecutar los tests, as√≠ que vamos a a√±adir el m√©todo <code>tearDown</code> para borrar el archivo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800)"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        assert os.path.exists(\'test_log.txt\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1000\\\\n\', "</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>














































      
      <section class="section-block-markdown-cell">
      <p>Volvemos a pasar los tests</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_transaction_log (test_bank_account.TestBankAccount) ... FAIL',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '======================================================================',
          'FAIL: test_transaction_log (test_bank_account.TestBankAccount)',
          '----------------------------------------------------------------------',
          'Traceback (most recent call last):',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_bank_account.py", line 32, in test_transaction_log',
          '    self.assertEqual(content, [',
          'AssertionError: Lists differ: [\'Acc[48 chars]n\', \'Withdraw 200, new balance 1300\n\', \'Balan[21 chars]0\n\'] != [\'Acc[48 chars]n\', \'Account created\n\', \'Balance check, balan[131 chars]0\n\']',
          'First differing element 2:',
          '\'Withdraw 200, new balance 1300\n\'',
          '\'Account created\n\'',
          'Second list contains 4 additional elements.',
          'First extra element 4:',
          '\'Account created\n\'',
          '  [\'Account created\n\',',
          '+  \'Deposit 500, new balance 1500\n\',',
          '+  \'Account created\n\',',
          '+  \'Balance check, balance 1000\n\',',
          '+  \'Account created\n\',',
          '   \'Deposit 500, new balance 1500\n\',',
          '   \'Withdraw 200, new balance 1300\n\',',
          '   \'Balance check, balance 1300\n\']',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'FAILED (failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Pero ahora nos da error, porque como al final de cada prueba hemos eliminado el archivo de log, ya no hay que comprobar que se haya escrito tanto texto, sino solo el del test que estamos haciendo. As√≠ que vamos a modificar el test para que solo compruebe que se ha escrito el texto del test</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800)"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        assert os.path.exists(\'test_log.txt\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










































      
      <section class="section-block-markdown-cell">
      <p>Y pasamos los test</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h3 id="Documentaci%C3%B3n-de-errores">Documentaci√≥n de errores<a class="anchor-link" href="#Documentaci%C3%B3n-de-errores"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 6" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Si te has fijado, hasta ahora en los tests us√°bamos <code>assertEqual</code>. Este m√©todo nos da la opci√≥n de escribir un mensaje de error cuando no se cumple la condici√≥n. Vamos a modificar un test para que falle y ver el mensaje de error</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 500, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        assert os.path.exists(\'test_log.txt\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










































      
      <section class="section-block-markdown-cell">
      <p>Pasamos los tests</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... FAIL',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '======================================================================',
          'FAIL: test_withdraw (test_bank_account.TestBankAccount)',
          '----------------------------------------------------------------------',
          'Traceback (most recent call last):',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_bank_account.py", line 19, in test_withdraw',
          '    self.assertEqual(new_balace, 500, \'Balance is not correct\')',
          'AssertionError: 800 != 500 : Balance is not correct',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'FAILED (failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como podemos ver, tenemos el mensaje que hemos escrito en el test <code>AssertionError: 800 != 500 : Balance is not correct</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="asserts"><code>assert</code>s<a class="anchor-link" href="#asserts"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 7" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hasta ahora hemos usado los <code>assertEqual</code>, pero hay m√°s, como por ejemplo el <code>assertTrue</code>. Vamos a modificar la l√≠nea <code>assert os.path.exists('test_log.txt')</code> por <code>self.assertTrue(os.path.exists('test_log.txt'))</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                     </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>










































      
      <section class="section-block-markdown-cell">
      <p>Y pasamos los test</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Algunos otros <code>assert</code>s que podemos usar son:</p>
      <ul>
      <li><code>assertEqual</code></li>
      <li><code>assertNotEqual</code></li>
      <li><code>assertTrue</code></li>
      <li><code>assertFalse</code></li>
      <li><code>assertRaises</code></li>
      </ul>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="skip"><code>skip</code><a class="anchor-link" href="#skip"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 8" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que en Python podemos usar <code>pass</code> para no hacer nada, en los tests podemos usar <code>skip</code> para saltar un test. Esto puede ser √∫til cuando sabemos que queremos pasar unas pruebas, pero a√∫n no est√° el c√≥digo para pasarlas.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Voy a a√±adir un test que compruebe si el usuario tiene un pr√©stamo, pero como a√∫n no hay c√≥digo referente a los pr√©stamos, voy a saltar el test</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>














































      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver qu√© pasa al ejecutarlo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_has_loan (test_bank_account.TestBankAccount) ... skipped \'Not implemented yet\'',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 9 tests in 0.001s',
          'OK (skipped=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver <code>test_has_loan (test_bank_account.TestBankAccount) ... skipped 'Not implemented yet'</code> se ha saltado ese test como quer√≠amos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="skipIf"><code>skipIf</code><a class="anchor-link" href="#skipIf"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 9" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Otra opci√≥n es usar <code>skipIf</code> para saltar un test si se cumple una condici√≥n. Voy a a√±adir una variable al principio llamada <code>server</code> para saber si estamos en un entorno local o en el servidor, y el test comprobar√° esa variable, de modo que si estamos en el servidor, se saltar√° el test</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"SERVER = True"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipIf(SERVER, \'Only for local testing\')"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_server(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(SERVER)"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




















































      
      <section class="section-block-markdown-cell">
      <p>Si pasamos los tests</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_has_loan (test_bank_account.TestBankAccount) ... skipped \'Not implemented yet\'',
          'test_server (test_bank_account.TestBankAccount) ... skipped \'Only for local testing\'',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 10 tests in 0.001s',
          'OK (skipped=2)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos <code>test_server (test_bank_account.TestBankAccount) ... skipped 'Only for local testing'</code> ya que, como <code>SERVER = True</code>, se ha saltado el test</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="expectedFailure"><code>expectedFailure</code><a class="anchor-link" href="#expectedFailure"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 10" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Se tiene que producir un error cuando un usuario quiere sacar m√°s dinero del que tiene, de modo que con el m√©todo <code>expectedFailure</code> podemos decir que esperamos que falle el test</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"SERVER = True"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipIf(SERVER, \'Only for local testing\')"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_server(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(SERVER)"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.expectedFailure"</span><span class="w">                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_fail(self):"</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(1200)"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Not enough money\')"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>

























































      
      <section class="section-block-markdown-cell">
      <p>Pasamos los tests</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_fail (test_bank_account.TestBankAccount) ... expected failure',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_has_loan (test_bank_account.TestBankAccount) ... skipped \'Not implemented yet\'',
          'test_server (test_bank_account.TestBankAccount) ... skipped \'Only for local testing\'',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 11 tests in 0.001s',
          'OK (skipped=2, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, obtenemos <code>test_fail (test_bank_account.TestBankAccount) ... expected failure</code> porque es un error que esper√°bamos</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="skipUnless"><code>skipUnless</code><a class="anchor-link" href="#skipUnless"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 11" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Al igual que antes, puede que haya pruebas que solo queramos hacer en el entorno de desarrollo, pero nunca en el servidor, o en staging, o en producci√≥n. Para eso podemos usar <code>skipUnless</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"SERVER = True"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"ENVIRONMENT = \'server\'"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipIf(SERVER, \'Only for local testing\')"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_server(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(SERVER)"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.expectedFailure"</span><span class="w">                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_fail(self):"</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(1200)"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Not enough money\')"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipUnless(ENVIRONMENT == \'dev\', \'Only for dev environment\')"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_environment(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(ENVIRONMENT, \'dev\')"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






























































      
      <section class="section-block-markdown-cell">
      <p>Pasamos los tests</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>discover<span class="w"> </span>-s<span class="w"> </span>tests<span class="w"> </span>-v',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'test_deposit (test_bank_account.TestBankAccount) ... ok',
          'test_environment (test_bank_account.TestBankAccount) ... skipped \'Only for dev environment\'',
          'test_fail (test_bank_account.TestBankAccount) ... expected failure',
          'test_get_balance (test_bank_account.TestBankAccount) ... ok',
          'test_has_loan (test_bank_account.TestBankAccount) ... skipped \'Not implemented yet\'',
          'test_server (test_bank_account.TestBankAccount) ... skipped \'Only for local testing\'',
          'test_transaction_log (test_bank_account.TestBankAccount) ... ok',
          'test_withdraw (test_bank_account.TestBankAccount) ... ok',
          'test_divide (test_calculator.TestCalculator) ... ok',
          'test_multiply (test_calculator.TestCalculator) ... ok',
          'test_substract (test_calculator.TestCalculator) ... ok',
          'test_sum (test_calculator.TestCalculator) ... ok',
          '----------------------------------------------------------------------',
          'Ran 12 tests in 0.001s',
          'OK (skipped=3, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Obtenemos <code>test_environment (test_bank_account.TestBankAccount) ... skipped 'Only for dev environment'</code> porque ese test solo se va a pasar en el entorno de desarrollo y se supone que estamos en el servidor</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Organizar-los-tests">Organizar los tests<a class="anchor-link" href="#Organizar-los-tests"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 12" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos organizar los test organizando lo que se llaman <code>test suites</code>. Para ello vamos a crear un archivo llamado <code>test_suites.py</code> en la carpeta <code>tests</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nb">cd</span><span class="w"> </span>tests<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>touch<span class="w"> </span>test_suites.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






      
      <section class="section-block-markdown-cell">
      <p>Y ahora generamos dos test suite con los tests de <code>test_calculator</code> y <code>test_bank_account</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                              </span>&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from test_calculator import TestCalculator"</span><span class="w">                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def calculator_suite():"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite = unittest.TestSuite()"</span><span class="w">                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestCalculator(\'test_sum\'))"</span><span class="w">               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestCalculator(\'test_substract\'))"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestCalculator(\'test_multiply\'))"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestCalculator(\'test_divide\'))"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return suite"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"if __name__ == \'__main__\':"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    runner = unittest.TextTestRunner()"</span><span class="w">                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    runner.run(calculator_suite())"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




















      
      <section class="section-block-markdown-cell">
      <p>Ahora el de <code>test_bank_account</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                              </span>&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from test_bank_account import TestBankAccount"</span><span class="w">               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def bank_account_suite():"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite = unittest.TestSuite()"</span><span class="w">                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_deposit\'))"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_withdraw\'))"</span><span class="w">         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_get_balance\'))"</span><span class="w">      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_transaction_log\'))"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_has_loan\'))"</span><span class="w">         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_server\'))"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_fail\'))"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    suite.addTest(TestBankAccount(\'test_environment\'))"</span><span class="w">      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    return suite"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"if __name__ == \'__main__\':"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    runner = unittest.TextTestRunner()"</span><span class="w">                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    runner.run(bank_account_suite())"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_suite_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
























      
      <section class="section-block-markdown-cell">
      <p>Podemos ejecutar solo los tests de <code>test_calculator</code> con el comando <code>python tests/test_suite_calculator.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>tests/test_suite_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Traceback (most recent call last):',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_suite_calculator.py", line 3, in &lt;module&gt;',
          '    from test_calculator import TestCalculator',
          '  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_calculator.py", line 2, in &lt;module&gt;',
          '    from src.calculator import sum, substract, multiply, divide',
          'ModuleNotFoundError: No module named \'src\'',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que no encuentra el m√≥dulo <code>src</code> de <code>test_calculator.py</code>, eso es porque no est√° en la ruta, as√≠ que vamos a a√±adirlo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">PYTHONPATH</span><span class="o">=</span>.<span class="w"> </span>python<span class="w"> </span>tests/test_suite_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....',
          '----------------------------------------------------------------------',
          'Ran 4 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vemos que solo ha pasado los test de <code>test_calculator</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a pasar ahora los de <code>test_bank_account.py</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">PYTHONPATH</span><span class="o">=</span>.<span class="w"> </span>python<span class="w"> </span>tests/test_suite_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....ssxs',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK (skipped=3, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Y aqu√≠ vemos que pasa los tests de <code>test_bank_account</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Hay que diferenciar con lo que hac√≠amos al principio, antes de usar <code>discover</code>, cuando hac√≠amos <code>!cd testing_python &amp;&amp; python -m unittest tests/test_calculator.py</code>. Porque en <code>test_calculator.py</code> podemos escribir todos los posibles test para <code>calculator.py</code>, pero con las <code>suite</code>s ejecutamos los test que queramos. Podr√≠amos tener varias <code>suite</code>s para ejecutar los test que queramos de <code>test_calculator.py</code> y <code>test_bank_account.py</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Mejores-pr%C3%A1cticas-a-la-hora-de-nombrar-los-test">Mejores pr√°cticas a la hora de nombrar los test<a class="anchor-link" href="#Mejores-pr%C3%A1cticas-a-la-hora-de-nombrar-los-test"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 13" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>A la hora de nombrar los test viene bien seguir las siguientes pautas:</p>
      <ul>
      <li>Una clase de test por cada clase de c√≥digo</li>
      <li>Todos los test deben empezar por <code>test_</code> para saber que es un c√≥digo</li>
      <li>A continuaci√≥n debe ir el nombre de la funci√≥n o m√©todo que se est√° probando</li>
      <li>A continuaci√≥n debe ir el escenario de la prueba, ya que un m√©todo o funci√≥n puede tener varios escenarios de prueba. Por ejemplo con todos los posibles valores de entrada, con valores l√≠mite, con valores incorrectos, etc.</li>
      <li>Por √∫ltimo, se debe a√±adir el resultado esperado</li>
      </ul>
      <p>Por lo que un test deber√≠a tener el siguiente formato <code>test_&lt;nombre_funcion&gt;_&lt;escenario&gt;_&lt;resultado_esperado&gt;</code></p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Mocking-de-APIs">Mocking de APIs<a class="anchor-link" href="#Mocking-de-APIs"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 14" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Supongamos que nuestro c√≥digo llama a una API externa y queremos hacer tests de nuestro c√≥digo sin depender de la API externa. Para ello podemos usar <code>unittest.mock</code> que viene por defecto en Python</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Primero vamos a crear un archivo llamado <code>api.py</code> en la carpeta <code>src</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import requests"</span><span class="w">                                              </span>&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"def get_api():"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    url = \'https://jsonplaceholder.typicode.com/posts/1\'"</span><span class="w">    </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    try:"</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        response = requests.get(url)"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        response.raise_for_status()"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        data = response.json()"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        print(data)"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return data"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    except requests.exceptions.RequestException as e:"</span><span class="w">       </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        print(f\'error: {e}\')"</span><span class="w">                                </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return None"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"if __name__ == \'__main__\':"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    get_api()"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/src/api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>





















      
      <section class="section-block-markdown-cell">
      <p>Vamos a ejecutar el archivo para ver qu√© devuelve</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python/src<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'userId\': 1, \'id\': 1, \'title\': \'sunt aut facere repellat provident occaecati excepturi optio reprehenderit\', \'body\': \'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto\'}',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Ahora creamos el test</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                              </span>&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.api import get_api"</span><span class="w">                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestApi(unittest.TestCase):"</span><span class="w">                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_api(self):"</span><span class="w">                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        data = get_api()"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsNotNone(data)"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsInstance(data, dict)"</span><span class="w">                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'userId\', data)"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'id\', data)"</span><span class="w">                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'title\', data)"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'body\', data)"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(data[\'userId\'], 1)"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(data[\'id\'], 1)"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>



















      
      <section class="section-block-markdown-cell">
      <p>Pasamos los tests</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>tests/test_api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'userId\': 1, \'id\': 1, \'title\': \'sunt aut facere repellat provident occaecati excepturi optio reprehenderit\', \'body\': \'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto\'}',
          '.',
          '----------------------------------------------------------------------',
          'Ran 1 test in 0.074s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a pasar los test de <code>bank_account</code> para ver cu√°nto tardaba</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">PYTHONPATH</span><span class="o">=</span>.<span class="w"> </span>python<span class="w"> </span>tests/test_suite_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....ssxs',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK (skipped=3, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos 8 tests han tardado 0.001 segundos, mientras que 1 solo test de la API ha tardado 0.074 segundos. Esto puede hacer que un c√≥digo con muchas llamadas a una API tarde mucho en ejecutar los tests. Adem√°s, corremos el riesgo de que si cambia la API y no nos devuelve lo que esperamos, los tests fallar√°n, aunque nuestro c√≥digo est√© bien. As√≠ que para eso se mockean las APIs</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Vamos a ver c√≥mo hacerlo</p>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                              </span>&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.api import get_api"</span><span class="w">                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from unittest.mock import patch"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestApi(unittest.TestCase):"</span><span class="w">                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @patch(\'src.api.requests.get\')"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_api(self, mock_get):"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_get.return_value.status_code = 200"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_get.return_value.json.return_value = {"</span><span class="w">         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'userId\': 1,"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'id\': 1,"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'title\': \'title\',"</span><span class="w">                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'body\': \'body\'"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        }"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        data = get_api()"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsNotNone(data)"</span><span class="w">                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsInstance(data, dict)"</span><span class="w">                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'userId\', data)"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'id\', data)"</span><span class="w">                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'title\', data)"</span><span class="w">                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIn(\'body\', data)"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(data[\'userId\'], 1)"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(data[\'id\'], 1)"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        "</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_get.assert_called_once_with(\'https://jsonplaceholder.typicode.com/posts/1\')"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>






























      
      <section class="section-block-markdown-cell">
      <p>Lo que hemos hecho ha sido</p>
      <ul>
      <li>Importar <code>patch</code> de <code>unittest.mock</code>.</li>
      <li>Hemos puesto un decorador a la funci√≥n <code>test_get_data</code> y hemos pasado como par√°metro al decorador la funci√≥n que queremos mockear.</li>
      <li>Hemos creado un objeto <code>mock_get</code> que es el que va a sustituir a la funci√≥n original con el m√©todo <code>return_value</code> que es el valor que va a devolver la funci√≥n mockeada.</li>
      <li>Cuando se llame a <code>get_api()</code> en vez de ejecutarse la funci√≥n original, se obtendr√° en <code>data</code> el valor que hemos mockeado en <code>return_value</code></li>
      <li>Por √∫ltimo hemos a√±adido la comprobaci√≥n de que se puede llamar a la <code>URL</code> de la API</li>
      </ul>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>python<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>tests/test_api.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '{\'userId\': 1, \'id\': 1, \'title\': \'title\', \'body\': \'body\'}',
          '.',
          '----------------------------------------------------------------------',
          'Ran 1 test in 0.001s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, ahora solo tarda 0.002 segundos.</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h2 id="Modificar-el-resultado-de-objetos-mediante-patch">Modificar el resultado de objetos mediante <code>patch</code><a class="anchor-link" href="#Modificar-el-resultado-de-objetos-mediante-patch"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 15" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Supongamos que queremos modificar el m√©todo de sacar dinero para que solo se pueda hacer en un rango de horas</p>
      <p>Primero modificamos la funci√≥n de retirar dinero</p>
      <div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">withdraw</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">amount</span><span class="p">):</span>
<span class="n">now</span> <span class="o">=</span> <span class="n">datetime</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>
<span class="k">if</span> <span class="n">now</span><span class="o">.</span><span class="n">hour</span> <span class="o">&lt;</span> <span class="mi">7</span> <span class="ow">or</span> <span class="n">now</span><span class="o">.</span><span class="n">hour</span> <span class="o">&gt;</span> <span class="mi">18</span><span class="p">:</span>
    <span class="nb">print</span><span class="p">(</span><span class="s1">'Out of hours'</span><span class="p">)</span>
    <span class="k">return</span> <span class="kc">None</span>
<span class="k">if</span> <span class="n">amount</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">balance</span> <span class="o">-=</span> <span class="n">amount</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">_log_transaction</span><span class="p">(</span><span class="sa">f</span><span class="s1">'Withdraw </span><span class="si">{opening_brace}</span><span class="n">amount</span><span class="si">{closing_brace}</span><span class="s1">, new balance </span><span class="si">{opening_brace}</span><span class="bp">self</span><span class="o">.</span><span class="n">balance</span><span class="si">{closing_brace}</span><span class="s1">'</span><span class="p">)</span>
<span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">balance</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from datetime import datetime"</span><span class="w">                                                        </span>&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class BankAccount:"</span><span class="w">                                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def __init__(self, balance=0, log_file=None):"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.balance = balance"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.log_file = log_file"</span><span class="w">                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self._log_transaction(\'Account created\')"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def _log_transaction(self, message):"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if self.log_file:"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            with open(self.log_file, \'a\') as file:"</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                file.write(f\'{message}\\\\\n\')"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def deposit(self, amount):"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance += amount"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self._log_transaction(f\'Deposit {amount}, new balance {self.balance}\')"</span><span class="w">  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def withdraw(self, amount):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        now = datetime.now()"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if now.hour &lt; 7 or now.hour &gt; 18:"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            print(\'Out of hours\')"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            return None"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if amount &gt; 0:"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self.balance -= amount"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            self._log_transaction(f\'Withdraw {amount}, new balance {self.balance}\')"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def get_balance(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self._log_transaction(f\'Balance check, balance {self.balance}\')"</span><span class="w">             </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        return self.balance"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/src/bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>





































      
      <section class="section-block-markdown-cell">
      <p>Ahora tenemos que poder probar la retirada de dinero a distintas horas, pero no podemos estar cambiando la hora del sistema, ni podemos esperar a que sea una hora determinada para hacer la prueba. Para eso podemos usar <code>patch</code> para modificar el resultado de <code>datetime.now()</code></p>
      <div class="highlight"><pre><span></span><span class="nd">@patch</span><span class="p">(</span><span class="s1">'src.bank_account.datetime.now'</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">test_withdraw_during_working_hours</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mock_now</span><span class="p">):</span>
        <span class="n">mock_now</span><span class="o">.</span><span class="n">return_value</span><span class="o">.</span><span class="n">hour</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">new_balance</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">account</span><span class="o">.</span><span class="n">withdraw</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">new_balance</span><span class="p">,</span> <span class="mi">800</span><span class="p">,</span> <span class="s1">'Balance is not correct'</span><span class="p">)</span>

    <span class="nd">@patch</span><span class="p">(</span><span class="s1">'src.bank_account.datetime.now'</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">test_withdraw_during_non_working_hours</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">mock_now</span><span class="p">):</span>
<span class="n">mock_now</span><span class="o">.</span><span class="n">return_value</span><span class="o">.</span><span class="n">hour</span> <span class="o">=</span> <span class="mi">20</span>
<span class="n">new_balance</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">account</span><span class="o">.</span><span class="n">withdraw</span><span class="p">(</span><span class="mi">200</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">assertIsNone</span><span class="p">(</span><span class="n">new_balance</span><span class="p">,</span> <span class="s1">'Balance is not correct'</span><span class="p">)</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from unittest.mock import patch"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"SERVER = True"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"ENVIRONMENT = \'server\'"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @patch(\'src.bank_account.datetime.now\')"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw_during_working_hours(self, mock_now):"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_now.return_value.hour = 10"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @patch(\'src.bank_account.datetime.now\')"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw_during_non_working_hours(self, mock_now):"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_now.return_value.hour = 20"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsNone(new_balace, \'Balance is not correct\')"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipIf(SERVER, \'Only for local testing\')"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_server(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(SERVER)"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.expectedFailure"</span><span class="w">                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_fail(self):"</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(1200)"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Not enough money\')"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipUnless(ENVIRONMENT == \'dev\', \'Only for dev environment\')"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_environment(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(ENVIRONMENT, \'dev\')"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>











































































      
      <section class="section-block-markdown-cell">
      <p>Pasamos los tests</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">PYTHONPATH</span><span class="o">=</span>.<span class="w"> </span>python<span class="w"> </span>tests/test_suite_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....ssxs',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK (skipped=3, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Parametrizar-pruebas-con-subTest">Parametrizar pruebas con <code>subTest</code><a class="anchor-link" href="#Parametrizar-pruebas-con-subTest"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 16" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Supongamos que queremos hacer varias pruebas de sacar dinero para diferentes valores, podr√≠amos escribir una prueba para cada valor de dinero que queremos probar, pero ser√≠a repetir c√≥digo. Para eso podemos usar <code>subTest</code> que nos permite hacer varias pruebas con un solo test</p>
      <p>Lo que hacemos es crear un diccionario con los diferentes valores que queremos probar y el resultado esperado, y luego con un bucle <code>for</code> y <code>subTest</code> hacemos las pruebas. As√≠ quedar√≠a el test del m√©todo <code>withdraw</code></p>
      <div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">test_withdraw</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
  <span class="n">test_cases</span> <span class="o">=</span> <span class="p">{opening_brace}</span>
      <span class="n">test_200</span><span class="p">:</span> <span class="p">{opening_brace}</span>
          <span class="s1">'amount'</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
          <span class="s1">'expected'</span><span class="p">:</span> <span class="mi">800</span>
      <span class="p">{closing_brace},</span>
      <span class="n">test_400</span><span class="p">:</span> <span class="p">{opening_brace}</span>
          <span class="s1">'amount'</span><span class="p">:</span> <span class="mi">400</span><span class="p">,</span>
          <span class="s1">'expected'</span><span class="p">:</span> <span class="mi">600</span>
      <span class="p">{closing_brace},</span>
      <span class="n">test_600</span><span class="p">:</span> <span class="p">{opening_brace}</span>
          <span class="s1">'amount'</span><span class="p">:</span> <span class="mi">600</span><span class="p">,</span>
          <span class="s1">'expected'</span><span class="p">:</span> <span class="mi">400</span>
      <span class="p">{closing_brace},</span>
      <span class="n">test_800</span><span class="p">:</span> <span class="p">{opening_brace}</span>
          <span class="s1">'amount'</span><span class="p">:</span> <span class="mi">800</span><span class="p">,</span>
          <span class="s1">'expected'</span><span class="p">:</span> <span class="mi">200</span>
      <span class="p">{closing_brace},</span>
      <span class="n">test_1000</span><span class="p">:</span> <span class="p">{opening_brace}</span>
          <span class="s1">'amount'</span><span class="p">:</span> <span class="mi">1000</span><span class="p">,</span>
          <span class="s1">'expected'</span><span class="p">:</span> <span class="mi">0</span>
      <span class="p">{closing_brace}</span>
  <span class="p">{closing_brace}</span>

  <span class="k">for</span> <span class="n">test_name</span><span class="p">,</span> <span class="n">test_case</span> <span class="ow">in</span> <span class="n">test_cases</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
      <span class="k">with</span> <span class="bp">self</span><span class="o">.</span><span class="n">subTest</span><span class="p">(</span><span class="n">test_name</span><span class="p">):</span>
          <span class="bp">self</span><span class="o">.</span><span class="n">account</span> <span class="o">=</span> <span class="n">BankAccount</span><span class="p">(</span><span class="n">balance</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">log_file</span><span class="o">=</span><span class="s1">'test_log.txt'</span><span class="p">)</span>
          <span class="n">new_balance</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">account</span><span class="o">.</span><span class="n">withdraw</span><span class="p">(</span><span class="n">test_case</span><span class="p">[</span><span class="s1">'amount'</span><span class="p">])</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">assertEqual</span><span class="p">(</span><span class="n">new_balance</span><span class="p">,</span> <span class="n">test_case</span><span class="p">[</span><span class="s1">'expected'</span><span class="p">],</span> <span class="s1">'Balance is not correct'</span><span class="p">)</span>
      </pre></div>
      </section>
      
      <CodeBlockInputCell
        text={[
      '<span></span><span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import unittest"</span><span class="w">                                                                      </span>&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from unittest.mock import patch"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"import os"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"from src.bank_account import BankAccount"</span><span class="w">                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"SERVER = True"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"ENVIRONMENT = \'server\'"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"class TestBankAccount(unittest.TestCase):"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def setUp(self):"</span><span class="w">                                                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def tearDown(self):"</span><span class="w">                                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        if os.path.exists(\'test_log.txt\'):"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            os.remove(\'test_log.txt\')"</span><span class="w">                                               </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_deposit(self):"</span><span class="w">                                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.deposit(500)"</span><span class="w">                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 1500)"</span><span class="w">                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        test_cases = {"</span><span class="w">                                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'test_200\': {"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'amount\': 200,"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'expected\': 800"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            },"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'test_400\': {"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'amount\': 400,"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'expected\': 600"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            },"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'test_600\': {"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'amount\': 600,"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'expected\': 400"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            },"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'test_800\': {"</span><span class="w">                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'amount\': 800,"</span><span class="w">                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'expected\': 200"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            },"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'test_1000\': {"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'amount\': 1000,"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                \'expected\': 0"</span><span class="w">                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            }"</span><span class="w">                                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        }"</span><span class="w">                                                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        for test_case, values in test_cases.items():"</span><span class="w">                                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            with self.subTest(test_case=test_case):"</span><span class="w">                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                self.account = BankAccount(balance=1000, log_file=\'test_log.txt\')"</span><span class="w">   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                new_balace = self.account.withdraw(values[\'amount\'])"</span><span class="w">                </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"                self.assertEqual(new_balace, values[\'expected\'], \'Balance is not correct\')"</span><span class="w"> </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @patch(\'src.bank_account.datetime.now\')"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw_during_working_hours(self, mock_now):"</span><span class="w">                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_now.return_value.hour = 10"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Balance is not correct\')"</span><span class="w">                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @patch(\'src.bank_account.datetime.now\')"</span><span class="w">                                         </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_withdraw_during_non_working_hours(self, mock_now):"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        mock_now.return_value.hour = 20"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(200)"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertIsNone(new_balace, \'Balance is not correct\')"</span><span class="w">                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_get_balance(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        balance = self.account.get_balance()"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(balance, 1000)"</span><span class="w">                                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_transaction_log(self):"</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.deposit(500)"</span><span class="w">                                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.withdraw(200)"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.account.get_balance()"</span><span class="w">                                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(os.path.exists(\'test_log.txt\'))"</span><span class="w">                             </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        with open(\'test_log.txt\', \'r\') as file:"</span><span class="w">                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            content = file.readlines()"</span><span class="w">                                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(content, ["</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Account created\\\\n\', "</span><span class="w">                                                 </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Deposit 500, new balance 1500\\\\n\', "</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Withdraw 200, new balance 1300\\\\n\', "</span><span class="w">                                  </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            \'Balance check, balance 1300\\\\n\'"</span><span class="w">                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"            ])"</span><span class="w">                                                                      </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skip(\'Not implemented yet\')"</span><span class="w">                                           </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_has_loan(self):"</span><span class="w">                                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertFalse(self.account.has_loan())"</span><span class="w">                                   </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipIf(SERVER, \'Only for local testing\')"</span><span class="w">                              </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_server(self):"</span><span class="w">                                                          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertTrue(SERVER)"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.expectedFailure"</span><span class="w">                                                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_fail(self):"</span><span class="w">                                                            </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        new_balace = self.account.withdraw(1200)"</span><span class="w">                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(new_balace, 800, \'Not enough money\')"</span><span class="w">                       </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">""</span><span class="w">                                                                                    </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    @unittest.skipUnless(ENVIRONMENT == \'dev\', \'Only for dev environment\')"</span><span class="w">          </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"    def test_environment(self):"</span><span class="w">                                                     </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
      '<span class="o">!</span><span class="nb">echo</span><span class="w"> </span><span class="s2">"        self.assertEqual(ENVIRONMENT, \'dev\')"</span><span class="w">                                        </span>&gt;&gt;<span class="w"> </span>testing_python/tests/test_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>




































































































      
      <section class="section-block-markdown-cell">
      <p>Pasamos los tests</p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span><span class="nv">PYTHONPATH</span><span class="o">=</span>.<span class="w"> </span>python<span class="w"> </span>tests/test_suite_bank_account.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....ssxs',
          '----------------------------------------------------------------------',
          'Ran 8 tests in 0.001s',
          'OK (skipped=3, expected failures=1)',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <h2 id="Cobertura-de-test">Cobertura de test<a class="anchor-link" href="#Cobertura-de-test"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 17" src={svg_paths.link_svg_path}/></a></h2>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Podemos ver la cobertura de tests que tenemos, ya que aunque pensemos que hemos probado todo, puede que haya partes del c√≥digo que no hemos probado. Para ello vamos a usar la librer√≠a <code>coverage</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>coverage<span class="w"> </span>run<span class="w"> </span>-m<span class="w"> </span>unittest<span class="w"> </span>tests/test_calculator.py',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          '....',
          '----------------------------------------------------------------------',
          'Ran 4 tests in 0.000s',
          'OK',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Como vemos, solo hemos pasado los test de <code>test_calculator</code>, pero a√∫n no sabemos la cobertura</p>
      </section>
      
      <section class="section-block-markdown-cell">
      <h3 id="Reporte-de-cobertura">Reporte de cobertura<a class="anchor-link" href="#Reporte-de-cobertura"><img decoding="async" class="link-img" width="24px" height="24px" alt="link image 18" src={svg_paths.link_svg_path}/></a></h3>
      </section>
      
      <section class="section-block-markdown-cell">
      <p>Despu√©s de haber ejecutado <code>coverage</code> podemos pedirle un reporte de la cobertura de test con el comando <code>coverage report</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>coverage<span class="w"> </span>report',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Name                       Stmts   Miss  Cover',
          '----------------------------------------------',
          'src/calculator.py              8      0   100%',
          'tests/test_calculator.py      11      0   100%',
          '----------------------------------------------',
          'TOTAL                         19      0   100% ',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>O ped√≠rselo mediante un archivo HTML con el comando <code>coverage html</code></p>
      </section>
      
      <CodeBlockInputCell
        text={[
          '<span></span><span class="o">!</span><span class="nb">cd</span><span class="w"> </span>testing_python<span class="w"> </span><span class="o">&amp;&amp;</span><span class="w"> </span>coverage<span class="w"> </span>html',
        ]}
        languaje='python'
      ></CodeBlockInputCell>
      <CodeBlockOutputCell
        text={[
          'Wrote HTML report to ]8;;file:///home/wallabot/Documentos/web/portafolio/posts/testing_python/htmlcov/index.htmlhtmlcov/index.html]8;;',
        ]}
        languaje='python'
      ></CodeBlockOutputCell>
      
      <section class="section-block-markdown-cell">
      <p>Se nos crea un archivo <code>index.html</code> en la carpeta <code>htmlcov</code> que podemos abrir en el navegador y ver la cobertura de los test</p>
      </section>
      






    </div>

  </section>

</PostLayout>
