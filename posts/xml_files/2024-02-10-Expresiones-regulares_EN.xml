<?xml version='1.0' encoding='utf-8'?>
<notebook>
  <markdown># Regular expressions</markdown>
  <input_code>import re</input_code>
  <markdown>This notebook has been automatically translated to make it accessible to more people, please let me know if you see any typos.

## Methods</markdown>
  <markdown />
  <markdown>### Findall</markdown>
  <markdown>With the `findall()` method we can find all matches of a pattern in a string</markdown>
  <input_code>string = "Hola, soy un string"
print(re.findall("Hola, soy", string))</input_code>
  <output_code>['Hola, soy']
</output_code>
  <markdown>### Search</markdown>
  <markdown>But if we want to find the position where a pattern is located, we can use the `search()` method to search for a pattern in a string. This method returns a Match object if it finds a match, otherwise it returns None.</markdown>
  <input_code>print(re.search("soy", string))</input_code>
  <output_code>&lt;re.Match object; span=(6, 9), match='soy'&gt;
</output_code>
  <markdown>### Match</markdown>
  <markdown>We can also use the `match()` method that looks for the pattern **at the beginning** of the string.</markdown>
  <input_code>print(re.match("Hola", string))
print(re.match("soy", string))</input_code>
  <output_code>&lt;re.Match object; span=(0, 4), match='Hola'&gt;
None
</output_code>
  <markdown>### Span</markdown>
  <markdown>If we want to get the position of the match, we can use the `span()` method which returns a tuple with the start and end position of the match.</markdown>
  <input_code>print(re.match("Hola", string).span())</input_code>
  <output_code>(0, 4)
</output_code>
  <markdown>### Group</markdown>
  <markdown>Knowing the position of the match, we can use the `group()` method to get the substring that matches the pattern.</markdown>
  <input_code>print(re.match("Hola", string).group())</input_code>
  <output_code>Hola
</output_code>
  <markdown>We could also use the start and end of the match to make a slice of the string.</markdown>
  <input_code>start, end = re.match("Hola", string).span()
print(string[start:end])</input_code>
  <output_code>Hola
</output_code>
  <markdown>### Split</markdown>
  <markdown>With the `split()` method we can split a string into a list of substrings using a pattern as a separator.</markdown>
  <input_code>split = re.split("soy", string)
print(split)</input_code>
  <output_code>['Hola, ', ' un string']
</output_code>
  <markdown>The sentence has been divided into two strings using "soy" as separator.</markdown>
  <markdown>### Sub</markdown>
  <markdown>With the `sub()` method we can replace all matches of a pattern with another substring.</markdown>
  <input_code>sub = re.sub("soy", "eres", string)
print(sub)</input_code>
  <output_code>Hola, eres un string
</output_code>
  <markdown>It has replaced all "I am" matches with "you are".</markdown>
  <markdown>## Patterns</markdown>
  <markdown>### The `.` character</markdown>
  <markdown>With the `.` character we can search for any character, any character in our string will be found.</markdown>
  <input_code>string = "Hola, soy un string"
print(re.findall(".", string))</input_code>
  <output_code>['H', 'o', 'l', 'a', ',', ' ', 's', 'o', 'y', ' ', 'u', 'n', ' ', 's', 't', 'r', 'i', 'n', 'g']
</output_code>
  <markdown>If for example we want sequences of two characters we would search with two `.`s followed by `.</markdown>
  <input_code>string1 = "Hola, soy un string"
string2 = "Hola, soy un string2"
print(re.findall("..", string1))
print(re.findall("..", string2))</input_code>
  <output_code>['Ho', 'la', ', ', 'so', 'y ', 'un', ' s', 'tr', 'in']
['Ho', 'la', ', ', 'so', 'y ', 'un', ' s', 'tr', 'in', 'g2']
</output_code>
  <markdown>As we can see `string1` has an odd number of characters, so the last `g` is not taken, but `string2` has an even number of characters, so it takes all characters.</markdown>
  <markdown>Let's look at this another way, let's change each sequence of three characters by a `$` symbol.</markdown>
  <input_code>print(string1)
print(re.sub("...", "$  ", string1))</input_code>
  <output_code>Hola, soy un string
$  $  $  $  $  $  g
</output_code>
  <markdown>I have printed two spaces after each `$` so that you can see the change, you can see how the last character does not convert it.</markdown>
  <markdown>### Predefined and constructed classes</markdown>
  <markdown>#### Digit</markdown>
  <markdown>If we want to find the digits we need to use `d`.</markdown>
  <input_code>string = "Hola, soy un string con 123 digitos"
print(re.findall("\d", string))</input_code>
  <output_code>['1', '2', '3']
</output_code>
  <markdown>As before, if for example we want two digits, we put `d` twice</markdown>
  <input_code>print(re.findall("\d\d", string))</input_code>
  <output_code>['12']
</output_code>
  <markdown>#### Letter</markdown>
  <markdown>If we want to find letters we need to use `w`. Word` means all letters from `a` to `z`, from `A` to `Z`, numbers from `0` to `9` and `_`.</markdown>
  <input_code>string = "Hola, soy un_string con, 123 digitos"
print(re.findall("\w", string))</input_code>
  <output_code>['H', 'o', 'l', 'a', 's', 'o', 'y', 'u', 'n', '_', 's', 't', 'r', 'i', 'n', 'g', 'c', 'o', 'n', '1', '2', '3', 'd', 'i', 'g', 'i', 't', 'o', 's']
</output_code>
  <markdown>As we can see, it takes everything except the spaces and the comma.</markdown>
  <markdown>#### Spaces</markdown>
  <markdown>If we want to find spaces we need `s</markdown>
  <input_code>string = "Hola, soy un_string con, 123 digitos"
print(re.sub("\s", "*", string))</input_code>
  <output_code>Hola,*soy*un_string*con,*123*digitos
</output_code>
  <markdown>Regular expressions consider line breaks as spaces.</markdown>
  <input_code>string = """Hola, soy un string 
con un salto de línea"""
print(re.sub("\s", "*", string))</input_code>
  <output_code>Hola,*soy*un*string**con*un*salto*de*línea
</output_code>
  <markdown>#### Ranks</markdown>
  <markdown>If we want to search a range we use `[]`, for example, if we want the numbers from 4 to 8 we use</markdown>
  <input_code>string = "1234567890"
print(re.findall("[4-8]", string))</input_code>
  <output_code>['4', '5', '6', '7', '8']
</output_code>
  <markdown>We can extend the search range</markdown>
  <input_code>string = "1234567890"
print(re.findall("[2-57-9]", string))</input_code>
  <output_code>['2', '3', '4', '5', '7', '8', '9']
</output_code>
  <markdown>If we also want to find a specific character, we enter the character followed by ``.</markdown>
  <input_code>string = "1234567890."
print(re.findall("[2-57-9\.]", string))</input_code>
  <output_code>['2', '3', '4', '5', '7', '8', '9', '.']
</output_code>
  <markdown>#### Bracket `[` and bracket `]`</markdown>
  <markdown>As we have seen, if we want to find ranges we use `[]`, but what if we want to find only the `[` or the `]`? For that we have to use `[]` and `[`]`.</markdown>
  <input_code>string = "[1234567890]"
print(re.findall("\[", string))
print(re.findall("\]", string))</input_code>
  <output_code>['[']
[']']
</output_code>
  <markdown>### Delimiters `+`, `*`, `?`, `?</markdown>
  <markdown>#### Star `*` (none or all)</markdown>
  <markdown>The `*` delimiter indicates that you want to search for none or all of them, not one by one as before.</markdown>
  <input_code>string = "Hola, soy un string con 12 123 digitos"
print(re.findall("\d", string))
print(re.findall("\d*", string))</input_code>
  <output_code>['1', '2', '1', '2', '3']
['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '12', '', '123', '', '', '', '', '', '', '', '', '']
</output_code>
  <markdown>As you can see, putting the `*` has found all the positions where there are zero characters or all characters</markdown>
  <markdown>#### Plus `+` (one or more)</markdown>
  <markdown>With the delimiter `+` you indicate that you want to search for one or more</markdown>
  <input_code>string = "Hola, soy un string con 1 12 123 digitos"
print(re.findall("\d+", string))</input_code>
  <output_code>['1', '12', '123']
</output_code>
  <markdown>#### Optional `?` (zero or one)</markdown>
  <markdown>The `?` delimiter indicates that you want to search for zero or one.</markdown>
  <input_code>string = "Hola, soy un string con 1 12 123 digitos"
print(re.sub("\d?", "-", string))</input_code>
  <output_code>-H-o-l-a-,- -s-o-y- -u-n- -s-t-r-i-n-g- -c-o-n- -- --- ---- -d-i-g-i-t-o-s-
</output_code>
  <markdown>### Counters</markdown>
  <markdown>When we want to find something that appears x times we use the counters with the braces `{}`. For example, if we want to find a sequence in which there are at least two digits</markdown>
  <input_code>string = "Hola, soy un string con 1 12 123 1234 1234digitos"
print(re.findall("\d{2}", string))</input_code>
  <output_code>['12', '12', '12', '34', '12', '34']
</output_code>
  <markdown>As you can see you have found the sequences `12` and `34`.</markdown>
  <markdown>The counters accept an upper and lower dimension `{inf, sup}`.</markdown>
  <input_code>string = "Hola, soy un string con 1 12 123 1234 1234digitos"
print(re.findall("\d{2,5}", string))</input_code>
  <output_code>['12', '123', '1234', '1234']
</output_code>
  <markdown>If the upper dimension is not defined, it means that you want at least the number of elements indicated, but with no upper limit.</markdown>
  <input_code>string = "Hola, soy un string con 1 12 123 1234 12345464168415641646451563416 digitos"
print(re.findall("\d{2,}", string))</input_code>
  <output_code>['12', '123', '1234', '12345464168415641646451563416']
</output_code>
  <markdown>If we want to use the notation of upper and lower dimension, but we want a fixed number, we have to put that number in both dimensions</markdown>
  <input_code>string = "Hola, soy un string con 1 12 123 1234 12345464168415641646451563416 digitos"
print(re.findall("\d{2,3}", string))</input_code>
  <output_code>['12', '123', '123', '123', '454', '641', '684', '156', '416', '464', '515', '634', '16']
</output_code>
  <markdown>### Classes</markdown>
  <markdown>You can create classes using `[]` brackets. Actually we saw that this was used for ranges, but, once you define what you want inside, you can consider it as a class and operate with the `[]`.</markdown>
  <markdown>For example, suppose we have a telephone number, which can be given in one of the following ways
 * 666-66-66-66
 * 666-666-666
 * 666 666 666
 * 666 66 66 66
 * 666666666

There are many ways to give a number, so let's see how to create a class to define the delimiter</markdown>
  <markdown>First we are going to tell it to look for all number sequences in which there are at least two numbers.</markdown>
  <input_code>string1 = "666-66-66-66"
string2 = "666-666-666"
string3 = "666 66 66 66"
string4 = "666 666 666"
string5 = "666666666"
print(f"string1: {string1} --&gt;", re.findall("\d{2,}", string1))
print(f"string2: {string2} --&gt;", re.findall("\d{2,}", string2))
print(f"string3: {string3} --&gt;", re.findall("\d{2,}", string3))
print(f"string4: {string4} --&gt;", re.findall("\d{2,}", string4))
print(f"string5: {string5} --&gt;", re.findall("\d{2,}", string5))</input_code>
  <output_code>string1: 666-66-66-66 --&gt; ['666', '66', '66', '66']
string2: 666-666-666 --&gt; ['666', '666', '666']
string3: 666 66 66 66 --&gt; ['666', '66', '66', '66']
string4: 666 666 666 --&gt; ['666', '666', '666']
string5: 666666666 --&gt; ['666666666']
</output_code>
  <markdown>Now we define to find the separator as a `-` or a space</markdown>
  <input_code>string1 = "666-66-66-66"
string2 = "666-666-666"
string3 = "666 66 66 66"
string4 = "666 666 666"
string5 = "666666666"
print(f"string1: {string1} --&gt;", re.findall("[-\s]", string1))
print(f"string2: {string2} --&gt;", re.findall("[-\s]", string2))
print(f"string3: {string3} --&gt;", re.findall("[-\s]", string3))
print(f"string4: {string4} --&gt;", re.findall("[-\s]", string4))
print(f"string5: {string5} --&gt;", re.findall("[-\s]", string5))</input_code>
  <output_code>string1: 666-66-66-66 --&gt; ['-', '-', '-']
string2: 666-666-666 --&gt; ['-', '-']
string3: 666 66 66 66 --&gt; [' ', ' ', ' ']
string4: 666 666 666 --&gt; [' ', ' ']
string5: 666666666 --&gt; []
</output_code>
  <markdown>As you can see in the last string it has not found, so we add a `?` to find when there is zero or one.</markdown>
  <input_code>string1 = "666-66-66-66"
string2 = "666-666-666"
string3 = "666 66 66 66"
string4 = "666 666 666"
string5 = "666666666"
print(f"string1: {string1} --&gt;", re.findall("[-\s]?", string1))
print(f"string2: {string2} --&gt;", re.findall("[-\s]?", string2))
print(f"string3: {string3} --&gt;", re.findall("[-\s]?", string3))
print(f"string4: {string4} --&gt;", re.findall("[-\s]?", string4))
print(f"string5: {string5} --&gt;", re.findall("[-\s]?", string5))</input_code>
  <output_code>string1: 666-66-66-66 --&gt; ['', '', '', '-', '', '', '-', '', '', '-', '', '', '']
string2: 666-666-666 --&gt; ['', '', '', '-', '', '', '', '-', '', '', '', '']
string3: 666 66 66 66 --&gt; ['', '', '', ' ', '', '', ' ', '', '', ' ', '', '', '']
string4: 666 666 666 --&gt; ['', '', '', ' ', '', '', '', ' ', '', '', '', '']
string5: 666666666 --&gt; ['', '', '', '', '', '', '', '', '', '']
</output_code>
  <markdown>Now we are looking for everything to be together</markdown>
  <input_code>string1 = "666-66-66-66"
string2 = "666-666-666"
string3 = "666 66 66 66"
string4 = "666 666 666"
string5 = "666666666"
print(f"string1: {string1} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?", string1))
print(f"string2: {string2} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?", string2))
print(f"string3: {string3} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?", string3))
print(f"string4: {string4} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?", string4))
print(f"string5: {string5} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?", string5))</input_code>
  <output_code>string1: 666-66-66-66 --&gt; ['666-66-66-66']
string2: 666-666-666 --&gt; []
string3: 666 66 66 66 --&gt; ['666 66 66 66']
string4: 666 666 666 --&gt; []
string5: 666666666 --&gt; ['666666666']
</output_code>
  <markdown>As we see in `string2` and `string4`, it finds nothing. We have set the filter `[\d{2,}[\s]?` 4 times, i.e. we want a sequence of at least two numbers, followed by zero or a hyphen or space separator that repeats 4 times. But in the last sequence there is no need for the `[\d{2,}[\s]?`, since it will never end a number with a space or a hyphen.</markdown>
  <input_code>string1 = "666-66-66-66"
string2 = "666-666-666"
string3 = "666 66 66 66"
string4 = "666 666 666"
string5 = "666666666"
print(f"string1: {string1} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}", string1))
print(f"string2: {string2} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}", string2))
print(f"string3: {string3} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}", string3))
print(f"string4: {string4} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}", string4))
print(f"string5: {string5} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}", string5))</input_code>
  <output_code>string1: 666-66-66-66 --&gt; ['666-66-66-66']
string2: 666-666-666 --&gt; []
string3: 666 66 66 66 --&gt; ['666 66 66 66']
string4: 666 666 666 --&gt; []
string5: 666666666 --&gt; ['666666666']
</output_code>
  <markdown>It is still not found for `string2` and `string4`. This is because the last thing in the filter is a `d{2,}`, i.e. after the third separator we are expecting at least 2 numbers, but that in `string2` and `string4` doesn't happen, so we put the following</markdown>
  <input_code>string1 = "666-66-66-66"
string2 = "666-666-666"
string3 = "666 66 66 66"
string4 = "666 666 666"
string5 = "666666666"
print(f"string1: {string1} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*", string1))
print(f"string2: {string2} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*", string2))
print(f"string3: {string3} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*", string3))
print(f"string4: {string4} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*", string4))
print(f"string5: {string5} --&gt;", re.findall("\d{2,}[-\s]?\d{2,}[-\s]?\d{2,}[-\s]?\d*", string5))</input_code>
  <output_code>string1: 666-66-66-66 --&gt; ['666-66-66-66']
string2: 666-666-666 --&gt; ['666-666-666']
string3: 666 66 66 66 --&gt; ['666 66 66 66']
string4: 666 666 666 --&gt; ['666 666 666']
string5: 666666666 --&gt; ['666666666']
</output_code>
  <markdown>### The delimiter `?` as a quick delimiter</markdown>
  <markdown>The above example can be filtered by `d+?[- ]`.</markdown>
  <input_code>string1 = "666-66-66-66"
string2 = "666-666-666"
string3 = "666 66 66 66"
string4 = "666 666 666"
string5 = "666666666"
print(f"string1: {string1} --&gt;", re.findall("\d+?[- ]", string1))
print(f"string2: {string2} --&gt;", re.findall("\d+?[- ]", string2))
print(f"string3: {string3} --&gt;", re.findall("\d+?[- ]", string3))
print(f"string4: {string4} --&gt;", re.findall("\d+?[- ]", string4))
print(f"string5: {string5} --&gt;", re.findall("\d+?[- ]", string5))</input_code>
  <output_code>string1: 666-66-66-66 --&gt; ['666-', '66-', '66-']
string2: 666-666-666 --&gt; ['666-', '666-']
string3: 666 66 66 66 --&gt; ['666 ', '66 ', '66 ']
string4: 666 666 666 --&gt; ['666 ', '666 ']
string5: 666666666 --&gt; []
</output_code>
  <markdown>If the `?` delimiter were not present, we would have `\d+[- ]`, which means a sequence of one or more numbers followed by a space or a hyphen. But what the `?` delimiter does is to make this search faster.</markdown>
  <markdown>### The denier</markdown>
  <markdown>Before we have seen that with `d` we found digits, so with `D` we find everything that are not digits.</markdown>
  <input_code>string1 = "E3s4t6e e1s2t3r5i6n7g8 t9i0e4n2e1 d4i5g7i9t0o5s2"
print(re.findall("\D", string1))</input_code>
  <output_code>['E', 's', 't', 'e', ' ', 'e', 's', 't', 'r', 'i', 'n', 'g', ' ', 't', 'i', 'e', 'n', 'e', ' ', 'd', 'i', 'g', 'i', 't', 'o', 's']
</output_code>
  <markdown>The same happens with letters, if we write `W` it will find everything that is not letters.</markdown>
  <input_code>string1 = "Letras ab27_ no letras ,.:;´ç"
print(re.findall("\W", string1))</input_code>
  <output_code>[' ', ' ', ' ', ' ', ',', '.', ':', ';', '´']
</output_code>
  <markdown>If we put `S` we will find everything other than spaces.</markdown>
  <input_code>print(re.findall("\S", string1))</input_code>
  <output_code>['L', 'e', 't', 'r', 'a', 's', 'a', 'b', '2', '7', '_', 'n', 'o', 'l', 'e', 't', 'r', 'a', 's', ',', '.', ':', ';', '´', 'ç']
</output_code>
  <markdown>But in case we have a class or something else, we can deny by `^`</markdown>
  <input_code>string1 = "1234567890"
print(re.findall("[^5-9]", string1))</input_code>
  <output_code>['1', '2', '3', '4', '0']
</output_code>
  <markdown>Going back to the example of the phone numbers from before, we can filter them by the following</markdown>
  <input_code>string1 = "666-66-66-66"
string2 = "666-666-666"
string3 = "666 66 66 66"
string4 = "666 666 666"
string5 = "666666666"
print(f"string1: {string1} --&gt;", re.findall("\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*", string1))
print(f"string2: {string2} --&gt;", re.findall("\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*", string2))
print(f"string3: {string3} --&gt;", re.findall("\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*", string3))
print(f"string4: {string4} --&gt;", re.findall("\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*", string4))
print(f"string5: {string5} --&gt;", re.findall("\d{2,}\D?\d{2,}\D?\d{2,}\D?\d*", string5))
string5 = "666 666 666"</input_code>
  <output_code>string1: 666-66-66-66 --&gt; ['666-66-66-66']
string2: 666-666-666 --&gt; ['666-666-666']
string3: 666 66 66 66 --&gt; ['666 66 66 66']
string4: 666 666 666 --&gt; ['666 666 666']
string5: 666666666 --&gt; ['666666666']
</output_code>
  <markdown>What we are doing is asking for sequences of at least two digits followed by one or no non-digits.</markdown>
  <markdown>### The beginning `^` and end of line `$`.</markdown>
  <markdown>With `^` we can search for the beginning of a line, for example, if we want to find a digit only at the beginning of a line</markdown>
  <input_code>string1 = "linea 1"
string2 = "2ª linea"
print(re.findall("^\d", string1))
print(re.findall("^\d", string2))</input_code>
  <output_code>[]
['2']
</output_code>
  <markdown>As you can see there is only one digit at the beginning of the line in `string2`.</markdown>
  <markdown>Likewise, the end of a line can be found with `$`. If we want to find a digit only at the end of a line</markdown>
  <input_code>string1 = "linea 1"
string2 = "2ª linea"
print(re.findall("\d$", string1))
print(re.findall("\d$", string2))</input_code>
  <output_code>['1']
[]
</output_code>
  <markdown>This only occurs in `string1`.</markdown>
  <markdown>## Practical examples</markdown>
  <markdown>### Logs</markdown>
  <markdown>If in the following log we want to find only the `WARN`s</markdown>
  <input_code>log = """[LOG ENTRY] [ERROR] The system is unstable
[LOG ENTRY] [WARN] The system may be down
[LOG ENTRY] [WARN] Microsoft just bought Github
[LOG DATA] [LOG] Everything is OK
[LOG ENTRY] [LOG] [user:@beco] Logged in
[LOG ENTRY] [LOG] [user:@beco] Clicked here
[LOG DATA] [LOG] [user:@celismx] Did something
[LOG ENTRY] [LOG] [user:@beco] Rated the app
[LOG ENTRY] [LOG] [user:@beco] Logged out
[LOG LINE] [LOG] [user:@celismx] Logged in"""
result = re.findall("\[LOG.*\[WARN\].*", log)
result</input_code>
  <output_code>['[LOG ENTRY] [WARN] The system may be down',
 '[LOG ENTRY] [WARN] Microsoft just bought Github']</output_code>
  <markdown>### Phone number</markdown>
  <markdown>Within a number we can find letters such as `e` for extension, `#` also for extension, or `p` to pause if a computer calls. We can also find the `+` to indicate a country prefix and separators such as spaces, `-`, `.`, `.`, `.`, `.`, `.`, `.`, `.`, `.`.</markdown>
  <input_code>tel = """555658
56-58-11
56.58.11
56.78-98
65 09 87
76y87r98
45y78-56
78.87 65
78 54-56
+521565811
58-11-11#246
55256048p123
55256048e123"""
result = re.findall("\+?\d{2,3}[^\da-zA-Z\n]?\d{2,3}[^\da-zA-Z\n]?\d{2,3}[#pe]?\d*", tel)
result</input_code>
  <output_code>['555658',
 '56-58-11',
 '56.58.11',
 '56.78-98',
 '65 09 87',
 '78.87 65',
 '78 54-56',
 '+521565811',
 '58-11-11#246',
 '55256048p123',
 '55256048e123']</output_code>
  <markdown>Here is an explanation
 * `+?`: Beginning with the character `+` and containing either zero or one
 * ``d{2,3}`: To be followed by 2 to 3 digits
 * Next there can be zero or a character that is neither a digit, nor a letter from `a` to `z`, nor a letter from `A` to `Z`, nor a line break.
 * ``d{2,3}`: To be followed by 2 to 3 digits
 * Next there can be zero or a character that is neither a digit, nor a letter from `a` to `z`, nor a letter from `A` to `Z`, nor a line break.
 * ``d{2,3}`: To be followed by 2 to 3 digits
 * `[#pe]?`: Then there can be zero or one character either `#`, or `p`, or `e`.
 * Lastly, let there be zero or all numbers.</markdown>
  <markdown>### URLs</markdown>
  <input_code>urls = """url: https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx
url: http://instagram.com/p/blablablah
url: http://itam.mx/test
http://instagram.com/p/blablablah
https://www.vanguarsoft.com.ve
http://platzi.com
https://traetelo.net
https://traetelo.net/images archivo.jsp
url: https://subdominio.traetelo.net
url: https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx
url: http://instagram.com/p/blablablah
url: http://itam.mx/test
http://instagram.com/p/blablablah
https://www.google.com.co/
https://sub.dominio.de.alguien.com/archivo.html
https://en.wikipedia.org/wiki/.org
https://cdn-microsoft.org/image/seixo2t9sjl_22.jpg
https://hola.pizza
https://platzi.com/clases/1301-expresiones-regulares/11860-urls9102/ clase


https://api.giphy.com/v1/gifs/search?q=Rick and Morty&amp;limit=10&amp;api_key=DG3hItPp5HIRNC0nit3AOR7eQZAe

http://localhost:3000/something?color1=red&amp;color2=blue
http://localhost:3000/display/post?size=small
 http://localhost:3000/?name=satyam
 http://localhost:3000/scanned?orderid=234
 http://localhost:3000/getUsers?userId=12354411&amp;name=Billy
 http://localhost:3000/getUsers?userId=12354411
http://localhost:3000/search?city=Barcelona

www.sitiodeejemplo.net/pagina.php?nombredevalor1=valor1&amp;nombredevalor2=valor2"""
result = re.findall("https?:\/\/[\w\-\.]+\.\w{2,6}\/?\S*", urls)
result</input_code>
  <output_code>['https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx',
 'http://instagram.com/p/blablablah',
 'http://itam.mx/test',
 'http://instagram.com/p/blablablah',
 'https://www.vanguarsoft.com.ve',
 'http://platzi.com',
 'https://traetelo.net',
 'https://traetelo.net/images',
 'https://subdominio.traetelo.net',
 'https://www.instagram.com/p/BXB4zsUlW5Z/?taken-by=beco.mx',
 'http://instagram.com/p/blablablah',
 'http://itam.mx/test',
 'http://instagram.com/p/blablablah',
 'https://www.google.com.co/',
 'https://sub.dominio.de.alguien.com/archivo.html',
 'https://en.wikipedia.org/wiki/.org',
 'https://cdn-microsoft.org/image/seixo2t9sjl_22.jpg',
 'https://hola.pizza',
 'https://platzi.com/clases/1301-expresiones-regulares/11860-urls9102/',
 'https://api.giphy.com/v1/gifs/search?q=Rick']</output_code>
  <markdown>Here is an explanation
 * `http`: We want it to start with `http`.
 * `s?`: There may or may not be an `s` in the following.
 * `:`://`: Followed by `://`.
 * `[*]: Followed by one or more letters, gions or periods
 * Next, a point.
 * ``w{2,6}`: Between 2 and 6 letters for the tld
 * `/?`: Followed by zero or a `/`.
 * None or everything that is not a space.</markdown>
  <markdown>### Mails</markdown>
  <input_code>mails = """esto.es_un.mail@mail.com
esto.es_un.mail+complejo@mail.com
dominio.com
rodrigo.jimenez@yahoo.com.mx
ruben@starbucks.com
esto_no$es_email@dominio.com
no_se_de_internet3@hotmail.com"""
result = re.findall("[\w\._]{5,30}\+?[\w\._]{0,10}@[\w\.-]{2,}\.\w{2,6}", mails)
result</input_code>
  <output_code>['esto.es_un.mail@mail.com',
 'esto.es_un.mail+complejo@mail.com',
 'rodrigo.jimenez@yahoo.com.mx',
 'ruben@starbucks.com',
 'es_email@dominio.com',
 'no_se_de_internet3@hotmail.com']</output_code>
  <markdown>Here is an explanation
 * `[\w\._]{5,30}`: We want it to start with between 5 and 30 (which is the minimum and maximum that gmail supports) letters, dots or underscores.
 * `\+?`: Followed by zero or a `+`.
 * `[\w\._]{0,10}`: Then between 0 and 10 letters, dots or underscores.
 * `@`: The `@`
 * `[\w\.-]{2,}`: Between 2 and infinite letters, dots and dashes (domain)
 * `.`: Followed by a `.
 * `\w{2,6}`: And finally between 2 and 6 letters for the tld</markdown>
  <markdown>### Locations</markdown>
  <markdown>There are two possible ways to give locations, so we analyze both of them</markdown>
  <input_code>loc = """-99.205646,19.429707,2275.10
-99.205581, 19.429652,2275.10
-99.204654,19.428952,2275.58"""
result = re.findall("\-?\d{1,3}\.\d{1,6},\s?\-?\d{1,3}\.\d{1,6},.*", loc)
result</input_code>
  <output_code>['-99.205646,19.429707,2275.10',
 '-99.205581, 19.429652,2275.10',
 '-99.204654,19.428952,2275.58']</output_code>
  <markdown>Here is an explanation
 * We want it to start with zero or a minus sign.
 * Followed by between one and three numbers
 * Next, a point.
 * ``d{1,6}`: After one to six numbers
 * `,`: Then a `,`: Then a `,`: Then a `,`: Then a `,`: Then a `,`
 * ``s?`: After zero or a space
 * ``-?`: Zero or a minus sign
 * ` `d{1,3}`: Then between one and three numbers
 * Next, a point.
 * Followed by between one and six numbers.
 * `,`: Then a comma
 * `.*`: Lastly none or all types of characters</markdown>
  <input_code>loc = """-99 12' 34.08"W, 19 34' 56.98"N
-34 54' 32.00"E, -3 21' 67.00"S"""
result = re.findall("\-?\d{1,3}\s\d{1,2}'\s\d{1,2}\.\d{2,2}\"[WE],\s?\-?\d{1,3}\s\d{1,2}'\s\d{1,2}\.\d{2,2}\"[SN]", loc)
result</input_code>
  <output_code>['-99 12\' 34.08"W, 19 34\' 56.98"N', '-34 54\' 32.00"E, -3 21\' 67.00"S']</output_code>
  <input_code>print(result[0])
print(result[1])</input_code>
  <output_code>-99 12' 34.08"W, 19 34' 56.98"N
-34 54' 32.00"E, -3 21' 67.00"S
</output_code>
  <markdown>Here is an explanation
 * We want it to start with zero or a minus sign.
 * Followed by between one and three numbers
 * `s`: Then a space
 * ``d{1,2}`: Segment of one to two numbers
 * `'`: Then a `'`: Then a `'`.
 * Followed by a space.
 * ` ``d{1,2}`: Then between one and two numbers
 * After a period
 * ``d{2,2}`: Followed by two numbers
 * `"`: Then a `"`: Then a `"`: Then a `"`: Then a `"`: Then a `"`.
 * `[WE]`: Then the letter `W` or the letter `E`.
 * `,`: After a comma
 * Followed by a zero or a space
 * ``-?`: After zero or a minus sign
 * ` `d{1,3}`: Then between one and three numbers
 * Followed by a space.
 * ` ``d{1,2}`: Then between one and two numbers
 * `'`: Then a `'`: After a `'`
 * `s`: Then a space
 * ``d{1,2}`: Next between one and two numbers
 * Followed by a period
 * ``d{2,2}`: After two numbers
 * ` ` "`: Followed by ` "`: Followed by ` "`.
 * `[SN]`: And finally the letter `S` or the letter `N`.</markdown>
  <markdown>### Names</markdown>
  <input_code>nombres = """Camilo Sarmiento Gálvez
Alejandro Pliego Abasto
Milagros Reyes Japón
Samuel París Arrabal
Juan Pablo Tafalla
Axel Gálvez Velázquez
Óscar Montreal Aparicio
Jacobo Pozo Tassis
Guillermo Ordóñez Espiga
Eduardo Pousa Curbelo
Ivanna Bienvenida Kevin
Ada Tasis López
Luciana Sáenz García
Florencia Sainz Márquz
Catarina Cazalla Lombarda
Paloma Gallo Perro
Margarita Quesada Florez
Vicente Fox Quesada
Iris Graciani
Asunción Carballar
Constanza Muñoz
Manuel Andres García Márquez"""
result = re.findall("[A-ZÁÉÍÓÚ][a-záéíóú]+\s[A-ZÁÉÍÓÚ][a-záéíóú]+\s[A-ZÁÉÍÓÚ][a-záéíóú]+", nombres)
result</input_code>
  <output_code>['Camilo Sarmiento Gálvez',
 'Alejandro Pliego Abasto',
 'Milagros Reyes Japón',
 'Samuel París Arrabal',
 'Juan Pablo Tafalla',
 'Axel Gálvez Velázquez',
 'Óscar Montreal Aparicio',
 'Jacobo Pozo Tassis',
 'Espiga\nEduardo Pousa',
 'Curbelo\nIvanna Bienvenida',
 'Kevin\nAda Tasis',
 'López\nLuciana Sáenz',
 'García\nFlorencia Sainz',
 'Márquz\nCatarina Cazalla',
 'Lombarda\nPaloma Gallo',
 'Perro\nMargarita Quesada',
 'Florez\nVicente Fox',
 'Quesada\nIris Graciani',
 'Asunción Carballar\nConstanza',
 'Manuel Andres García']</output_code>
  <markdown>Here is an explanation
 * `[A-ZÁÉÍÓÚ]`: We want it to start with a capital letter, including accents.
 * `[a-záééíóú]+`: Followed by one or more lowercase letters, enclosed by spaces
 * Followed by a space.
 * `[A-ZÁÉÍÓÓÚ]`: followed by an uppercase letter, including accents
 * `[a-záééíóú]+`: Followed by one or more lowercase letters, enclosed by spaces
 * Followed by a space.
 * `[A-ZÁÉÍÓÓÚ]`: followed by an uppercase letter, including accents
 * `[a-záééíóú]+`: Followed by one or more lowercase letters, enclosed by spaces</markdown>
  <markdown>## Search and replace</markdown>
  <markdown>We are going to download a file with a lot of historical films.</markdown>
  <input_code># download file from url
import urllib.request
url = "https://static.platzi.com/media/tmp/class-files/github/moviedemo/moviedemo-master/movies.dat"
urllib.request.urlretrieve(url, "movies.dat")
</input_code>
  <output_code>---------------------------------------------------------------------------HTTPError                                 Traceback (most recent call last)Cell In[43], line 4
      2 import urllib.request
      3 url = "https://static.platzi.com/media/tmp/class-files/github/moviedemo/moviedemo-master/movies.dat"
----&gt; 4 urllib.request.urlretrieve(url, "movies.dat")
File ~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:241, in urlretrieve(url, filename, reporthook, data)
    224 """
    225 Retrieve a URL into a temporary location on disk.
    226 
   (...)
    237 data file as well as the resulting HTTPMessage object.
    238 """
    239 url_type, path = _splittype(url)
--&gt; 241 with contextlib.closing(urlopen(url, data)) as fp:
    242     headers = fp.info()
    244     # Just return the local path and the "headers" for file://
    245     # URLs. No sense in performing a copy unless requested.
File ~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:216, in urlopen(url, data, timeout, cafile, capath, cadefault, context)
    214 else:
    215     opener = _opener
--&gt; 216 return opener.open(url, data, timeout)
File ~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:525, in OpenerDirector.open(self, fullurl, data, timeout)
    523 for processor in self.process_response.get(protocol, []):
    524     meth = getattr(processor, meth_name)
--&gt; 525     response = meth(req, response)
    527 return response
File ~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:634, in HTTPErrorProcessor.http_response(self, request, response)
    631 # According to RFC 2616, "2xx" code indicates that the client's
    632 # request was successfully received, understood, and accepted.
    633 if not (200 &lt;= code &lt; 300):
--&gt; 634     response = self.parent.error(
    635         'http', request, response, code, msg, hdrs)
    637 return response
File ~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:563, in OpenerDirector.error(self, proto, *args)
    561 if http_err:
    562     args = (dict, 'default', 'http_error_default') + orig_args
--&gt; 563     return self._call_chain(*args)
File ~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:496, in OpenerDirector._call_chain(self, chain, kind, meth_name, *args)
    494 for handler in handlers:
    495     func = getattr(handler, meth_name)
--&gt; 496     result = func(*args)
    497     if result is not None:
    498         return result
File ~/miniconda3/envs/mybase/lib/python3.11/urllib/request.py:643, in HTTPDefaultErrorHandler.http_error_default(self, req, fp, code, msg, hdrs)
    642 def http_error_default(self, req, fp, code, msg, hdrs):
--&gt; 643     raise HTTPError(req.full_url, code, msg, hdrs, fp)
HTTPError: HTTP Error 403: Forbidden</output_code>
  <markdown>Let's print the first 10 lines to analyze it.</markdown>
  <input_code>file = open("movies.dat", "r")

for i, line in enumerate(file):
    print(line, end="")
    if i == 10:
        break

file.close()</input_code>
  <output_code>1::Toy Story (1995)::Adventure|Animation|Children|Comedy|Fantasy
2::Jumanji (1995)::Adventure|Children|Fantasy
3::Grumpier Old Men (1995)::Comedy|Romance
4::Waiting to Exhale (1995)::Comedy|Drama|Romance
5::Father of the Bride Part II (1995)::Comedy
6::Heat (1995)::Action|Crime|Thriller
7::Sabrina (1995)::Comedy|Romance
8::Tom and Huck (1995)::Adventure|Children
9::Sudden Death (1995)::Action
10::GoldenEye (1995)::Action|Adventure|Thriller
11::American President, The (1995)::Comedy|Drama|Romance
</output_code>
  <markdown>As you can see, we have an ID, followed by `::`, then the name of the movie, in parentheses the year, followed by `::` and then genres separated by `|`.</markdown>
  <markdown>We can make a cleaning of the file very easy by means of regular expressions, the `compile` and `match` functions and the use of groupings with parenthesis. When making groupings, we select which areas of the text we want to keep and then work with them as we want, let's see it with an example</markdown>
  <input_code>pattern = re.compile(r"^\d+::([\w\s:,\(\)\.\-'&amp;¡!/¿?ÁÉÍÓÚáéíóú\+*\$#°\'\"\[\]@·]+)\s\((\d{4,4})\)::(.*)$")

file = open("movies.dat", "r")
file_filtered = open("movies.csv", "w")
file_filtered.write("title,year,genders\n")
sep = ";;"
for line in file:
    result = re.match(pattern, line)
    if result:
        file_filtered.write(f"{result.group(1)}{sep}{result.group(2)}{sep}{result.group(3)}\n")
    else:
        print(line, end="")
file.close()
file_filtered.close()</input_code>
  <markdown>Let's see what we have done, first we have defined a pattern with the following:
 * `^`: We want it to start with the beginning of the line.
 * Next one or more numbers
 * `::`: Followed by `::`
 * `([\(([\([\([\([\([\([\([\("\("\("\("\("\("\": This is the first grouping, we look for any word, space or character in the square brackets that appears one or more times.
 * ``s`: Next a space
 * ` `: The tightening of a parenthesis
 * (4,4})`: Here is the second grouping, we are looking for four numbers.
 * After the closing of a parenthesis
 * `::`: Next `::`
 * `(.*)`: The third grouping, any character that appears none or all times.
 * `$`: Lastly the end of the line

Inside the `for` we analyze line by line if the pattern we have defined is found, and if it is found we write the three patterns in the `csv` separated by `sep`, which in our case we have defined as `;;`. This separator has been defined, because there are movie titles that have `,`s.</markdown>
  <markdown>We read the `csv` with `Pandas`.</markdown>
  <input_code>import pandas as pd
df = pd.read_csv("movies.csv", sep=";;", engine="python")
df.head()</input_code>
  <output_code>                                                           title,year,genders
Toy Story                   1995  Adventure|Animation|Children|Comedy|Fantasy
Jumanji                     1995                   Adventure|Children|Fantasy
Grumpier Old Men            1995                               Comedy|Romance
Waiting to Exhale           1995                         Comedy|Drama|Romance
Father of the Bride Part II 1995                                       Comedy</output_code>
  <markdown>## Cheatsheet</markdown>
  <markdown>Here you have a [cheatsheet](https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/davechild_regular-expressions.pdf) with a lot of patterns</markdown>
  <markdown>![davechild_regular-expressions](https://pub-fb664c455eca46a2ba762a065ac900f7.r2.dev/davechild_regular-expressions.webp)</markdown>
</notebook>