<?xml version='1.0' encoding='utf-8'?>
<notebook>
  <markdown># Conventional commits</markdown>
  <markdown>Este post se ha creado a partir del [v√≠deo](https://www.youtube.com/watch?v=SigVVJmUGv8) de [Carlos Azaustre](https://x.com/carlosazaustre), solo que como √©l explica c√≥mo hacer todo con herramientas de JavaScript, hay mucha gente desarrolladora de Python que no tiene instalado Node.js, por lo que he hecho una versi√≥n del mismo pero todo con herramientas de Python.</markdown>
  <markdown>## ¬øQu√© son los conventional commits?</markdown>
  <markdown>La integraci√≥n con herramientas de gesti√≥n de cambios y releases.</markdown>
  <markdown>### Formato de los Mensajes de Commit</markdown>
  <markdown>Un mensaje de commit en Conventional Commits sigue un formato espec√≠fico:

``` git
&lt;type&gt;[optional scope]: &lt;description&gt;

[optional body]

[optional footer(s)]
```</markdown>
  <markdown>Vamos a verlo m√°s detalladamente</markdown>
  <markdown>#### Tipo `type`</markdown>
  <markdown>El tipo de commit indica la naturaleza del cambio. Algunos tipos comunes son:

* **fix**: Se utiliza para correcci√≥n de bugs.
* **feat**: Se utiliza para nuevas funcionalidades.
 * **docs**: Se utiliza para cambios en la documentaci√≥n.
* **style**: Se utiliza para cambios que no afectan el significado del c√≥digo (por ejemplo, formato, eliminaci√≥n de espacios en blanco).
 * **refactor**: Se utiliza para cambios de c√≥digo que ni mejoran ni empeoran la funcionalidad, como reorganizar el c√≥digo.
 * **perf**: Se utiliza para cambios que mejoran el rendimiento.
* **test**: Se utiliza para agregar o actualizar pruebas.
 * **chore**: Se utiliza para cambios en el proceso o en las herramientas de desarrollo.
* **ci**: Se utiliza para cambios en los archivos de configuraci√≥n de integraci√≥n continua.
 * **build**: Se utiliza para cambios que afectan el sistema de compilaci√≥n o dependencias externas.
 * **revert**: Se utiliza para revertir un commit anterior.</markdown>
  <markdown>#### √Åmbito `scope`</markdown>
  <markdown>El √°mbito es opcional y se utiliza para especificar la parte del proyecto que se modific√≥. Por ejemplo, si est√°s trabajando en un componente espec√≠fico de una aplicaci√≥n web, el √°mbito podr√≠a ser el nombre del componente.

Ejemplo:

``` git
fix(auth): fix authentication issue
```</markdown>
  <markdown>#### Descripci√≥n `description`</markdown>
  <markdown>La descripci√≥n es una breve explicaci√≥n del cambio. Debe ser concisa y clara, y proporcionar suficiente contexto para entender el prop√≥sito del commit.

Ejemplo:

``` git
fix(auth): fix authentication error on login page
```</markdown>
  <markdown>#### Cuerpo `body`</markdown>
  <markdown>El cuerpo es opcional y se utiliza para proporcionar m√°s detalles sobre el cambio. Aqu√≠ puedes incluir motivaciones para el cambio y contrastes con la implementaci√≥n anterior.

Ejemplo:

``` git
fix(auth): fix authentication error on login page

The access token was expiring earlier than expected due to an error in the expiration date calculation. It has been fixed by adjusting the calculation logic.
```</markdown>
  <markdown>#### Pie de p√°gina `footer`</markdown>
  <markdown>El pie de p√°gina es opcional y se utiliza para referencias adicionales, como n√∫meros de issues cerrados o commits relacionados.

Ejemplo:

``` git
fix(auth): fix authentication error on login page

The access token was expiring earlier than expected due to an error in the expiration date calculation. It has been fixed by adjusting the calculation logic.

Closes #123
```</markdown>
  <markdown>### Beneficios de los Conventional Commits</markdown>
  <markdown>* **Claridad y Consistencia**: Los mensajes de commit estandarizados son m√°s f√°ciles de entender y seguir, lo que mejora la colaboraci√≥n en equipos de desarrollo.
 * **Generaci√≥n Autom√°tica de Notas de Versi√≥n**: Se pueden usar herramientas para generar notas de versi√≥n autom√°ticamente bas√°ndose en los mensajes de commit.
* **Integraci√≥n con Herramientas de Gesti√≥n de Cambios**: Muchas herramientas de desarrollo y gesti√≥n de proyectos pueden integrarse con Conventional Commits para automatizar tareas como la generaci√≥n de changelogs y la gesti√≥n de releases.
 * **Historial de Cambios Estructurado**: El historial de cambios se vuelve m√°s estructurado y f√°cil de navegar, lo que facilita la revisi√≥n de cambios y la depuraci√≥n de problemas.</markdown>
  <markdown>### Ejemplos pr√°cticos</markdown>
  <markdown>Ejemplo 1: Correcci√≥n de un Bug

``` git
fix(api): fix error in user validation

The user registration endpoint was allowing registrations with invalid email addresses. An additional validation has been added to ensure that email addresses are valid.

Closes #456
```</markdown>
  <markdown>Ejemplo 2: A√±adir una nueva caracter√≠stica

``` git
feat(api): add password recovery endpoint

Implemented a new endpoint that allows users to request a password recovery link. The link is sent to their registered email address.

Closes #789
```</markdown>
  <markdown>Ejemplo 3: Mejora de la documentaci√≥n

``` git
docs: update contribution guide

Updated the setup instructions for the development environment and added a section on running tests.

Closes #101
```</markdown>
  <markdown>## Herramientas para construir mensajes que cumplan conventional commits</markdown>
  <markdown>Aunque hemos visto c√≥mo crear mensajes de commit mediante conventional commits, es bastante posible que nos equivoquemos, por lo que podemos usar herramientas que nos gu√≠en en la creaci√≥n de estos mensajes. Vamos a ver dos `commitizen` y el plugin `Conventional Commits` de vscode.</markdown>
  <markdown>### Commitizen</markdown>
  <markdown>Para usarla, primero voy a crear una carpeta nueva en la que voy a iniciar un repositorio de Git</markdown>
  <markdown />
  <input_code>!mkdir ~/comitizen_folder &amp;&amp; cd ~/comitizen_folder &amp;&amp; git init</input_code>
  <output_code>[33mhint: Using 'master' as the name for the initial branch. This default branch name[m
[33mhint: is subject to change. To configure the initial branch name to use in all[m
[33mhint: of your new repositories, which will suppress this warning, call:[m
[33mhint: [m
[33mhint: 	git config --global init.defaultBranch &lt;name&gt;[m
[33mhint: [m
[33mhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and[m
[33mhint: 'development'. The just-created branch can be renamed via this command:[m
[33mhint: [m
[33mhint: 	git branch -m &lt;name&gt;[m
Initialized empty Git repository in /home/maximofernandez/comitizen_folder/.git/
</output_code>
  <markdown>Ahora instalo `commitizen`</markdown>
  <input_code>%pip install --user -U commitizen</input_code>
  <output_code>Collecting commitizen
  Downloading commitizen-3.29.1-py3-none-any.whl.metadata (7.6 kB)
Collecting argcomplete&lt;3.6,&gt;=1.12.1 (from commitizen)
  Downloading argcomplete-3.5.1-py3-none-any.whl.metadata (16 kB)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2.1.0 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (3.3.2)
Requirement already satisfied: colorama&lt;0.5.0,&gt;=0.4.1 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (0.4.6)
Collecting decli&lt;0.7.0,&gt;=0.6.0 (from commitizen)
  Downloading decli-0.6.2-py3-none-any.whl.metadata (17 kB)
Requirement already satisfied: jinja2&gt;=2.10.3 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (3.1.4)
Requirement already satisfied: packaging&gt;=19 in /home/maximofernandez/.local/lib/python3.12/site-packages (from commitizen) (24.1)
Requirement already satisfied: pyyaml&gt;=3.08 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (6.0.2)
Collecting questionary&lt;3.0,&gt;=2.0 (from commitizen)
  Downloading questionary-2.0.1-py3-none-any.whl.metadata (5.4 kB)
Collecting termcolor&lt;3,&gt;=1.1 (from commitizen)
  Downloading termcolor-2.5.0-py3-none-any.whl.metadata (6.1 kB)
Collecting tomlkit&lt;1.0.0,&gt;=0.5.3 (from commitizen)
  Downloading tomlkit-0.13.2-py3-none-any.whl.metadata (2.7 kB)
Requirement already satisfied: MarkupSafe&gt;=2.0 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from jinja2&gt;=2.10.3-&gt;commitizen) (2.1.5)
Collecting prompt_toolkit&lt;=3.0.36,&gt;=2.0 (from questionary&lt;3.0,&gt;=2.0-&gt;commitizen)
  Downloading prompt_toolkit-3.0.36-py3-none-any.whl.metadata (7.0 kB)
Requirement already satisfied: wcwidth in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from prompt_toolkit&lt;=3.0.36,&gt;=2.0-&gt;questionary&lt;3.0,&gt;=2.0-&gt;commitizen) (0.2.13)
Downloading commitizen-3.29.1-py3-none-any.whl (71 kB)
Downloading argcomplete-3.5.1-py3-none-any.whl (43 kB)
Downloading decli-0.6.2-py3-none-any.whl (7.9 kB)
Downloading questionary-2.0.1-py3-none-any.whl (34 kB)
Downloading termcolor-2.5.0-py3-none-any.whl (7.8 kB)
Downloading tomlkit-0.13.2-py3-none-any.whl (37 kB)
Downloading prompt_toolkit-3.0.36-py3-none-any.whl (386 kB)
Installing collected packages: tomlkit, termcolor, prompt_toolkit, decli, argcomplete, questionary, commitizen
[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
ipython 8.27.0 requires prompt-toolkit&lt;3.1.0,&gt;=3.0.41, but you have prompt-toolkit 3.0.36 which is incompatible.[0m[31m
[0mSuccessfully installed argcomplete-3.5.1 commitizen-3.29.1 decli-0.6.2 prompt_toolkit-3.0.36 questionary-2.0.1 termcolor-2.5.0 tomlkit-0.13.2
Note: you may need to restart the kernel to use updated packages.
</output_code>
  <markdown>Verificamos la instalaci√≥n</markdown>
  <input_code>!cz version</input_code>
  <output_code>3.29.1
[0m</output_code>
  <markdown>Creo un nuevo archivo en la carpeta en la que he inicializado el repositorio de Git y lo a√±ado al √°rea de staging</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; touch README.md &amp;&amp; git add README.md</input_code>
  <markdown>Si hago `git status` ver√© que el archivo est√° en el √°rea de staging y que ahora deber√≠a hacer un commit</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; git status</input_code>
  <output_code>On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached &lt;file&gt;..." to unstage)
	[32mnew file:   README.md[m

</output_code>
  <markdown>Es hora de crear un commit con `commitizen`, para ello ejecutamos `cz commit` y nos aparecer√° un asistente para crear el commit</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; cz commit</input_code>
  <output_code>? Select the type of change you are committing docs: Documentation only changes
? What is the scope of this change? (class or file name): (press [enter] to skip)
 readme
? Write a short and imperative summary of the code changes: (lower case and no period)
 First innit, create readme
? Provide additional contextual information about the code changes: (press [enter] to skip)
 This is the first commit, I create a empty readme
? Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer No
? Footer. Information about Breaking Changes and reference issues that this commit closes: (press [enter] to skip)


docs(readme): First innit, create readme

This is the first commit, I create a empty readme


[master (root-commit) 4f646d4] docs(readme): First innit, create readme
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README.md

Commit successful!</output_code>
  <markdown>Listo, ya tenemos nuestro primer commit creado con `commitizen` que sigue las reglas de `Conventional Commits`</markdown>
  <markdown>### Plugin Conventional Commit de vscode</markdown>
  <markdown>Ahora vamos a hacer lo mismo solo que con el plugin de vscode [Conventional Commit](https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits)</markdown>
  <markdown>Primero hay que instalar el plugin y una vez est√© instalado pulsamos `Ctrl + Shift + P` y escribimos `Conventional Commit`, le damos a `Enter` y nos aparecer√° un asistente para crear el commit</markdown>
  <markdown>Para m√≠ el uso de este plugin tiene dos ventajas sobre `commitizen`

* La primera es que nos permite a√±adir emojis de [gitmoji](https://gitmoji.dev/). Lo cual, si no se abusa de los emojis y se usan unos pocos, hace que al ver el historial de commits sea m√°s f√°cil identificar el tipo de commit
* La segunda es que guarda los √°mbitos `scope`s que has usado, por lo que hace que no se creen nuevos √°mbitos sino que se reutilicen los que ya has usado</markdown>
  <markdown>## Herramientas para comprobar que se sigue la convenci√≥n de conventional commits</markdown>
  <markdown>Hemos visto c√≥mo crear mensajes de commit que sigan la convenci√≥n de `conventional commits`, pero una buena pr√°ctica es crear una herramienta para comprobar que el commit creado sigue la convenci√≥n, sobre todo cuando se trabaja en equipo.

Hay herramientas que nos permiten hacer esto como `pre-commit`, pero lo que hacen es modificar los hooks de git, as√≠ que vamos a hacerlo nosotros y a usar `commitizen` para que nos ayude a validar el mensaje de commit.</markdown>
  <markdown>Ya hemos instalado `commitizen`, as√≠ que vamos a ver c√≥mo se puede usar para comprobar un mensaje de commit</markdown>
  <markdown>Primero creamos un archivo llamado `commit-msg` en la carpeta `.git/hooks` y le damos permisos de ejecuci√≥n. Dentro de los hooks de Git hay [varios tipos de archivos](https://git-scm.com/docs/githooks#_hooks) que se pueden usar para diferentes tareas, en este caso vamos a usar `commit-msg` que se ejecuta justo antes de que se cree el commit.</markdown>
  <input_code>!cd ~/comitizen_folder/.git/hooks &amp;&amp; touch commit-msg &amp;&amp; chmod +x commit-msg</input_code>
  <markdown>Ahora a√±adimos el siguiente c√≥digo al archivo `commit-msg`

``` bash
#!/bin/sh
Este script valida el mensaje del commit usando commitizen

COMMIT_MSG_FILE=$1
cz check --commit-msg-file $COMMIT_MSG_FILE
```</markdown>
  <input_code>!cd ~/comitizen_folder/.git/hooks &amp;&amp; \
echo '#!/bin/sh' &gt; commit-msg &amp;&amp; \
echo '# Este script valida el mensaje del commit usando commitizen' &gt;&gt; commit-msg &amp;&amp; \
echo ' ' &gt;&gt; commit-msg &amp;&amp; \
echo 'COMMIT_MSG_FILE=$1' &gt;&gt; commit-msg &amp;&amp; \
echo 'cz check --commit-msg-file $COMMIT_MSG_FILE' &gt;&gt; commit-msg</input_code>
  <markdown>Una vez hecho, probamos a hacer un commit con un mensaje incorrecto. Primero modificamos el README y lo a√±adimos al √°rea de staging</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; echo '.' &gt;&gt; README.md &amp;&amp; git add README.md</input_code>
  <markdown>Ahora hacemos un commit con un mensaje incorrecto</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; git commit -m "Add dot to README"</input_code>
  <output_code>[31mcommit validation: failed!
please enter a commit message in the commitizen format.
commit "": "Add dot to README"
pattern: (?s)(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)(\(\S+\))?!?:( [^\n\r]+)((\n\n.*)|(\s*))?$[0m
[0m</output_code>
  <markdown>Ahora hacemos un commit con un mensaje correcto</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; git commit -m "docs(readme): :memo: Add dot to README"</input_code>
  <output_code>[32mCommit validation: successful![0m
[0m[master d488656] docs(readme): :memo: Add dot to README
 1 file changed, 1 insertion(+), 1 deletion(-)
</output_code>
  <markdown>Nos ha validado el commit correctamente, por lo que si miramos el historial de commits, veremos que el commit con el mensaje incorrecto no se ha creado y el commit con el mensaje correcto s√≠</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; git log</input_code>
  <output_code>[33mcommit d488656297c7cb448a25dd33a008cb5ce1e14e83[m[33m ([m[1;36mHEAD[m[33m -&gt; [m[1;32mmaster[m[33m)[m
Author: MaximoFN &lt;maximofn@gmail.com&gt;
Date:   Tue Oct 8 11:22:19 2024 +0200

    docs(readme): :memo: Add dot to README

[33mcommit fb518c2b903a259b2e44972e88aabf5656f97be9[m
Author: MaximoFN &lt;maximofn@gmail.com&gt;
Date:   Tue Oct 8 10:57:41 2024 +0200

    docs(readme): :memo: Update readme
    
    Update readme with text conventional commits

[33mcommit 4f646d45047a45b549243efbfde9e331d45e23f1[m
Author: MaximoFN &lt;maximofn@gmail.com&gt;
Date:   Tue Oct 8 10:48:07 2024 +0200

    docs(readme): First innit, create readme
    
    This is the first commit, I create a empty readme
</output_code>
  <markdown>## Herramientas para crear changelogs a partir de conventional commits</markdown>
  <markdown>Como tenemos los commits escritos mediante el mismo convenio, podemos crear changelog autom√°ticamente con `git-changelog`. Instalamos las dependencias</markdown>
  <input_code>%pip install git-changelog</input_code>
  <output_code>Collecting git-changelog
  Downloading git_changelog-2.5.2-py3-none-any.whl.metadata (5.4 kB)
Collecting appdirs&gt;=1.4 (from git-changelog)
  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)
Requirement already satisfied: Jinja2&gt;=2.10 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from git-changelog) (3.1.4)
Requirement already satisfied: packaging&gt;=24.0 in /home/maximofernandez/.local/lib/python3.12/site-packages (from git-changelog) (24.1)
Collecting semver&gt;=2.13 (from git-changelog)
  Downloading semver-3.0.2-py3-none-any.whl.metadata (5.0 kB)
Requirement already satisfied: MarkupSafe&gt;=2.0 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from Jinja2&gt;=2.10-&gt;git-changelog) (2.1.5)
Downloading git_changelog-2.5.2-py3-none-any.whl (32 kB)
Downloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)
Downloading semver-3.0.2-py3-none-any.whl (17 kB)
Installing collected packages: appdirs, semver, git-changelog
Successfully installed appdirs-1.4.4 git-changelog-2.5.2 semver-3.0.2
Note: you may need to restart the kernel to use updated packages.
</output_code>
  <markdown>Ahora podemos crear un changelog con `git-changelog`. Como hemos creado unos commits muy simples, el changelog ser√° muy simple</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; git-changelog</input_code>
  <output_code># Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).

&lt;!-- insertion marker --&gt;
## Unreleased

&lt;small&gt;[Compare with latest]()&lt;/small&gt;

&lt;!-- insertion marker --&gt;
</output_code>
  <markdown>Tambi√©n podemos pedirle que lo escriba en un archivo y muchas m√°s opciones</markdown>
  <input_code>!git-changelog -h</input_code>
  <output_code>usage: git-changelog [--config-file [PATH ...]] [-b] [-B VERSION] [-n SCHEME]
                     [-h] [-i] [-g REGEX] [-m MARKER] [-o FILE] [-p PROVIDER]
                     [-r] [-R] [-I FILE] [-c CONVENTION] [-s SECTIONS]
                     [-t TEMPLATE] [-T] [-E] [-Z] [-F RANGE] [-j KEY=VALUE]
                     [-V] [--debug-info]
                     [REPOSITORY]

Automatic Changelog generator using Jinja2 templates.

This tool parses your commit messages to extract useful data
that is then rendered using Jinja2 templates, for example to
a changelog file formatted in Markdown.

Each Git tag will be treated as a version of your project.
Each version contains a set of commits, and will be an entry
in your changelog. Commits in each version will be grouped
by sections, depending on the commit convention you follow.

### Conventions

#### Basic

*Default sections:*

- add: Added
- fix: Fixed
- change: Changed
- remove: Removed

*Additional sections:*

- merge: Merged
- doc: Documented

#### Angular

*Default sections:*

- feat: Features
- fix: Bug Fixes
- revert: Reverts
- ref, refactor: Code Refactoring
- perf: Performance Improvements

*Additional sections:*

- build: Build
- chore: Chore
- ci: Continuous Integration
- deps: Dependencies
- doc, docs: Docs
- style: Style
- test, tests: Tests

#### ConventionalCommit

*Default sections:*

- feat: Features
- fix: Bug Fixes
- revert: Reverts
- ref, refactor: Code Refactoring
- perf: Performance Improvements

*Additional sections:*

- build: Build
- chore: Chore
- ci: Continuous Integration
- deps: Dependencies
- doc, docs: Docs
- style: Style
- test, tests: Tests

positional arguments:
  REPOSITORY            The repository path, relative or absolute. Default:
                        current working directory.

options:
  --config-file [PATH ...]
                        Configuration file(s).
  -b, --bump-latest     Deprecated, use --bump=auto instead. Guess the new
                        latest version by bumping the previous one based on
                        the set of unreleased commits. For example, if a
                        commit contains breaking changes, bump the major
                        number (or the minor number for 0.x versions). Else if
                        there are new features, bump the minor number. Else
                        just bump the patch number. Default: unset (false).
  -B VERSION, --bump VERSION
                        Specify the bump from latest version for the set of
                        unreleased commits. Can be one of `auto`, `major`,
                        `minor`, `patch` or a valid SemVer version (eg.
                        1.2.3). For both SemVer and PEP 440 versioning schemes
                        (see -n), `auto` will bump the major number if a
                        commit contains breaking changes (or the minor number
                        for 0.x versions, see -Z), else the minor number if
                        there are new features, else the patch number.
                        Default: unset (false).
  -n SCHEME, --versioning SCHEME
                        Versioning scheme to use when bumping and comparing
                        versions. The selected scheme will impact the values
                        accepted by the `--bump` option. Supported: `pep440`,
                        `semver`. PEP 440 provides the following bump
                        strategies: `auto`, `epoch`, `release`, `major`,
                        `minor`, `micro`, `patch`, `pre`, `alpha`, `beta`,
                        `candidate`, `post`, `dev`. Values `auto`, `major`,
                        `minor`, `micro` can be suffixed with one of `+alpha`,
                        `+beta`, `+candidate`, and/or `+dev`. Values `alpha`,
                        `beta` and `candidate` can be suffixed with `+dev`.
                        Examples: `auto+alpha`, `major+beta+dev`, `micro+dev`,
                        `candidate+dev`, etc.. SemVer provides the following
                        bump strategies: `auto`, `major`, `minor`, `patch`,
                        `release`. See the docs for more information. Default:
                        unset (`semver`).
  -h, --help            Show this help message and exit.
  -i, --in-place        Insert new entries (versions missing from changelog)
                        in-place. An output file must be specified. With
                        custom templates, you can pass two additional
                        arguments: `--version-regex` and `--marker-line`. When
                        writing in-place, an `in_place` variable will be
                        injected in the Jinja context, allowing to adapt the
                        generated contents (for example to skip changelog
                        headers or footers). Default: unset (false).
  -g REGEX, --version-regex REGEX
                        A regular expression to match versions in the existing
                        changelog (used to find the latest release) when
                        writing in-place. The regular expression must be a
                        Python regex with a `version` named group. Default:
                        `^## \[(?P&lt;version&gt;v?[^\]]+)`.
  -m MARKER, --marker-line MARKER
                        A marker line at which to insert new entries (versions
                        missing from changelog). If two marker lines are
                        present in the changelog, the contents between those
                        two lines will be overwritten (useful to update an
                        'Unreleased' entry for example). Default: `&lt;!--
                        insertion marker --&gt;`.
  -o FILE, --output FILE
                        Output to given file. Default: standard output.
  -p PROVIDER, --provider PROVIDER
                        Explicitly specify the repository provider. Default:
                        unset.
  -r, --parse-refs      Parse provider-specific references in commit messages
                        (GitHub/GitLab/Bitbucket issues, PRs, etc.). Default:
                        unset (false).
  -R, --release-notes   Output release notes to stdout based on the last entry
                        in the changelog. Default: unset (false).
  -I FILE, --input FILE
                        Read from given file when creating release notes.
                        Default: `CHANGELOG.md`.
  -c CONVENTION, --convention CONVENTION, --commit-style CONVENTION, --style CONVENTION
                        The commit convention to match against. Default:
                        `basic`.
  -s SECTIONS, --sections SECTIONS
                        A comma-separated list of sections to render. See the
                        available sections for each supported convention in
                        the description. Default: unset (None).
  -t TEMPLATE, --template TEMPLATE
                        The Jinja2 template to use. Prefix it with `path:` to
                        specify the path to a Jinja templated file. Default:
                        `keepachangelog`.
  -T, --trailers, --git-trailers
                        Parse Git trailers in the commit message. See
                        https://git-scm.com/docs/git-interpret-trailers.
                        Default: unset (false).
  -E, --omit-empty-versions
                        Omit empty versions from the output. Default: unset
                        (false).
  -Z, --no-zerover      By default, breaking changes on a 0.x don't bump the
                        major version, maintaining it at 0. With this option,
                        a breaking change will bump a 0.x version to 1.0.
  -F RANGE, --filter-commits RANGE
                        The Git revision-range filter to use (e.g.
                        `v1.2.0..`). Default: no filter.
  -j KEY=VALUE, --jinja-context KEY=VALUE
                        Pass additional key/value pairs to the template.
                        Option can be used multiple times. The key/value pairs
                        are accessible as 'jinja_context' in the template.
  -V, --version         Show the current version of the program and exit.
  --debug-info          Print debug information.
</output_code>
  <markdown>Ya podr√≠amos generar changelogs f√°cilmente a partir de los commits que siguen la convenci√≥n de `conventional commits`. Adem√°s, podemos a√±adirlo a un pipeline de CI/CD para que se genere autom√°ticamente en cada release.</markdown>
</notebook>