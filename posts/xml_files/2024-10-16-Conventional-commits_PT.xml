<?xml version='1.0' encoding='utf-8'?>
<notebook>
  <markdown># Commits convencionais</markdown>
  <markdown> &gt; Aviso: Este post foi traduzido para o portugu√™s usando um modelo de tradu√ß√£o autom√°tica. Por favor, me avise se encontrar algum erro.</markdown>
  <markdown>Este post foi criado a partir do [v√≠deo](https://www.youtube.com/watch?v=SigVVJmUGv8) de [Carlos Azaustre](https://x.com/carlosazaustre), s√≥ que como ele explica como fazer tudo com ferramentas de JavaScript, h√° muita gente desenvolvedora de Python que n√£o tem o Node.js instalado, por isso fiz uma vers√£o do mesmo, mas tudo com ferramentas de Python.</markdown>
  <markdown>## O que s√£o os conventional commits?</markdown>
  <markdown>A integra√ß√£o com ferramentas de gerenciamento de altera√ß√µes e releases.</markdown>
  <markdown>### Formato das Mensagens de Commit</markdown>
  <markdown>Um mensagem de commit em Conventional Commits segue um formato espec√≠fico:
``` git
&lt;tipo&gt;[escopo opcional]: &lt;descri√ß√£o&gt;
[corpo opcional]
[rodap√©(s) opcional(is)]```</markdown>
  <markdown>Vamos v√™-lo com mais detalhes</markdown>
  <markdown>#### Tipo `type`</markdown>
  <markdown>O tipo de commit indica a natureza da mudan√ßa. Alguns tipos comuns s√£o:
* **fix**: √â utilizado para corre√ß√£o de bugs.* **feat**: Utiliza-se para novas funcionalidades.* **docs**: Utiliza-se para altera√ß√µes na documenta√ß√£o.* **estilo**: Utiliza-se para altera√ß√µes que n√£o afetam o significado do c√≥digo (por exemplo, formata√ß√£o, remo√ß√£o de espa√ßos em branco).* **refatorar**: √â utilizado para altera√ß√µes no c√≥digo que nem melhoram nem pioram a funcionalidade, como reorganizar o c√≥digo.* **perf**: Utiliza-se para mudan√ßas que melhoram o desempenho.* **teste**: Utilizado para adicionar ou atualizar testes.* **chore**: Utilizado para altera√ß√µes no processo ou nas ferramentas de desenvolvimento.* **ci**: Utiliza-se para altera√ß√µes nos arquivos de configura√ß√£o de integra√ß√£o cont√≠nua.* **build**: Utilizado para altera√ß√µes que afetam o sistema de compila√ß√£o ou depend√™ncias externas.* **revert**: √â utilizado para reverter um commit anterior.</markdown>
  <markdown>#### √Çmbito `scope`</markdown>
  <markdown>O escopo √© opcional e √© utilizado para especificar a parte do projeto que foi modificada. Por exemplo, se voc√™ est√° trabalhando em um componente espec√≠fico de uma aplica√ß√£o web, o escopo poderia ser o nome do componente.
Exemplo:
``` git
fix(auth): corrigir problema de autentica√ß√£o```</markdown>
  <markdown>#### Descri√ß√£o `description`</markdown>
  <markdown>A descri√ß√£o √© uma breve explica√ß√£o da altera√ß√£o. Deve ser concisa e clara, e fornecer contexto suficiente para entender o prop√≥sito do commit.
Exemplo:
``` git
fix(auth): corrigir erro de autentica√ß√£o na p√°gina de login```</markdown>
  <markdown>#### Corpo `body`</markdown>
  <markdown>O corpo √© opcional e √© utilizado para fornecer mais detalhes sobre a mudan√ßa. Aqui voc√™ pode incluir motiva√ß√µes para a mudan√ßa e contraste com a implementa√ß√£o anterior.
Exemplo:
``` git
fix(auth): corrigir erro de autentica√ß√£o na p√°gina de login
O token de acesso estava expirando antes do esperado devido a um erro no c√°lculo da data de expira√ß√£o. Isso foi corrigido ajustando a l√≥gica de c√°lculo.```</markdown>
  <markdown>#### Rodap√© `footer`</markdown>
  <markdown>O rodap√© √© opcional e √© utilizado para refer√™ncias adicionais, como n√∫meros de issues fechadas ou commits relacionados.
Exemplo:
``` git
fix(auth): corrigir erro de autentica√ß√£o na p√°gina de login
O token de acesso estava expirando antes do esperado devido a um erro no c√°lculo da data de expira√ß√£o. Isso foi corrigido ajustando a l√≥gica de c√°lculo.
Fecha #123```</markdown>
  <markdown>### Benef√≠cios dos Conventional Commits</markdown>
  <markdown>* **Clareza e Consist√™ncia**: As mensagens de commit padronizadas s√£o mais f√°ceis de entender e acompanhar, o que melhora a colabora√ß√£o em equipes de desenvolvimento.* **Gera√ß√£o Autom√°tica de Notas de Vers√£o**: Ferramentas podem ser usadas para gerar notas de vers√£o automaticamente com base nas mensagens de commit.* **Integra√ß√£o com Ferramentas de Gest√£o de Mudan√ßas**: Muitas ferramentas de desenvolvimento e gest√£o de projetos podem se integrar com Conventional Commits para automatizar tarefas como a gera√ß√£o de changelogs e a gest√£o de releases.* **Hist√≥rico Estruturado de Altera√ß√µes**: O hist√≥rico de altera√ß√µes torna-se mais estruturado e f√°cil de navegar, facilitando a revis√£o de altera√ß√µes e a depura√ß√£o de problemas.</markdown>
  <markdown>### Exemplos pr√°ticos</markdown>
  <markdown>Exemplo 1: Corre√ß√£o de um Bug
``` git
fix(api): corrigir erro na valida√ß√£o do usu√°rio
O ponto de extremidade de registro de usu√°rios estava permitindo registros com endere√ßos de e-mail inv√°lidos. Foi adicionada uma valida√ß√£o adicional para garantir que os endere√ßos de e-mail sejam v√°lidos.
Fecha #456```</markdown>
  <markdown>Exemplo 2: Adicionar um novo recurso
``` git
feat(api): adicionar ponto final de recupera√ß√£o de senha
Implementou um novo endpoint que permite aos usu√°rios solicitar um link de recupera√ß√£o de senha. O link √© enviado para o endere√ßo de e-mail registrado.
Fecha #789```</markdown>
  <markdown>Exemplo 3: Melhoria da documenta√ß√£o
``` git
docs: atualizar guia de contribui√ß√£o
Atualizadas as instru√ß√µes de configura√ß√£o para o ambiente de desenvolvimento e adicionada uma se√ß√£o sobre execu√ß√£o de testes.
Fecha #101```</markdown>
  <markdown>## Ferramentas para construir mensagens que atendam aos conventional commits</markdown>
  <markdown>Embora tenhamos visto como criar mensagens de commit atrav√©s de conventional commits, √© bastante poss√≠vel que cometamos erros, por isso podemos usar ferramentas que nos guiem na cria√ß√£o dessas mensagens. Vamos ver duas: `commitizen` e o plugin `Conventional Commits` do vscode.</markdown>
  <markdown>### Commitizen</markdown>
  <markdown>Para us√°-la, primeiro vou criar uma pasta nova na qual vou iniciar um reposit√≥rio do Git.</markdown>
  <markdown />
  <input_code>!mkdir ~/comitizen_folder &amp;&amp; cd ~/comitizen_folder &amp;&amp; git init</input_code>
  <output_code>[33mhint: Using 'master' as the name for the initial branch. This default branch name[m
[33mhint: is subject to change. To configure the initial branch name to use in all[m
[33mhint: of your new repositories, which will suppress this warning, call:[m
[33mhint: [m
[33mhint: 	git config --global init.defaultBranch &lt;name&gt;[m
[33mhint: [m
[33mhint: Names commonly chosen instead of 'master' are 'main', 'trunk' and[m
[33mhint: 'development'. The just-created branch can be renamed via this command:[m
[33mhint: [m
[33mhint: 	git branch -m &lt;name&gt;[m
Initialized empty Git repository in /home/maximofernandez/comitizen_folder/.git/
</output_code>
  <markdown>Agora eu instalo `commitizen`</markdown>
  <input_code>%pip install --user -U commitizen</input_code>
  <output_code>Collecting commitizen
  Downloading commitizen-3.29.1-py3-none-any.whl.metadata (7.6 kB)
Collecting argcomplete&lt;3.6,&gt;=1.12.1 (from commitizen)
  Downloading argcomplete-3.5.1-py3-none-any.whl.metadata (16 kB)
Requirement already satisfied: charset-normalizer&lt;4,&gt;=2.1.0 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (3.3.2)
Requirement already satisfied: colorama&lt;0.5.0,&gt;=0.4.1 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (0.4.6)
Collecting decli&lt;0.7.0,&gt;=0.6.0 (from commitizen)
  Downloading decli-0.6.2-py3-none-any.whl.metadata (17 kB)
Requirement already satisfied: jinja2&gt;=2.10.3 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (3.1.4)
Requirement already satisfied: packaging&gt;=19 in /home/maximofernandez/.local/lib/python3.12/site-packages (from commitizen) (24.1)
Requirement already satisfied: pyyaml&gt;=3.08 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from commitizen) (6.0.2)
Collecting questionary&lt;3.0,&gt;=2.0 (from commitizen)
  Downloading questionary-2.0.1-py3-none-any.whl.metadata (5.4 kB)
Collecting termcolor&lt;3,&gt;=1.1 (from commitizen)
  Downloading termcolor-2.5.0-py3-none-any.whl.metadata (6.1 kB)
Collecting tomlkit&lt;1.0.0,&gt;=0.5.3 (from commitizen)
  Downloading tomlkit-0.13.2-py3-none-any.whl.metadata (2.7 kB)
Requirement already satisfied: MarkupSafe&gt;=2.0 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from jinja2&gt;=2.10.3-&gt;commitizen) (2.1.5)
Collecting prompt_toolkit&lt;=3.0.36,&gt;=2.0 (from questionary&lt;3.0,&gt;=2.0-&gt;commitizen)
  Downloading prompt_toolkit-3.0.36-py3-none-any.whl.metadata (7.0 kB)
Requirement already satisfied: wcwidth in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from prompt_toolkit&lt;=3.0.36,&gt;=2.0-&gt;questionary&lt;3.0,&gt;=2.0-&gt;commitizen) (0.2.13)
Downloading commitizen-3.29.1-py3-none-any.whl (71 kB)
Downloading argcomplete-3.5.1-py3-none-any.whl (43 kB)
Downloading decli-0.6.2-py3-none-any.whl (7.9 kB)
Downloading questionary-2.0.1-py3-none-any.whl (34 kB)
Downloading termcolor-2.5.0-py3-none-any.whl (7.8 kB)
Downloading tomlkit-0.13.2-py3-none-any.whl (37 kB)
Downloading prompt_toolkit-3.0.36-py3-none-any.whl (386 kB)
Installing collected packages: tomlkit, termcolor, prompt_toolkit, decli, argcomplete, questionary, commitizen
[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.
ipython 8.27.0 requires prompt-toolkit&lt;3.1.0,&gt;=3.0.41, but you have prompt-toolkit 3.0.36 which is incompatible.[0m[31m
[0mSuccessfully installed argcomplete-3.5.1 commitizen-3.29.1 decli-0.6.2 prompt_toolkit-3.0.36 questionary-2.0.1 termcolor-2.5.0 tomlkit-0.13.2
Note: you may need to restart the kernel to use updated packages.
</output_code>
  <markdown>Verificamos a instala√ß√£o</markdown>
  <input_code>!cz version</input_code>
  <output_code>3.29.1
[0m</output_code>
  <markdown>Crio um novo arquivo na pasta em que inicializei o reposit√≥rio do Git e o adiciono √† √°rea de staging.</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; touch README.md &amp;&amp; git add README.md</input_code>
  <markdown>Se eu fizer `git status` verei que o arquivo est√° na √°rea de staged e que agora devo fazer um commit.</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; git status</input_code>
  <output_code>On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached &lt;file&gt;..." to unstage)
	[32mnew file:   README.md[m

</output_code>
  <markdown>√â hora de criar um commit com `commitizen`. Para isso, executamos `cz commit` e aparecer√° um assistente para criar o commit.</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; cz commit</input_code>
  <output_code>? Select the type of change you are committing docs: Documentation only changes
? What is the scope of this change? (class or file name): (press [enter] to skip)
 readme
? Write a short and imperative summary of the code changes: (lower case and no period)
 First innit, create readme
? Provide additional contextual information about the code changes: (press [enter] to skip)
 This is the first commit, I create a empty readme
? Is this a BREAKING CHANGE? Correlates with MAJOR in SemVer No
? Footer. Information about Breaking Changes and reference issues that this commit closes: (press [enter] to skip)


docs(readme): First innit, create readme

This is the first commit, I create a empty readme


[master (root-commit) 4f646d4] docs(readme): First innit, create readme
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 README.md

Commit successful!</output_code>
  <markdown>Pronto, j√° temos nosso primeiro commit criado com `commitizen` que segue as regras de `Conventional Commits`</markdown>
  <markdown>### Plugin Conventional Commit do vscode</markdown>
  <markdown>Agora vamos fazer o mesmo com o plugin do VSCode [Conventional Commit](https://marketplace.visualstudio.com/items?itemName=vivaxy.vscode-conventional-commits)</markdown>
  <markdown>Primeiro, √© necess√°rio instalar o plugin e, uma vez instalado, pressionamos `Ctrl + Shift + P` e escrevemos `Conventional Commit`, pressionamos `Enter` e aparecer√° um assistente para criar o commit.</markdown>
  <markdown>Para mim o uso deste plugin tem duas vantagens em rela√ß√£o ao `commitizen`
* A primeira √© que nos permite adicionar emojis de [gitmoji](https://gitmoji.dev/). O que, se n√£o abusarmos dos emojis e usarmos apenas alguns, torna mais f√°cil identificar o tipo de commit ao visualizar o hist√≥rico.* A segunda √© que ela mant√©m os escopos `scopes` que voc√™ usou, ent√£o novos escopos n√£o s√£o criados, mas sim reutilizados os que j√° foram usados.</markdown>
  <markdown>## Ferramentas para verificar que se segue a conven√ß√£o de conventional commits</markdown>
  <markdown>Vimos como criar mensagens de commit que sigam a conven√ß√£o de `conventional commits`, mas uma boa pr√°tica √© criar uma ferramenta para verificar se o commit criado segue a conven√ß√£o, especialmente quando se trabalha em equipe.
H√° ferramentas que nos permitem fazer isso, como `pre-commit`, mas o que elas fazem √© modificar os hooks do git, ent√£o vamos fazer n√≥s mesmos e usar `commitizen` para nos ajudar a validar a mensagem de commit.</markdown>
  <markdown>J√° instalamos `commitizen`, ent√£o vamos ver como podemos us√°-lo para verificar uma mensagem de commit.</markdown>
  <markdown>Primeiro criamos um arquivo chamado `commit-msg` na pasta `.git/hooks` e damos permiss√µes de execu√ß√£o. Dentro dos hooks do Git h√° [v√°rios tipos de arquivos](https://git-scm.com/docs/githooks#_hooks) que podem ser usados para diferentes tarefas, neste caso vamos usar `commit-msg` que √© executado logo antes da cria√ß√£o do commit.</markdown>
  <input_code>!cd ~/comitizen_folder/.git/hooks &amp;&amp; touch commit-msg &amp;&amp; chmod +x commit-msg</input_code>
  <markdown>Agora adicionamos o seguinte c√≥digo ao arquivo `commit-msg`
``` bash
#!/bin/shEste script valida a mensagem do commit usando commitizen
COMMIT_MSG_FILE=$1cz check --commit-msg-file $COMMIT_MSG_FILE```</markdown>
  <input_code>!cd ~/comitizen_folder/.git/hooks &amp;&amp; \
echo '#!/bin/sh' &gt; commit-msg &amp;&amp; \
echo '# Este script valida el mensaje del commit usando commitizen' &gt;&gt; commit-msg &amp;&amp; \
echo ' ' &gt;&gt; commit-msg &amp;&amp; \
echo 'COMMIT_MSG_FILE=$1' &gt;&gt; commit-msg &amp;&amp; \
echo 'cz check --commit-msg-file $COMMIT_MSG_FILE' &gt;&gt; commit-msg</input_code>
  <markdown>Uma vez feito, tentamos fazer um commit com uma mensagem incorreta. Primeiro, modificamos o README e o adicionamos √† √°rea de staging.</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; echo '.' &gt;&gt; README.md &amp;&amp; git add README.md</input_code>
  <markdown>Agora fazemos um commit com uma mensagem incorreta</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; git commit -m "Add dot to README"</input_code>
  <output_code>[31mcommit validation: failed!
please enter a commit message in the commitizen format.
commit "": "Add dot to README"
pattern: (?s)(build|ci|docs|feat|fix|perf|refactor|style|test|chore|revert|bump)(\(\S+\))?!?:( [^\n\r]+)((\n\n.*)|(\s*))?$[0m
[0m</output_code>
  <markdown>Agora fazemos um commit com uma mensagem correta</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; git commit -m "docs(readme): :memo: Add dot to README"</input_code>
  <output_code>[32mCommit validation: successful![0m
[0m[master d488656] docs(readme): :memo: Add dot to README
 1 file changed, 1 insertion(+), 1 deletion(-)
</output_code>
  <markdown>Nos validou o commit corretamente, portanto, se olharmos o hist√≥rico de commits, veremos que o commit com a mensagem incorreta n√£o foi criado e o commit com a mensagem correta sim.</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; git log</input_code>
  <output_code>[33mcommit d488656297c7cb448a25dd33a008cb5ce1e14e83[m[33m ([m[1;36mHEAD[m[33m -&gt; [m[1;32mmaster[m[33m)[m
Author: MaximoFN &lt;maximofn@gmail.com&gt;
Date:   Tue Oct 8 11:22:19 2024 +0200

    docs(readme): :memo: Add dot to README

[33mcommit fb518c2b903a259b2e44972e88aabf5656f97be9[m
Author: MaximoFN &lt;maximofn@gmail.com&gt;
Date:   Tue Oct 8 10:57:41 2024 +0200

    docs(readme): :memo: Update readme
    
    Update readme with text conventional commits

[33mcommit 4f646d45047a45b549243efbfde9e331d45e23f1[m
Author: MaximoFN &lt;maximofn@gmail.com&gt;
Date:   Tue Oct 8 10:48:07 2024 +0200

    docs(readme): First innit, create readme
    
    This is the first commit, I create a empty readme
</output_code>
  <markdown>## Ferramentas para criar changelogs a partir de conventional commits</markdown>
  <markdown>Como temos os commits escritos seguindo a mesma conven√ß√£o, podemos criar um changelog automaticamente com `git-changelog`. Instalamos as depend√™ncias</markdown>
  <input_code>%pip install git-changelog</input_code>
  <output_code>Collecting git-changelog
  Downloading git_changelog-2.5.2-py3-none-any.whl.metadata (5.4 kB)
Collecting appdirs&gt;=1.4 (from git-changelog)
  Downloading appdirs-1.4.4-py2.py3-none-any.whl.metadata (9.0 kB)
Requirement already satisfied: Jinja2&gt;=2.10 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from git-changelog) (3.1.4)
Requirement already satisfied: packaging&gt;=24.0 in /home/maximofernandez/.local/lib/python3.12/site-packages (from git-changelog) (24.1)
Collecting semver&gt;=2.13 (from git-changelog)
  Downloading semver-3.0.2-py3-none-any.whl.metadata (5.0 kB)
Requirement already satisfied: MarkupSafe&gt;=2.0 in /home/maximofernandez/miniforge3/lib/python3.12/site-packages (from Jinja2&gt;=2.10-&gt;git-changelog) (2.1.5)
Downloading git_changelog-2.5.2-py3-none-any.whl (32 kB)
Downloading appdirs-1.4.4-py2.py3-none-any.whl (9.6 kB)
Downloading semver-3.0.2-py3-none-any.whl (17 kB)
Installing collected packages: appdirs, semver, git-changelog
Successfully installed appdirs-1.4.4 git-changelog-2.5.2 semver-3.0.2
Note: you may need to restart the kernel to use updated packages.
</output_code>
  <markdown>Agora podemos criar um changelog com `git-changelog`. Como criamos alguns commits muito simples, o changelog ser√° muito simples.</markdown>
  <input_code>!cd ~/comitizen_folder &amp;&amp; git-changelog</input_code>
  <output_code># Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)
and this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).

&lt;!-- insertion marker --&gt;
## Unreleased

&lt;small&gt;[Compare with latest]()&lt;/small&gt;

&lt;!-- insertion marker --&gt;
</output_code>
  <markdown>Tamb√©m podemos pedir-lhe que o escreva num arquivo e muitas mais op√ß√µes</markdown>
  <input_code>!git-changelog -h</input_code>
  <output_code>usage: git-changelog [--config-file [PATH ...]] [-b] [-B VERSION] [-n SCHEME]
                     [-h] [-i] [-g REGEX] [-m MARKER] [-o FILE] [-p PROVIDER]
                     [-r] [-R] [-I FILE] [-c CONVENTION] [-s SECTIONS]
                     [-t TEMPLATE] [-T] [-E] [-Z] [-F RANGE] [-j KEY=VALUE]
                     [-V] [--debug-info]
                     [REPOSITORY]

Automatic Changelog generator using Jinja2 templates.

This tool parses your commit messages to extract useful data
that is then rendered using Jinja2 templates, for example to
a changelog file formatted in Markdown.

Each Git tag will be treated as a version of your project.
Each version contains a set of commits, and will be an entry
in your changelog. Commits in each version will be grouped
by sections, depending on the commit convention you follow.

### Conventions

#### Basic

*Default sections:*

- add: Added
- fix: Fixed
- change: Changed
- remove: Removed

*Additional sections:*

- merge: Merged
- doc: Documented

#### Angular

*Default sections:*

- feat: Features
- fix: Bug Fixes
- revert: Reverts
- ref, refactor: Code Refactoring
- perf: Performance Improvements

*Additional sections:*

- build: Build
- chore: Chore
- ci: Continuous Integration
- deps: Dependencies
- doc, docs: Docs
- style: Style
- test, tests: Tests

#### ConventionalCommit

*Default sections:*

- feat: Features
- fix: Bug Fixes
- revert: Reverts
- ref, refactor: Code Refactoring
- perf: Performance Improvements

*Additional sections:*

- build: Build
- chore: Chore
- ci: Continuous Integration
- deps: Dependencies
- doc, docs: Docs
- style: Style
- test, tests: Tests

positional arguments:
  REPOSITORY            The repository path, relative or absolute. Default:
                        current working directory.

options:
  --config-file [PATH ...]
                        Configuration file(s).
  -b, --bump-latest     Deprecated, use --bump=auto instead. Guess the new
                        latest version by bumping the previous one based on
                        the set of unreleased commits. For example, if a
                        commit contains breaking changes, bump the major
                        number (or the minor number for 0.x versions). Else if
                        there are new features, bump the minor number. Else
                        just bump the patch number. Default: unset (false).
  -B VERSION, --bump VERSION
                        Specify the bump from latest version for the set of
                        unreleased commits. Can be one of `auto`, `major`,
                        `minor`, `patch` or a valid SemVer version (eg.
                        1.2.3). For both SemVer and PEP 440 versioning schemes
                        (see -n), `auto` will bump the major number if a
                        commit contains breaking changes (or the minor number
                        for 0.x versions, see -Z), else the minor number if
                        there are new features, else the patch number.
                        Default: unset (false).
  -n SCHEME, --versioning SCHEME
                        Versioning scheme to use when bumping and comparing
                        versions. The selected scheme will impact the values
                        accepted by the `--bump` option. Supported: `pep440`,
                        `semver`. PEP 440 provides the following bump
                        strategies: `auto`, `epoch`, `release`, `major`,
                        `minor`, `micro`, `patch`, `pre`, `alpha`, `beta`,
                        `candidate`, `post`, `dev`. Values `auto`, `major`,
                        `minor`, `micro` can be suffixed with one of `+alpha`,
                        `+beta`, `+candidate`, and/or `+dev`. Values `alpha`,
                        `beta` and `candidate` can be suffixed with `+dev`.
                        Examples: `auto+alpha`, `major+beta+dev`, `micro+dev`,
                        `candidate+dev`, etc.. SemVer provides the following
                        bump strategies: `auto`, `major`, `minor`, `patch`,
                        `release`. See the docs for more information. Default:
                        unset (`semver`).
  -h, --help            Show this help message and exit.
  -i, --in-place        Insert new entries (versions missing from changelog)
                        in-place. An output file must be specified. With
                        custom templates, you can pass two additional
                        arguments: `--version-regex` and `--marker-line`. When
                        writing in-place, an `in_place` variable will be
                        injected in the Jinja context, allowing to adapt the
                        generated contents (for example to skip changelog
                        headers or footers). Default: unset (false).
  -g REGEX, --version-regex REGEX
                        A regular expression to match versions in the existing
                        changelog (used to find the latest release) when
                        writing in-place. The regular expression must be a
                        Python regex with a `version` named group. Default:
                        `^## \[(?P&lt;version&gt;v?[^\]]+)`.
  -m MARKER, --marker-line MARKER
                        A marker line at which to insert new entries (versions
                        missing from changelog). If two marker lines are
                        present in the changelog, the contents between those
                        two lines will be overwritten (useful to update an
                        'Unreleased' entry for example). Default: `&lt;!--
                        insertion marker --&gt;`.
  -o FILE, --output FILE
                        Output to given file. Default: standard output.
  -p PROVIDER, --provider PROVIDER
                        Explicitly specify the repository provider. Default:
                        unset.
  -r, --parse-refs      Parse provider-specific references in commit messages
                        (GitHub/GitLab/Bitbucket issues, PRs, etc.). Default:
                        unset (false).
  -R, --release-notes   Output release notes to stdout based on the last entry
                        in the changelog. Default: unset (false).
  -I FILE, --input FILE
                        Read from given file when creating release notes.
                        Default: `CHANGELOG.md`.
  -c CONVENTION, --convention CONVENTION, --commit-style CONVENTION, --style CONVENTION
                        The commit convention to match against. Default:
                        `basic`.
  -s SECTIONS, --sections SECTIONS
                        A comma-separated list of sections to render. See the
                        available sections for each supported convention in
                        the description. Default: unset (None).
  -t TEMPLATE, --template TEMPLATE
                        The Jinja2 template to use. Prefix it with `path:` to
                        specify the path to a Jinja templated file. Default:
                        `keepachangelog`.
  -T, --trailers, --git-trailers
                        Parse Git trailers in the commit message. See
                        https://git-scm.com/docs/git-interpret-trailers.
                        Default: unset (false).
  -E, --omit-empty-versions
                        Omit empty versions from the output. Default: unset
                        (false).
  -Z, --no-zerover      By default, breaking changes on a 0.x don't bump the
                        major version, maintaining it at 0. With this option,
                        a breaking change will bump a 0.x version to 1.0.
  -F RANGE, --filter-commits RANGE
                        The Git revision-range filter to use (e.g.
                        `v1.2.0..`). Default: no filter.
  -j KEY=VALUE, --jinja-context KEY=VALUE
                        Pass additional key/value pairs to the template.
                        Option can be used multiple times. The key/value pairs
                        are accessible as 'jinja_context' in the template.
  -V, --version         Show the current version of the program and exit.
  --debug-info          Print debug information.
</output_code>
  <markdown>J√° poder√≠amos gerar changelogs facilmente a partir dos commits que seguem a conven√ß√£o de `conventional commits`. Al√©m disso, podemos adicion√°-lo a um pipeline de CI/CD para que seja gerado automaticamente em cada release.</markdown>
</notebook>