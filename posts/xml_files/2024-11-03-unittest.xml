<?xml version='1.0' encoding='utf-8'?>
<notebook>
  <markdown># unittest Python</markdown>
  <markdown>Para realizar este post vamos a crear una carpeta llamada `testing_python` donde vamos a crear todo el código</markdown>
  <input_code>!mkdir testing_python</input_code>
  <markdown>Dentro de esa carpeta vamos a crear las carpetas `src` y `tests` donde vamos a poner el código fuente y los tests respectivamente</markdown>
  <input_code>!mkdir testing_python/src
!mkdir testing_python/tests</input_code>
  <markdown>## Librerías necesarias</markdown>
  <markdown>Para hacer los tests vamos a usar la librería `unittest` que viene por defecto en Python, pero además vamos a instalar `coverage` para poder ver la cobertura de los tests. La instalamos con Conda

```bash
conda install conda-forge::coverage
```

O con pip

```bash
pip install coverage
```</markdown>
  <markdown>## Primeros tests</markdown>
  <markdown>Vamos a crear un primer archivo llamado `calculator.py` en la carpeta `src`</markdown>
  <input_code>!echo "def sum(a, b):"           &gt; testing_python/src/calculator.py
!echo "    return a + b"        &gt;&gt; testing_python/src/calculator.py
!echo ""                        &gt;&gt; testing_python/src/calculator.py
!echo "def substract(a, b):"    &gt;&gt; testing_python/src/calculator.py
!echo "    return a - b"        &gt;&gt; testing_python/src/calculator.py
!echo ""                        &gt;&gt; testing_python/src/calculator.py
!echo "def multiply(a, b):"     &gt;&gt; testing_python/src/calculator.py
!echo "    return a * b"        &gt;&gt; testing_python/src/calculator.py
!echo ""                        &gt;&gt; testing_python/src/calculator.py
!echo "def divide(a, b):"       &gt;&gt; testing_python/src/calculator.py
!echo "    return a / b"        &gt;&gt; testing_python/src/calculator.py</input_code>
  <markdown>Ahora creamos un archivo llamado `test_calculator.py` en la carpeta `tests`</markdown>
  <input_code>!echo "import unittest"                                                  &gt;  testing_python/tests/test_calculator.py
!echo "from src.calculator import sum, substract, multiply, divide"     &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "class TestCalculator(unittest.TestCase):"                        &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_sum(self):"                                         &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(sum(2, 2), 4)"                          &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_substract(self):"                                   &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(substract(2, 1), 1)"                    &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_multiply(self):"                                    &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(multiply(2, 3), 6)"                     &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_divide(self):"                                      &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(divide(6, 3), 2)"                       &gt;&gt; testing_python/tests/test_calculator.py</input_code>
  <markdown>Ahora para ejecutarlo hacemos `python -m unittest tests/test_calculator.py discover -s tests`</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest tests/test_calculator.py</input_code>
  <output_code>....
----------------------------------------------------------------------
Ran 4 tests in 0.000s

OK
</output_code>
  <markdown>Como vemos, aparecen cuatro puntos por los dos tests que se han pasado y que han sido correctos</markdown>
  <markdown>Vamos a modificar el archivo de test para provocar un error, vamos a hacer que al sumar 2 y 2 nos dé 5</markdown>
  <input_code>!echo "import unittest"                                                  &gt;  testing_python/tests/test_calculator.py
!echo "from src.calculator import sum, substract, multiply, divide"     &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "class TestCalculator(unittest.TestCase):"                        &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_sum(self):"                                         &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(sum(2, 2), 5)"                          &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_substract(self):"                                   &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(substract(2, 1), 1)"                    &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_multiply(self):"                                    &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(multiply(2, 3), 6)"                     &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_divide(self):"                                      &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(divide(6, 3), 2)"                       &gt;&gt; testing_python/tests/test_calculator.py</input_code>
  <markdown>Ahora corremos los test</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest tests/test_calculator.py</input_code>
  <output_code>...F
======================================================================
FAIL: test_sum (tests.test_calculator.TestCalculator)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_calculator.py", line 6, in test_sum
    self.assertEqual(sum(2, 2), 5)
AssertionError: 4 != 5

----------------------------------------------------------------------
Ran 4 tests in 0.000s

FAILED (failures=1)
</output_code>
  <markdown>Como vemos, ahora nos sale una `F` que significa que ha fallado un test, además, nos da la siguiente información

```
FAIL: test_sum (tests.test_calculator.TestCalculator)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_calculator.py", line 6, in test_sum
    self.assertEqual(sum(2, 2), 5)
AssertionError: 4 != 5
```

Nos está diciendo que ha fallado el test `test_sum` en la línea 6, que es la que hemos modificado, y que el resultado esperado era 5 y el obtenido 4</markdown>
  <markdown>Una cosa que no hemos dicho y que es importante, es que no hemos llamado a los métodos `test_sum` y `test_subtract` directamente, se han ejecutado automáticamente. Esto es debido a que los métodos que empiezan por `test_` son los que se ejecutan automáticamente</markdown>
  <markdown>Una forma más sencilla de ejecutar los tests es usar el comando `discover` que busca todos los archivos que empiezan por `test_` en la carpeta que le pasemos por el parámetro `-s`</markdown>
  <markdown>Primero volvemos a escribir bien los test</markdown>
  <input_code>!echo "import unittest"                                                  &gt;  testing_python/tests/test_calculator.py
!echo "from src.calculator import sum, substract, multiply, divide"     &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "class TestCalculator(unittest.TestCase):"                        &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_sum(self):"                                         &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(sum(2, 2), 4)"                          &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_substract(self):"                                   &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(substract(2, 1), 1)"                    &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_multiply(self):"                                    &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(multiply(2, 3), 6)"                     &gt;&gt; testing_python/tests/test_calculator.py
!echo ""                                                                &gt;&gt; testing_python/tests/test_calculator.py
!echo "    def test_divide(self):"                                      &gt;&gt; testing_python/tests/test_calculator.py
!echo "        self.assertEqual(divide(6, 3), 2)"                       &gt;&gt; testing_python/tests/test_calculator.py</input_code>
  <markdown>Y ahora pasamos los tests mediante `discover`</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests</input_code>
  <output_code>....
----------------------------------------------------------------------
Ran 4 tests in 0.000s

OK
</output_code>
  <markdown>Ha encontrado los test y los ha pasado correctamente</markdown>
  <markdown>## Configuración de los tests</markdown>
  <markdown>### `setUp`</markdown>
  <markdown>Con la librería `unittest` podemos configurar los tests, pero para verlo, primero vamos a crear un nuevo archivo de código llamado `bank_account.py` en la carpeta `src`</markdown>
  <input_code>!echo "class BankAccount:"                           &gt; testing_python/src/bank_account.py
!echo "    def __init__(self, balance=0):"          &gt;&gt; testing_python/src/bank_account.py
!echo "        self.balance = balance"              &gt;&gt; testing_python/src/bank_account.py
!echo ""                                            &gt;&gt; testing_python/src/bank_account.py
!echo "    def deposit(self, amount):"              &gt;&gt; testing_python/src/bank_account.py
!echo "        if amount &gt; 0:"                      &gt;&gt; testing_python/src/bank_account.py
!echo "            self.balance += amount"          &gt;&gt; testing_python/src/bank_account.py
!echo "        return self.balance"                 &gt;&gt; testing_python/src/bank_account.py
!echo ""                                            &gt;&gt; testing_python/src/bank_account.py
!echo "    def withdraw(self, amount):"             &gt;&gt; testing_python/src/bank_account.py
!echo "        if amount &gt; 0:"                      &gt;&gt; testing_python/src/bank_account.py
!echo "            self.balance -= amount"          &gt;&gt; testing_python/src/bank_account.py
!echo "        return self.balance"                 &gt;&gt; testing_python/src/bank_account.py
!echo ""                                            &gt;&gt; testing_python/src/bank_account.py
!echo "    def get_balance(self):"                  &gt;&gt; testing_python/src/bank_account.py
!echo "        return self.balance"                 &gt;&gt; testing_python/src/bank_account.py</input_code>
  <markdown>Ahora añadimos tests al nuevo código, creando un archivo llamado `test_bank_account.py` en la carpeta `tests`</markdown>
  <markdown>Vamos a crear primero la prueba de añadir depósito, es decir, el método `deposit`</markdown>
  <input_code>!echo "import unittest"                              &gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"    &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        account = BankAccount()"             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = account.deposit(1500)"  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"  &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Pasamos los tests</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests</input_code>
  <output_code>.....
----------------------------------------------------------------------
Ran 5 tests in 0.000s

OK
</output_code>
  <markdown>Vemos que hay cinco puntos, pero nosotros solo hemos escrito un test, así que usamos el flag `-v` para ver más información</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

----------------------------------------------------------------------
Ran 5 tests in 0.000s

OK
</output_code>
  <markdown>Vemos que `discover` ha encontrado los tests `test_calculator` y `test_bank_account` y ha pasado los dos</markdown>
  <markdown>Vamos a crear los tests para el resto de métodos</markdown>
  <input_code>!echo "import unittest"                              &gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"    &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        account = BankAccount(balance=1000)" &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = account.deposit(500)"   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"  &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        account = BankAccount(balance=1000)" &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = account.withdraw(200)"  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800)"   &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        account = BankAccount(balance=1000)" &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = account.get_balance()"     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"     &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Pasamos los tests</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_get_balance (test_bank_account.TestBankAccount) ... ok
test_withdraw (test_bank_account.TestBankAccount) ... ok
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

----------------------------------------------------------------------
Ran 7 tests in 0.000s

OK
</output_code>
  <markdown>Vemos que han pasado satisfactoriamente. Ahora veamos una cosa, en todos los tests hemos hecho `account = BankAccount(balance=1000)` y luego hemos llamado a los métodos, esto es porque cada test se ejecuta en un nuevo objeto, es decir, no se comparten los objetos entre tests.

De modo que podemos usar el método `setUp` para crear un objeto que se comparta entre todos los test</markdown>
  <input_code>!echo "import unittest"                                      &gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000)"    &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800)"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"             &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Como vemos, hemos creado la cuenta en el método `setUp` y hemos eliminado la creación de la cuenta en los tests. Vamos a pasar los test</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_get_balance (test_bank_account.TestBankAccount) ... ok
test_withdraw (test_bank_account.TestBankAccount) ... ok
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

----------------------------------------------------------------------
Ran 7 tests in 0.000s

OK
</output_code>
  <markdown>### `tearDown`</markdown>
  <markdown>Igual que con el método `setUp` configuramos el entorno antes de ejecutar los tests, con el método `tearDown` podemos limpiar el entorno después de ejecutar los tests. Para probarlo vamos a añadir al código de `bank_account.py` que las operaciones se escriban en un archivo de log</markdown>
  <input_code>!echo "class BankAccount:"                                                                   &gt; testing_python/src/bank_account.py
!echo "    def __init__(self, balance=0, log_file=None):"                                   &gt;&gt; testing_python/src/bank_account.py
!echo "        self.balance = balance"                                                      &gt;&gt; testing_python/src/bank_account.py
!echo "        self.log_file = log_file"                                                    &gt;&gt; testing_python/src/bank_account.py
!echo "        self._log_transaction('Account created')"                                    &gt;&gt; testing_python/src/bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/src/bank_account.py
!echo "    def _log_transaction(self, message):"                                            &gt;&gt; testing_python/src/bank_account.py
!echo "        if self.log_file:"                                                           &gt;&gt; testing_python/src/bank_account.py
!echo "            with open(self.log_file, 'a') as file:"                                  &gt;&gt; testing_python/src/bank_account.py
!echo "                file.write(f'{message}\\\\n')"                                       &gt;&gt; testing_python/src/bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/src/bank_account.py
!echo "    def deposit(self, amount):"                                                      &gt;&gt; testing_python/src/bank_account.py
!echo "        if amount &gt; 0:"                                                              &gt;&gt; testing_python/src/bank_account.py
!echo "            self.balance += amount"                                                  &gt;&gt; testing_python/src/bank_account.py
!echo "            self._log_transaction(f'Deposit {amount}, new balance {self.balance}')"  &gt;&gt; testing_python/src/bank_account.py
!echo "        return self.balance"                                                         &gt;&gt; testing_python/src/bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/src/bank_account.py
!echo "    def withdraw(self, amount):"                                                     &gt;&gt; testing_python/src/bank_account.py
!echo "        if amount &gt; 0:"                                                              &gt;&gt; testing_python/src/bank_account.py
!echo "            self.balance -= amount"                                                  &gt;&gt; testing_python/src/bank_account.py
!echo "            self._log_transaction(f'Withdraw {amount}, new balance {self.balance}')" &gt;&gt; testing_python/src/bank_account.py
!echo "        return self.balance"                                                         &gt;&gt; testing_python/src/bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/src/bank_account.py
!echo "    def get_balance(self):"                                                          &gt;&gt; testing_python/src/bank_account.py
!echo "        self._log_transaction(f'Balance check, balance {self.balance}')"             &gt;&gt; testing_python/src/bank_account.py
!echo "        return self.balance"                                                         &gt;&gt; testing_python/src/bank_account.py</input_code>
  <markdown>Ahora añadimos un test al nuevo método `_log_transaction`</markdown>
  <input_code>!echo "import unittest"                                                                      &gt; testing_python/tests/test_bank_account.py
!echo "import os"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000, log_file='test_log.txt')"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800)"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_transaction_log(self):"                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.deposit(500)"                                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.withdraw(200)"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.get_balance()"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        assert os.path.exists('test_log.txt')"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        with open('test_log.txt', 'r') as file:"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            content = file.readlines()"                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(content, ["                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1000\\\n', "                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Withdraw 200, new balance 1300\\\n', "                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1300\\\n'])"                                     &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Pasamos los tests</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_get_balance (test_bank_account.TestBankAccount) ... ok
test_transaction_log (test_bank_account.TestBankAccount) ... FAIL
test_withdraw (test_bank_account.TestBankAccount) ... ok
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

======================================================================
FAIL: test_transaction_log (test_bank_account.TestBankAccount)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_bank_account.py", line 28, in test_transaction_log
    self.assertEqual(content, [
AssertionError: Lists differ: ['Acc[224 chars]00\n', 'Account created\n', 'Withdraw 200, new[246 chars]0\n'] != ['Acc[224 chars]00\n']

First list contains 10 additional elements.
First extra element 8:
'Account created\n'

  ['Account created\n',
   'Deposit 500, new balance 1500\n',
   'Account created\n',
   'Balance check, balance 1000\n',
   'Account created\n',
   'Deposit 500, new balance 1500\n',
   'Withdraw 200, new balance 1300\n',
-  'Balance check, balance 1300\n',
-  'Account created\n',
-  'Withdraw 200, new balance 800\n',
-  'Account created\n',
-  'Deposit 500, new balance 1500\n',
-  'Account created\n',
-  'Balance check, balance 1000\n',
-  'Account created\n',
-  'Deposit 500, new balance 1500\n',
-  'Withdraw 200, new balance 1300\n',
   'Balance check, balance 1300\n']

----------------------------------------------------------------------
Ran 8 tests in 0.001s

FAILED (failures=1)
</output_code>
  <markdown>Los test han salido bien, pero vemos que en el archivo de log hay muchas líneas con el texto `Account created`, esto es porque al principio de cada test se ejecuta el método `setUp` que crea una cuenta, por lo que tenemos que crear el método `tearDown` para eliminar el archivo de log después de cada test</markdown>
  <markdown>Como es un archivo generado para el test, no debería existir después de ejecutar los tests, así que vamos a añadir el método `tearDown` para borrar el archivo</markdown>
  <input_code>!echo "import unittest"                                                                      &gt; testing_python/tests/test_bank_account.py
!echo "import os"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000, log_file='test_log.txt')"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def tearDown(self):"                                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        if os.path.exists('test_log.txt'):"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            os.remove('test_log.txt')"                                               &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800)"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_transaction_log(self):"                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.deposit(500)"                                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.withdraw(200)"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.get_balance()"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        assert os.path.exists('test_log.txt')"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        with open('test_log.txt', 'r') as file:"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            content = file.readlines()"                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(content, ["                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1000\\\n', "                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Withdraw 200, new balance 1300\\\n', "                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1300\\\n'"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            ])"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Volvemos a pasar los tests</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_get_balance (test_bank_account.TestBankAccount) ... ok
test_transaction_log (test_bank_account.TestBankAccount) ... FAIL
test_withdraw (test_bank_account.TestBankAccount) ... ok
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

======================================================================
FAIL: test_transaction_log (test_bank_account.TestBankAccount)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_bank_account.py", line 32, in test_transaction_log
    self.assertEqual(content, [
AssertionError: Lists differ: ['Acc[48 chars]n', 'Withdraw 200, new balance 1300\n', 'Balan[21 chars]0\n'] != ['Acc[48 chars]n', 'Account created\n', 'Balance check, balan[131 chars]0\n']

First differing element 2:
'Withdraw 200, new balance 1300\n'
'Account created\n'

Second list contains 4 additional elements.
First extra element 4:
'Account created\n'

  ['Account created\n',
+  'Deposit 500, new balance 1500\n',
+  'Account created\n',
+  'Balance check, balance 1000\n',
+  'Account created\n',
   'Deposit 500, new balance 1500\n',
   'Withdraw 200, new balance 1300\n',
   'Balance check, balance 1300\n']

----------------------------------------------------------------------
Ran 8 tests in 0.001s

FAILED (failures=1)
</output_code>
  <markdown>Pero ahora nos da error, porque como al final de cada prueba hemos eliminado el archivo de log, ya no hay que comprobar que se haya escrito tanto texto, sino solo el del test que estamos haciendo. Así que vamos a modificar el test para que solo compruebe que se ha escrito el texto del test</markdown>
  <input_code>!echo "import unittest"                                                                      &gt; testing_python/tests/test_bank_account.py
!echo "import os"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000, log_file='test_log.txt')"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def tearDown(self):"                                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        if os.path.exists('test_log.txt'):"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            os.remove('test_log.txt')"                                               &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800)"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_transaction_log(self):"                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.deposit(500)"                                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.withdraw(200)"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.get_balance()"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        assert os.path.exists('test_log.txt')"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        with open('test_log.txt', 'r') as file:"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            content = file.readlines()"                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(content, ["                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Withdraw 200, new balance 1300\\\n', "                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1300\\\n'"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            ])"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Y pasamos los test</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_get_balance (test_bank_account.TestBankAccount) ... ok
test_transaction_log (test_bank_account.TestBankAccount) ... ok
test_withdraw (test_bank_account.TestBankAccount) ... ok
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

----------------------------------------------------------------------
Ran 8 tests in 0.001s

OK
</output_code>
  <markdown>### Documentación de errores</markdown>
  <markdown>Si te has fijado, hasta ahora en los tests usábamos `assertEqual`. Este método nos da la opción de escribir un mensaje de error cuando no se cumple la condición. Vamos a modificar un test para que falle y ver el mensaje de error</markdown>
  <input_code>!echo "import unittest"                                                                      &gt; testing_python/tests/test_bank_account.py
!echo "import os"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000, log_file='test_log.txt')"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def tearDown(self):"                                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        if os.path.exists('test_log.txt'):"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            os.remove('test_log.txt')"                                               &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 500, 'Balance is not correct')"                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_transaction_log(self):"                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.deposit(500)"                                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.withdraw(200)"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.get_balance()"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        assert os.path.exists('test_log.txt')"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        with open('test_log.txt', 'r') as file:"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            content = file.readlines()"                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(content, ["                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Withdraw 200, new balance 1300\\\n', "                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1300\\\n'"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            ])"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Pasamos los tests</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_get_balance (test_bank_account.TestBankAccount) ... ok
test_transaction_log (test_bank_account.TestBankAccount) ... ok
test_withdraw (test_bank_account.TestBankAccount) ... FAIL
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

======================================================================
FAIL: test_withdraw (test_bank_account.TestBankAccount)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_bank_account.py", line 19, in test_withdraw
    self.assertEqual(new_balace, 500, 'Balance is not correct')
AssertionError: 800 != 500 : Balance is not correct

----------------------------------------------------------------------
Ran 8 tests in 0.001s

FAILED (failures=1)
</output_code>
  <markdown>Como podemos ver, tenemos el mensaje que hemos escrito en el test `AssertionError: 800 != 500 : Balance is not correct`</markdown>
  <markdown>### `assert`s</markdown>
  <markdown>Hasta ahora hemos usado los `assertEqual`, pero hay más, como por ejemplo el `assertTrue`. Vamos a modificar la línea `assert os.path.exists('test_log.txt')` por `self.assertTrue(os.path.exists('test_log.txt'))`</markdown>
  <input_code>!echo "import unittest"                                                                     &gt; testing_python/tests/test_bank_account.py
!echo "import os"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000, log_file='test_log.txt')"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def tearDown(self):"                                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        if os.path.exists('test_log.txt'):"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            os.remove('test_log.txt')"                                               &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Balance is not correct')"                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_transaction_log(self):"                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.deposit(500)"                                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.withdraw(200)"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.get_balance()"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(os.path.exists('test_log.txt'))"                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        with open('test_log.txt', 'r') as file:"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            content = file.readlines()"                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(content, ["                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Withdraw 200, new balance 1300\\\n', "                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1300\\\n'"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            ])"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Y pasamos los test</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_get_balance (test_bank_account.TestBankAccount) ... ok
test_transaction_log (test_bank_account.TestBankAccount) ... ok
test_withdraw (test_bank_account.TestBankAccount) ... ok
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

----------------------------------------------------------------------
Ran 8 tests in 0.001s

OK
</output_code>
  <markdown>Algunos otros `assert`s que podemos usar son:
 * `assertEqual`
 * `assertNotEqual`
 * `assertTrue`
 * `assertFalse`
 * `assertRaises`</markdown>
  <markdown>### `skip`</markdown>
  <markdown>Al igual que en Python podemos usar `pass` para no hacer nada, en los tests podemos usar `skip` para saltar un test. Esto puede ser útil cuando sabemos que queremos pasar unas pruebas, pero aún no está el código para pasarlas.</markdown>
  <markdown>Voy a añadir un test que compruebe si el usuario tiene un préstamo, pero como aún no hay código referente a los préstamos, voy a saltar el test</markdown>
  <input_code>!echo "import unittest"                                                                      &gt; testing_python/tests/test_bank_account.py
!echo "import os"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000, log_file='test_log.txt')"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def tearDown(self):"                                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        if os.path.exists('test_log.txt'):"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            os.remove('test_log.txt')"                                               &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Balance is not correct')"                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_transaction_log(self):"                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.deposit(500)"                                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.withdraw(200)"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.get_balance()"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(os.path.exists('test_log.txt'))"                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        with open('test_log.txt', 'r') as file:"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            content = file.readlines()"                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(content, ["                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Withdraw 200, new balance 1300\\\n', "                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1300\\\n'"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            ])"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skip('Not implemented yet')"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_has_loan(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertFalse(self.account.has_loan())"                                   &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Vamos a ver qué pasa al ejecutarlo</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_get_balance (test_bank_account.TestBankAccount) ... ok
test_has_loan (test_bank_account.TestBankAccount) ... skipped 'Not implemented yet'
test_transaction_log (test_bank_account.TestBankAccount) ... ok
test_withdraw (test_bank_account.TestBankAccount) ... ok
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

----------------------------------------------------------------------
Ran 9 tests in 0.001s

OK (skipped=1)
</output_code>
  <markdown>Podemos ver `test_has_loan (test_bank_account.TestBankAccount) ... skipped 'Not implemented yet'` se ha saltado ese test como queríamos</markdown>
  <markdown>### `skipIf`</markdown>
  <markdown>Otra opción es usar `skipIf` para saltar un test si se cumple una condición. Voy a añadir una variable al principio llamada `server` para saber si estamos en un entorno local o en el servidor, y el test comprobará esa variable, de modo que si estamos en el servidor, se saltará el test</markdown>
  <input_code>!echo "import unittest"                                                                      &gt; testing_python/tests/test_bank_account.py
!echo "import os"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "SERVER = True"                                                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000, log_file='test_log.txt')"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def tearDown(self):"                                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        if os.path.exists('test_log.txt'):"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            os.remove('test_log.txt')"                                               &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Balance is not correct')"                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_transaction_log(self):"                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.deposit(500)"                                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.withdraw(200)"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.get_balance()"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(os.path.exists('test_log.txt'))"                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        with open('test_log.txt', 'r') as file:"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            content = file.readlines()"                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(content, ["                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Withdraw 200, new balance 1300\\\n', "                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1300\\\n'"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            ])"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skip('Not implemented yet')"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_has_loan(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertFalse(self.account.has_loan())"                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skipIf(SERVER, 'Only for local testing')"                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_server(self):"                                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(SERVER)"                                                     &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Si pasamos los tests</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_get_balance (test_bank_account.TestBankAccount) ... ok
test_has_loan (test_bank_account.TestBankAccount) ... skipped 'Not implemented yet'
test_server (test_bank_account.TestBankAccount) ... skipped 'Only for local testing'
test_transaction_log (test_bank_account.TestBankAccount) ... ok
test_withdraw (test_bank_account.TestBankAccount) ... ok
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

----------------------------------------------------------------------
Ran 10 tests in 0.001s

OK (skipped=2)
</output_code>
  <markdown>Vemos `test_server (test_bank_account.TestBankAccount) ... skipped 'Only for local testing'` ya que, como `SERVER = True`, se ha saltado el test</markdown>
  <markdown>### `expectedFailure`</markdown>
  <markdown>Se tiene que producir un error cuando un usuario quiere sacar más dinero del que tiene, de modo que con el método `expectedFailure` podemos decir que esperamos que falle el test</markdown>
  <input_code>!echo "import unittest"                                                                      &gt; testing_python/tests/test_bank_account.py
!echo "import os"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "SERVER = True"                                                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000, log_file='test_log.txt')"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def tearDown(self):"                                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        if os.path.exists('test_log.txt'):"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            os.remove('test_log.txt')"                                               &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Balance is not correct')"                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_transaction_log(self):"                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.deposit(500)"                                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.withdraw(200)"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.get_balance()"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(os.path.exists('test_log.txt'))"                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        with open('test_log.txt', 'r') as file:"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            content = file.readlines()"                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(content, ["                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Withdraw 200, new balance 1300\\\n', "                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1300\\\n'"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            ])"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skip('Not implemented yet')"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_has_loan(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertFalse(self.account.has_loan())"                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skipIf(SERVER, 'Only for local testing')"                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_server(self):"                                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(SERVER)"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.expectedFailure"                                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_fail(self):"                                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(1200)"                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Not enough money')"                       &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Pasamos los tests</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_fail (test_bank_account.TestBankAccount) ... expected failure
test_get_balance (test_bank_account.TestBankAccount) ... ok
test_has_loan (test_bank_account.TestBankAccount) ... skipped 'Not implemented yet'
test_server (test_bank_account.TestBankAccount) ... skipped 'Only for local testing'
test_transaction_log (test_bank_account.TestBankAccount) ... ok
test_withdraw (test_bank_account.TestBankAccount) ... ok
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

----------------------------------------------------------------------
Ran 11 tests in 0.001s

OK (skipped=2, expected failures=1)
</output_code>
  <markdown>Como vemos, obtenemos `test_fail (test_bank_account.TestBankAccount) ... expected failure` porque es un error que esperábamos</markdown>
  <markdown>### `skipUnless`</markdown>
  <markdown>Al igual que antes, puede que haya pruebas que solo queramos hacer en el entorno de desarrollo, pero nunca en el servidor, o en staging, o en producción. Para eso podemos usar `skipUnless`</markdown>
  <input_code>!echo "import unittest"                                                                      &gt; testing_python/tests/test_bank_account.py
!echo "import os"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "SERVER = True"                                                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "ENVIRONMENT = 'server'"                                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000, log_file='test_log.txt')"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def tearDown(self):"                                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        if os.path.exists('test_log.txt'):"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            os.remove('test_log.txt')"                                               &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Balance is not correct')"                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_transaction_log(self):"                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.deposit(500)"                                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.withdraw(200)"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.get_balance()"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(os.path.exists('test_log.txt'))"                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        with open('test_log.txt', 'r') as file:"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            content = file.readlines()"                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(content, ["                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Withdraw 200, new balance 1300\\\n', "                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1300\\\n'"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            ])"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skip('Not implemented yet')"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_has_loan(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertFalse(self.account.has_loan())"                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skipIf(SERVER, 'Only for local testing')"                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_server(self):"                                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(SERVER)"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.expectedFailure"                                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_fail(self):"                                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(1200)"                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Not enough money')"                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skipUnless(ENVIRONMENT == 'dev', 'Only for dev environment')"          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_environment(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(ENVIRONMENT, 'dev')"                                        &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Pasamos los tests</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest discover -s tests -v</input_code>
  <output_code>test_deposit (test_bank_account.TestBankAccount) ... ok
test_environment (test_bank_account.TestBankAccount) ... skipped 'Only for dev environment'
test_fail (test_bank_account.TestBankAccount) ... expected failure
test_get_balance (test_bank_account.TestBankAccount) ... ok
test_has_loan (test_bank_account.TestBankAccount) ... skipped 'Not implemented yet'
test_server (test_bank_account.TestBankAccount) ... skipped 'Only for local testing'
test_transaction_log (test_bank_account.TestBankAccount) ... ok
test_withdraw (test_bank_account.TestBankAccount) ... ok
test_divide (test_calculator.TestCalculator) ... ok
test_multiply (test_calculator.TestCalculator) ... ok
test_substract (test_calculator.TestCalculator) ... ok
test_sum (test_calculator.TestCalculator) ... ok

----------------------------------------------------------------------
Ran 12 tests in 0.001s

OK (skipped=3, expected failures=1)
</output_code>
  <markdown>Obtenemos `test_environment (test_bank_account.TestBankAccount) ... skipped 'Only for dev environment'` porque ese test solo se va a pasar en el entorno de desarrollo y se supone que estamos en el servidor</markdown>
  <markdown>## Organizar los tests</markdown>
  <markdown>Podemos organizar los test organizando lo que se llaman `test suites`. Para ello vamos a crear un archivo llamado `test_suites.py` en la carpeta `tests`</markdown>
  <input_code>!cd testing_python &amp;&amp; cd tests &amp;&amp; touch test_suites.py</input_code>
  <markdown>Y ahora generamos dos test suite con los tests de `test_calculator` y `test_bank_account`</markdown>
  <input_code>!echo "import unittest"                                              &gt; testing_python/tests/test_suite_calculator.py
!echo ""                                                            &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo "from test_calculator import TestCalculator"                  &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo ""                                                            &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo "def calculator_suite():"                                     &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo "    suite = unittest.TestSuite()"                            &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo "    suite.addTest(TestCalculator('test_sum'))"               &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo "    suite.addTest(TestCalculator('test_substract'))"          &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo "    suite.addTest(TestCalculator('test_multiply'))"          &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo "    suite.addTest(TestCalculator('test_divide'))"          &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo "    return suite"                                            &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo ""                                                            &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo "if __name__ == '__main__':"                                  &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo "    runner = unittest.TextTestRunner()"                      &gt;&gt; testing_python/tests/test_suite_calculator.py
!echo "    runner.run(calculator_suite())"                          &gt;&gt; testing_python/tests/test_suite_calculator.py</input_code>
  <markdown>Ahora el de `test_bank_account`</markdown>
  <input_code>!echo "import unittest"                                              &gt; testing_python/tests/test_suite_bank_account.py
!echo ""                                                            &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "from test_bank_account import TestBankAccount"               &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo ""                                                            &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "def bank_account_suite():"                                   &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    suite = unittest.TestSuite()"                            &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    suite.addTest(TestBankAccount('test_deposit'))"          &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    suite.addTest(TestBankAccount('test_withdraw'))"         &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    suite.addTest(TestBankAccount('test_get_balance'))"      &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    suite.addTest(TestBankAccount('test_transaction_log'))"  &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    suite.addTest(TestBankAccount('test_has_loan'))"         &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    suite.addTest(TestBankAccount('test_server'))"           &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    suite.addTest(TestBankAccount('test_fail'))"             &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    suite.addTest(TestBankAccount('test_environment'))"      &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    return suite"                                            &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo ""                                                            &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "if __name__ == '__main__':"                                  &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    runner = unittest.TextTestRunner()"                      &gt;&gt; testing_python/tests/test_suite_bank_account.py
!echo "    runner.run(bank_account_suite())"                        &gt;&gt; testing_python/tests/test_suite_bank_account.py</input_code>
  <markdown>Podemos ejecutar solo los tests de `test_calculator` con el comando `python tests/test_suite_calculator.py`</markdown>
  <input_code>!cd testing_python &amp;&amp; python tests/test_suite_calculator.py</input_code>
  <output_code>Traceback (most recent call last):
  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_suite_calculator.py", line 3, in &lt;module&gt;
    from test_calculator import TestCalculator
  File "/home/wallabot/Documentos/web/portafolio/posts/testing_python/tests/test_calculator.py", line 2, in &lt;module&gt;
    from src.calculator import sum, substract, multiply, divide
ModuleNotFoundError: No module named 'src'
</output_code>
  <markdown>Vemos que no encuentra el módulo `src` de `test_calculator.py`, eso es porque no está en la ruta, así que vamos a añadirlo</markdown>
  <input_code>!cd testing_python &amp;&amp; PYTHONPATH=. python tests/test_suite_calculator.py</input_code>
  <output_code>....
----------------------------------------------------------------------
Ran 4 tests in 0.000s

OK
</output_code>
  <markdown>Vemos que solo ha pasado los test de `test_calculator`</markdown>
  <markdown>Vamos a pasar ahora los de `test_bank_account.py`</markdown>
  <input_code>!cd testing_python &amp;&amp; PYTHONPATH=. python tests/test_suite_bank_account.py</input_code>
  <output_code>....ssxs
----------------------------------------------------------------------
Ran 8 tests in 0.001s

OK (skipped=3, expected failures=1)
</output_code>
  <markdown>Y aquí vemos que pasa los tests de `test_bank_account`</markdown>
  <markdown>Hay que diferenciar con lo que hacíamos al principio, antes de usar `discover`, cuando hacíamos `!cd testing_python &amp;&amp; python -m unittest tests/test_calculator.py`. Porque en `test_calculator.py` podemos escribir todos los posibles test para `calculator.py`, pero con las `suite`s ejecutamos los test que queramos. Podríamos tener varias `suite`s para ejecutar los test que queramos de `test_calculator.py` y `test_bank_account.py`</markdown>
  <markdown>## Mejores prácticas a la hora de nombrar los test</markdown>
  <markdown>A la hora de nombrar los test viene bien seguir las siguientes pautas:
 * Una clase de test por cada clase de código
 * Todos los test deben empezar por `test_` para saber que es un código
 * A continuación debe ir el nombre de la función o método que se está probando
 * A continuación debe ir el escenario de la prueba, ya que un método o función puede tener varios escenarios de prueba. Por ejemplo con todos los posibles valores de entrada, con valores límite, con valores incorrectos, etc.
 * Por último, se debe añadir el resultado esperado

Por lo que un test debería tener el siguiente formato `test_&lt;nombre_funcion&gt;_&lt;escenario&gt;_&lt;resultado_esperado&gt;`</markdown>
  <markdown>## Mocking de APIs</markdown>
  <markdown>Supongamos que nuestro código llama a una API externa y queremos hacer tests de nuestro código sin depender de la API externa. Para ello podemos usar `unittest.mock` que viene por defecto en Python</markdown>
  <markdown>Primero vamos a crear un archivo llamado `api.py` en la carpeta `src`</markdown>
  <input_code>!echo "import requests"                                              &gt; testing_python/src/api.py
!echo ""                                                            &gt;&gt; testing_python/src/api.py
!echo "def get_api():"                                              &gt;&gt; testing_python/src/api.py
!echo "    url = 'https://jsonplaceholder.typicode.com/posts/1'"    &gt;&gt; testing_python/src/api.py
!echo "    try:"                                                    &gt;&gt; testing_python/src/api.py
!echo "        response = requests.get(url)"                        &gt;&gt; testing_python/src/api.py
!echo "        response.raise_for_status()"                         &gt;&gt; testing_python/src/api.py
!echo "        data = response.json()"                              &gt;&gt; testing_python/src/api.py
!echo "        print(data)"                                         &gt;&gt; testing_python/src/api.py
!echo "        return data"                                         &gt;&gt; testing_python/src/api.py
!echo "    except requests.exceptions.RequestException as e:"       &gt;&gt; testing_python/src/api.py
!echo "        print(f'error: {e}')"                                &gt;&gt; testing_python/src/api.py
!echo "        return None"                                         &gt;&gt; testing_python/src/api.py
!echo ""                                                            &gt;&gt; testing_python/src/api.py
!echo "if __name__ == '__main__':"                                  &gt;&gt; testing_python/src/api.py
!echo "    get_api()"                                               &gt;&gt; testing_python/src/api.py</input_code>
  <markdown>Vamos a ejecutar el archivo para ver qué devuelve</markdown>
  <input_code>!cd testing_python/src &amp;&amp; python api.py</input_code>
  <output_code>{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto'}
</output_code>
  <markdown>Ahora creamos el test</markdown>
  <input_code>!echo "import unittest"                                              &gt; testing_python/tests/test_api.py
!echo "from src.api import get_api"                                 &gt;&gt; testing_python/tests/test_api.py
!echo ""                                                            &gt;&gt; testing_python/tests/test_api.py
!echo "class TestApi(unittest.TestCase):"                           &gt;&gt; testing_python/tests/test_api.py
!echo "    def test_get_api(self):"                                 &gt;&gt; testing_python/tests/test_api.py
!echo "        data = get_api()"                                    &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIsNotNone(data)"                          &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIsInstance(data, dict)"                   &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIn('userId', data)"                       &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIn('id', data)"                           &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIn('title', data)"                        &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIn('body', data)"                         &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertEqual(data['userId'], 1)"                 &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertEqual(data['id'], 1)"                     &gt;&gt; testing_python/tests/test_api.py</input_code>
  <markdown>Pasamos los tests</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest tests/test_api.py</input_code>
  <output_code>{'userId': 1, 'id': 1, 'title': 'sunt aut facere repellat provident occaecati excepturi optio reprehenderit', 'body': 'quia et suscipit\nsuscipit recusandae consequuntur expedita et cum\nreprehenderit molestiae ut ut quas totam\nnostrum rerum est autem sunt rem eveniet architecto'}
.
----------------------------------------------------------------------
Ran 1 test in 0.074s

OK
</output_code>
  <markdown>Vamos a pasar los test de `bank_account` para ver cuánto tardaba</markdown>
  <input_code>!cd testing_python &amp;&amp; PYTHONPATH=. python tests/test_suite_bank_account.py</input_code>
  <output_code>....ssxs
----------------------------------------------------------------------
Ran 8 tests in 0.001s

OK (skipped=3, expected failures=1)
</output_code>
  <markdown>Como vemos 8 tests han tardado 0.001 segundos, mientras que 1 solo test de la API ha tardado 0.074 segundos. Esto puede hacer que un código con muchas llamadas a una API tarde mucho en ejecutar los tests. Además, corremos el riesgo de que si cambia la API y no nos devuelve lo que esperamos, los tests fallarán, aunque nuestro código esté bien. Así que para eso se mockean las APIs</markdown>
  <markdown>Vamos a ver cómo hacerlo</markdown>
  <input_code>!echo "import unittest"                                              &gt; testing_python/tests/test_api.py
!echo "from src.api import get_api"                                 &gt;&gt; testing_python/tests/test_api.py
!echo "from unittest.mock import patch"                             &gt;&gt; testing_python/tests/test_api.py
!echo ""                                                            &gt;&gt; testing_python/tests/test_api.py
!echo "class TestApi(unittest.TestCase):"                           &gt;&gt; testing_python/tests/test_api.py
!echo "    @patch('src.api.requests.get')"                          &gt;&gt; testing_python/tests/test_api.py
!echo "    def test_get_api(self, mock_get):"                       &gt;&gt; testing_python/tests/test_api.py
!echo "        mock_get.return_value.status_code = 200"             &gt;&gt; testing_python/tests/test_api.py
!echo "        mock_get.return_value.json.return_value = {"         &gt;&gt; testing_python/tests/test_api.py
!echo "            'userId': 1,"                                    &gt;&gt; testing_python/tests/test_api.py
!echo "            'id': 1,"                                        &gt;&gt; testing_python/tests/test_api.py
!echo "            'title': 'title',"                               &gt;&gt; testing_python/tests/test_api.py
!echo "            'body': 'body'"                                  &gt;&gt; testing_python/tests/test_api.py
!echo "        }"                                                   &gt;&gt; testing_python/tests/test_api.py
!echo "        data = get_api()"                                    &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIsNotNone(data)"                          &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIsInstance(data, dict)"                   &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIn('userId', data)"                       &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIn('id', data)"                           &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIn('title', data)"                        &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertIn('body', data)"                         &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertEqual(data['userId'], 1)"                 &gt;&gt; testing_python/tests/test_api.py
!echo "        self.assertEqual(data['id'], 1)"                     &gt;&gt; testing_python/tests/test_api.py
!echo "        "                                                    &gt;&gt; testing_python/tests/test_api.py
!echo "        mock_get.assert_called_once_with('https://jsonplaceholder.typicode.com/posts/1')" &gt;&gt; testing_python/tests/test_api.py</input_code>
  <markdown>Lo que hemos hecho ha sido
 * Importar `patch` de `unittest.mock`. 
 * Hemos puesto un decorador a la función `test_get_data` y hemos pasado como parámetro al decorador la función que queremos mockear. 
 * Hemos creado un objeto `mock_get` que es el que va a sustituir a la función original con el método `return_value` que es el valor que va a devolver la función mockeada. 
 * Cuando se llame a `get_api()` en vez de ejecutarse la función original, se obtendrá en `data` el valor que hemos mockeado en `return_value`
 * Por último hemos añadido la comprobación de que se puede llamar a la `URL` de la API</markdown>
  <input_code>!cd testing_python &amp;&amp; python -m unittest tests/test_api.py</input_code>
  <output_code>{'userId': 1, 'id': 1, 'title': 'title', 'body': 'body'}
.
----------------------------------------------------------------------
Ran 1 test in 0.001s

OK
</output_code>
  <markdown>Como vemos, ahora solo tarda 0.002 segundos.</markdown>
  <markdown>## Modificar el resultado de objetos mediante `patch`</markdown>
  <markdown>Supongamos que queremos modificar el método de sacar dinero para que solo se pueda hacer en un rango de horas

Primero modificamos la función de retirar dinero

```python
    def withdraw(self, amount):
        now = datetime.now()
        if now.hour &lt; 7 or now.hour &gt; 18:
            print('Out of hours')
            return None
        if amount &gt; 0:
            self.balance -= amount
            self._log_transaction(f'Withdraw {amount}, new balance {self.balance}')
        return self.balance
```</markdown>
  <input_code>!echo "from datetime import datetime"                                                        &gt; testing_python/src/bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/src/bank_account.py
!echo "class BankAccount:"                                                                  &gt;&gt; testing_python/src/bank_account.py
!echo "    def __init__(self, balance=0, log_file=None):"                                   &gt;&gt; testing_python/src/bank_account.py
!echo "        self.balance = balance"                                                      &gt;&gt; testing_python/src/bank_account.py
!echo "        self.log_file = log_file"                                                    &gt;&gt; testing_python/src/bank_account.py
!echo "        self._log_transaction('Account created')"                                    &gt;&gt; testing_python/src/bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/src/bank_account.py
!echo "    def _log_transaction(self, message):"                                            &gt;&gt; testing_python/src/bank_account.py
!echo "        if self.log_file:"                                                           &gt;&gt; testing_python/src/bank_account.py
!echo "            with open(self.log_file, 'a') as file:"                                  &gt;&gt; testing_python/src/bank_account.py
!echo "                file.write(f'{message}\\\\n')"                                       &gt;&gt; testing_python/src/bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/src/bank_account.py
!echo "    def deposit(self, amount):"                                                      &gt;&gt; testing_python/src/bank_account.py
!echo "        if amount &gt; 0:"                                                              &gt;&gt; testing_python/src/bank_account.py
!echo "            self.balance += amount"                                                  &gt;&gt; testing_python/src/bank_account.py
!echo "            self._log_transaction(f'Deposit {amount}, new balance {self.balance}')"  &gt;&gt; testing_python/src/bank_account.py
!echo "        return self.balance"                                                         &gt;&gt; testing_python/src/bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/src/bank_account.py
!echo "    def withdraw(self, amount):"                                                     &gt;&gt; testing_python/src/bank_account.py
!echo "        now = datetime.now()"                                                        &gt;&gt; testing_python/src/bank_account.py
!echo "        if now.hour &lt; 7 or now.hour &gt; 18:"                                           &gt;&gt; testing_python/src/bank_account.py
!echo "            print('Out of hours')"                                                   &gt;&gt; testing_python/src/bank_account.py
!echo "            return None"                                                             &gt;&gt; testing_python/src/bank_account.py
!echo "        if amount &gt; 0:"                                                              &gt;&gt; testing_python/src/bank_account.py
!echo "            self.balance -= amount"                                                  &gt;&gt; testing_python/src/bank_account.py
!echo "            self._log_transaction(f'Withdraw {amount}, new balance {self.balance}')" &gt;&gt; testing_python/src/bank_account.py
!echo "        return self.balance"                                                         &gt;&gt; testing_python/src/bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/src/bank_account.py
!echo "    def get_balance(self):"                                                          &gt;&gt; testing_python/src/bank_account.py
!echo "        self._log_transaction(f'Balance check, balance {self.balance}')"             &gt;&gt; testing_python/src/bank_account.py
!echo "        return self.balance"                                                         &gt;&gt; testing_python/src/bank_account.py</input_code>
  <markdown>Ahora tenemos que poder probar la retirada de dinero a distintas horas, pero no podemos estar cambiando la hora del sistema, ni podemos esperar a que sea una hora determinada para hacer la prueba. Para eso podemos usar `patch` para modificar el resultado de `datetime.now()`

```python
    @patch('src.bank_account.datetime.now')
    def test_withdraw_during_working_hours(self, mock_now):
        mock_now.return_value.hour = 10
new_balance = self.account.withdraw(200)
self.assertEqual(new_balance, 800, 'Balance is not correct')

    @patch('src.bank_account.datetime.now')
    def test_withdraw_during_non_working_hours(self, mock_now):
mock_now.return_value.hour = 20
new_balance = self.account.withdraw(200)
self.assertIsNone(new_balance, 'Balance is not correct')
```</markdown>
  <input_code>!echo "import unittest"                                                                      &gt; testing_python/tests/test_bank_account.py
!echo "from unittest.mock import patch"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "import os"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "SERVER = True"                                                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "ENVIRONMENT = 'server'"                                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000, log_file='test_log.txt')"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def tearDown(self):"                                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        if os.path.exists('test_log.txt'):"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            os.remove('test_log.txt')"                                               &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Balance is not correct')"                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @patch('src.bank_account.datetime.now')"                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw_during_working_hours(self, mock_now):"                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        mock_now.return_value.hour = 10"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Balance is not correct')"                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @patch('src.bank_account.datetime.now')"                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw_during_non_working_hours(self, mock_now):"                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        mock_now.return_value.hour = 20"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertIsNone(new_balace, 'Balance is not correct')"                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_transaction_log(self):"                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.deposit(500)"                                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.withdraw(200)"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.get_balance()"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(os.path.exists('test_log.txt'))"                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        with open('test_log.txt', 'r') as file:"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            content = file.readlines()"                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(content, ["                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Withdraw 200, new balance 1300\\\n', "                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1300\\\n'"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            ])"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skip('Not implemented yet')"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_has_loan(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertFalse(self.account.has_loan())"                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skipIf(SERVER, 'Only for local testing')"                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_server(self):"                                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(SERVER)"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.expectedFailure"                                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_fail(self):"                                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(1200)"                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Not enough money')"                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skipUnless(ENVIRONMENT == 'dev', 'Only for dev environment')"          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_environment(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(ENVIRONMENT, 'dev')"                                        &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Pasamos los tests</markdown>
  <input_code>!cd testing_python &amp;&amp; PYTHONPATH=. python tests/test_suite_bank_account.py</input_code>
  <output_code>....ssxs
----------------------------------------------------------------------
Ran 8 tests in 0.001s

OK (skipped=3, expected failures=1)
</output_code>
  <markdown>## Parametrizar pruebas con `subTest`</markdown>
  <markdown>Supongamos que queremos hacer varias pruebas de sacar dinero para diferentes valores, podríamos escribir una prueba para cada valor de dinero que queremos probar, pero sería repetir código. Para eso podemos usar `subTest` que nos permite hacer varias pruebas con un solo test

Lo que hacemos es crear un diccionario con los diferentes valores que queremos probar y el resultado esperado, y luego con un bucle `for` y `subTest` hacemos las pruebas. Así quedaría el test del método `withdraw`

```python
    def test_withdraw(self):
        test_cases = {
            test_200: {
                'amount': 200,
                'expected': 800
            },
            test_400: {
                'amount': 400,
                'expected': 600
            },
            test_600: {
                'amount': 600,
                'expected': 400
            },
            test_800: {
                'amount': 800,
                'expected': 200
            },
            test_1000: {
                'amount': 1000,
                'expected': 0
            }
        }

        for test_name, test_case in test_cases.items():
            with self.subTest(test_name):
                self.account = BankAccount(balance=1000, log_file='test_log.txt')
                new_balance = self.account.withdraw(test_case['amount'])
self.assertEqual(new_balance, test_case['expected'], 'Balance is not correct')
```</markdown>
  <input_code>!echo "import unittest"                                                                      &gt; testing_python/tests/test_bank_account.py
!echo "from unittest.mock import patch"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "import os"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "from src.bank_account import BankAccount"                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "SERVER = True"                                                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "ENVIRONMENT = 'server'"                                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "class TestBankAccount(unittest.TestCase):"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def setUp(self):"                                                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account = BankAccount(balance=1000, log_file='test_log.txt')"           &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def tearDown(self):"                                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        if os.path.exists('test_log.txt'):"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            os.remove('test_log.txt')"                                               &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_deposit(self):"                                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.deposit(500)"                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 1500)"                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        test_cases = {"                                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'test_200': {"                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                'amount': 200,"                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                'expected': 800"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            },"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'test_400': {"                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                'amount': 400,"                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                'expected': 600"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            },"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'test_600': {"                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                'amount': 600,"                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                'expected': 400"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            },"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'test_800': {"                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                'amount': 800,"                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                'expected': 200"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            },"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'test_1000': {"                                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                'amount': 1000,"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                'expected': 0"                                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            }"                                                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        }"                                                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        for test_case, values in test_cases.items():"                                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            with self.subTest(test_case=test_case):"                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                self.account = BankAccount(balance=1000, log_file='test_log.txt')"   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                new_balace = self.account.withdraw(values['amount'])"                &gt;&gt; testing_python/tests/test_bank_account.py
!echo "                self.assertEqual(new_balace, values['expected'], 'Balance is not correct')" &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @patch('src.bank_account.datetime.now')"                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw_during_working_hours(self, mock_now):"                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        mock_now.return_value.hour = 10"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Balance is not correct')"                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @patch('src.bank_account.datetime.now')"                                         &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_withdraw_during_non_working_hours(self, mock_now):"                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        mock_now.return_value.hour = 20"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(200)"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertIsNone(new_balace, 'Balance is not correct')"                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_get_balance(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        balance = self.account.get_balance()"                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(balance, 1000)"                                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_transaction_log(self):"                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.deposit(500)"                                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.withdraw(200)"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.account.get_balance()"                                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(os.path.exists('test_log.txt'))"                             &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        with open('test_log.txt', 'r') as file:"                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            content = file.readlines()"                                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(content, ["                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Account created\\\n', "                                                 &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Deposit 500, new balance 1500\\\n', "                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Withdraw 200, new balance 1300\\\n', "                                  &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            'Balance check, balance 1300\\\n'"                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "            ])"                                                                      &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skip('Not implemented yet')"                                           &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_has_loan(self):"                                                        &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertFalse(self.account.has_loan())"                                   &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skipIf(SERVER, 'Only for local testing')"                              &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_server(self):"                                                          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertTrue(SERVER)"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.expectedFailure"                                                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_fail(self):"                                                            &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        new_balace = self.account.withdraw(1200)"                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(new_balace, 800, 'Not enough money')"                       &gt;&gt; testing_python/tests/test_bank_account.py
!echo ""                                                                                    &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    @unittest.skipUnless(ENVIRONMENT == 'dev', 'Only for dev environment')"          &gt;&gt; testing_python/tests/test_bank_account.py
!echo "    def test_environment(self):"                                                     &gt;&gt; testing_python/tests/test_bank_account.py
!echo "        self.assertEqual(ENVIRONMENT, 'dev')"                                        &gt;&gt; testing_python/tests/test_bank_account.py</input_code>
  <markdown>Pasamos los tests</markdown>
  <input_code>!cd testing_python &amp;&amp; PYTHONPATH=. python tests/test_suite_bank_account.py</input_code>
  <output_code>....ssxs
----------------------------------------------------------------------
Ran 8 tests in 0.001s

OK (skipped=3, expected failures=1)
</output_code>
  <markdown>## Cobertura de test</markdown>
  <markdown>Podemos ver la cobertura de tests que tenemos, ya que aunque pensemos que hemos probado todo, puede que haya partes del código que no hemos probado. Para ello vamos a usar la librería `coverage`</markdown>
  <input_code>!cd testing_python &amp;&amp; coverage run -m unittest tests/test_calculator.py</input_code>
  <output_code>....
----------------------------------------------------------------------
Ran 4 tests in 0.000s

OK
</output_code>
  <markdown>Como vemos, solo hemos pasado los test de `test_calculator`, pero aún no sabemos la cobertura</markdown>
  <markdown>### Reporte de cobertura</markdown>
  <markdown>Después de haber ejecutado `coverage` podemos pedirle un reporte de la cobertura de test con el comando `coverage report`</markdown>
  <input_code>!cd testing_python &amp;&amp; coverage report</input_code>
  <output_code>Name                       Stmts   Miss  Cover
----------------------------------------------
src/calculator.py              8      0   100%
tests/test_calculator.py      11      0   100%
----------------------------------------------
TOTAL                         19      0   100% 
</output_code>
  <markdown>O pedírselo mediante un archivo HTML con el comando `coverage html`</markdown>
  <input_code>!cd testing_python &amp;&amp; coverage html</input_code>
  <output_code>Wrote HTML report to ]8;;file:///home/wallabot/Documentos/web/portafolio/posts/testing_python/htmlcov/index.htmlhtmlcov/index.html]8;;
</output_code>
  <markdown>Se nos crea un archivo `index.html` en la carpeta `htmlcov` que podemos abrir en el navegador y ver la cobertura de los test</markdown>
</notebook>