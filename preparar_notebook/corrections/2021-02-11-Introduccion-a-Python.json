{
    "correccion0": {
     "original": "Para escribir un `string` muy largo y no tener una fila que ocupe mucho espacio se puede introducir en varias lineas",
     "correccion": "Para escribir un `string` muy largo y no tener una fila que ocupe mucho espacio se puede introducir en varias líneas",
     "explicación": "Se ha corregido \"lineas\" por \"líneas\"."
    },
    "correccion1": {
     "original": "Sin embargo vemos que en medio ha metido el caracter `\\n`, este caracter indica el salto de linea. Si usamos la función `print()` veremos como ya no aparece",
     "correccion": "Sin embargo vemos que en medio ha metido el carácter `\\n`, este carácter indica el salto de línea. Si usamos la función `print()` veremos como ya no aparece",
     "explicación": "Se ha corregido \"caracter\" por \"carácter\" (dos veces) y \"linea\" por \"línea\"."
    },
    "correccion2": {
     "original": "Como hemos dicho los strings son cadenas de caracteres, por lo que podemos navegar e iterar a traves de ellos",
     "correccion": "Como hemos dicho los strings son cadenas de caracteres, por lo que podemos navegar e iterar a través de ellos",
     "explicación": "Se ha corregido \"a traves\" por \"a través\"."
    },
    "correccion3": {
     "original": "Antes explicamos que el caracter `\\n` correspondía a una salto de linea, este caracter especial corresponde a una serie de caracteres especiales llamados `Escape Characters`. Veamos otros",
     "correccion": "Antes explicamos que el carácter `\\n` correspondía a un salto de línea, este carácter especial corresponde a una serie de caracteres especiales llamados `Escape Characters`. Veamos otros",
     "explicación": "Se ha corregido \"caracter\" por \"carácter\" (dos veces), \"una salto\" por \"un salto\" y \"linea\" por \"línea\"."
    },
    "correccion4": {
     "original": "Ahora tenemos el problema de si queremos añadir el caracter `\\` ya que como hemos visto es un `escape character`, así que lo solucionamos poniendo doble barra (backslash) `\\\\`",
     "correccion": "Ahora tenemos el problema de si queremos añadir el carácter `\\` ya que como hemos visto es un `escape character`, así que lo solucionamos poniendo doble barra (backslash) `\\\\`",
     "explicación": "Se ha corregido \"caracter\" por \"carácter\"."
    },
    "correccion5": {
     "original": "Ya vimos antes el `escape character` de nueva linea `\\n`",
     "correccion": "Ya vimos antes el `escape character` de nueva línea `\\n`",
     "explicación": "Se ha corregido \"linea\" por \"línea\"."
    },
    "correccion6": {
     "original": "Si queremos escribir desde el inicio de linea añadimos `\\r`",
     "correccion": "Si queremos escribir desde el inicio de línea añadimos `\\r`",
     "explicación": "Se ha corregido \"linea\" por \"línea\"."
    },
    "correccion7": {
     "original": "Podemos borrar un caracter con `\\b`",
     "correccion": "Podemos borrar un carácter con `\\b`",
     "explicación": "Se ha corregido \"caracter\" por \"carácter\"."
    },
    "correccion8": {
     "original": "Podemos añadir el codigo [ASCII](http://www.asciitable.com/) en octal mediante `\\ooo`",
     "correccion": "Podemos añadir el código [ASCII](http://www.asciitable.com/) en octal mediante `\\ooo`",
     "explicación": "Se ha corregido \"codigo\" por \"código\"."
    },
    "correccion9": {
     "original": "O añadir el codigo [ASCII](http://www.asciitable.com/) en hexadecimal mediante `\\xhh`",
     "correccion": "O añadir el código [ASCII](http://www.asciitable.com/) en hexadecimal mediante `\\xhh`",
     "explicación": "Se ha corregido \"codigo\" por \"código\"."
    },
    "correccion10": {
     "original": "Numeros de tipo entero",
     "correccion": "Números de tipo entero",
     "explicación": "Se ha corregido \"Numeros\" por \"Números\"."
    },
    "correccion11": {
     "original": "No se puede convertir un numero `complex` a tipo `int` o tipo `float`",
     "correccion": "No se puede convertir un número `complex` a tipo `int` o tipo `float`",
     "explicación": "Se ha corregido \"numero\" por \"número\"."
    },
    "correccion12": {
     "original": "Si se omite el primer número del rango singnifica que queremos desde el primer item de la lista hasta el item indicado, es decir, si queremos desde el primer item hasta el quinto usamos `[:5]`",
     "correccion": "Si se omite el primer número del rango significa que queremos desde el primer item de la lista hasta el item indicado, es decir, si queremos desde el primer item hasta el quinto usamos `[:5]`",
     "explicación": "Se ha corregido \"singnifica\" por \"significa\"."
    },
    "correccion13": {
     "original": "Otras de las cosas potentes de Python son las `list comprehension`, que permiten hacer todo en una sola linea y que el código quede más compacto",
     "correccion": "Otras de las cosas potentes de Python son las `list comprehension`, que permiten hacer todo en una sola línea y que el código quede más compacto",
     "explicación": "Se ha corregido \"linea\" por \"línea\"."
    },
    "correccion14": {
     "original": "También nos las ordena allfabéticamente",
     "correccion": "También nos las ordena alfabéticamente",
     "explicación": "Se ha corregido \"allfabéticamente\" por \"alfabéticamente\"."
    },
    "correccion15": {
     "original": "Las tuplas son similares a las listas, guardan múltiples items en una variable, pueden contener items de distintos tipos, pero no s epueden modificar, ni reordenar. Se definen mediante `()`, con los items separados por comas\n",
     "correccion": "Las tuplas son similares a las listas, guardan múltiples items en una variable, pueden contener items de distintos tipos, pero no se pueden modificar, ni reordenar. Se definen mediante `()`, con los items separados por comas\n",
     "explicación": "Se ha corregido \"s epueden\" por \"se pueden\"."
    },
    "correccion16": {
     "original": "Se puede obtener su longitud mediante la función `len()`",
     "correccion": "Se puede obtener su longitud mediante la función `len()`",
     "explicación": "Se ha eliminado un espacio innecesario entre \"len\" y \"(\"."
    },
    "correccion17": {
     "original": "Estos métodos de union elimina los duplicados, pero si queremos obtener los items duplicados en dos sets usamos el método `intersection()`",
     "correccion": "Estos métodos de unión eliminan los duplicados, pero si queremos obtener los items duplicados en dos sets usamos el método `intersection()`",
     "explicación": "Se ha corregido \"union\" por \"unión\"."
    },
    "correccion18": {
     "original": "Ahora al revés, si queremos quedarnos con los no duplicados usamos el método `symmetric_difference()`. \n",
     "correccion": "Ahora al revés, si queremos quedarnos con los no duplicados usamos el método `symmetric_difference()`. \n",
     "explicación": "Se ha corregido \"al reves\" por \"al revés\"."
    },
    "correccion19": {
     "original": "Por úlitmo, con `del` se puede eliminar el set",
     "correccion": "Por último, con `del` se puede eliminar el set",
     "explicación": "Se ha corregido \"úlitmo\" por \"último\"."
    },
    "correccion20": {
     "original": "Los `frozenset`s son como los `set`s pero con la salvedad de que son inmutables, al igual que las `tupla`s son como las `list`s pero inmutables. Por lo que no podremos añadir o eliminar items\n",
     "correccion": "Los `frozenset`s son como los `set`s pero con la salvedad de que son inmutables, al igual que las `tupla`s son como las `list`s pero inmutables. Por lo que no podremos añadir o eliminar items\n",
     "explicación": "Se ha corregido `items`s por `items`."
    },
    "correccion21": {
     "original": "Cualquier número escepto el 0\n",
     "correccion": "Cualquier número excepto el 0\n",
     "explicación": "Se ha corregido \"escepto\" por \"excepto\"."
    },
    "correccion22": {
     "original": "También se pueden crear mediante su contructor `bytes()`",
     "correccion": "También se pueden crear mediante su constructor `bytes()`",
     "explicación": "Se ha corregido \"contructor\" por \"constructor\"."
    },
    "correccion23": {
     "original": "O medainte la repetición con el operador `*`",
     "correccion": "O mediante la repetición con el operador `*`",
     "explicación": "Se ha corregido \"medainte\" por \"mediante\"."
    },
    "correccion24": {
     "original": "Oeprador resta `-`",
     "correccion": "Operador resta `-`",
     "explicación": "Se ha corregido \"Oeprador\" por \"Operador\"."
    },
    "correccion25": {
     "original": "Para poder utilizar las herramientas de control de flujo es necesario añadir la sentencia, dos puntos `:` y en una nueva línea escribir el códgo con indentación\n",
     "correccion": "Para poder utilizar las herramientas de control de flujo es necesario añadir la sentencia, dos puntos `:` y en una nueva línea escribir el código con indentación\n",
     "explicación": "Se ha corregido \"códgo\" por \"código\"."
    },
    "correccion26": {
     "original": "Si por ejemplo queremos hacer la estructura del `if` pero no queremos, de momento, codificar una de las condiciones podemos usar `pass`",
     "correccion": "Si por ejemplo queremos hacer la estructura del `if` pero no queremos, de momento, codificar una de las condiciones, podemos usar `pass`",
     "explicación": "Se ha añadido una coma después de \"condiciones\"."
    },
    "correccion27": {
     "original": "Si queremos que una de las iteracciones no se ejecute por alguna razón usamos `continue`",
     "correccion": "Si queremos que una de las iteraciones no se ejecute por alguna razón usamos `continue`",
     "explicación": "Se ha corregido \"iteracciones\" por \"iteraciones\"."
    },
    "correccion28": {
     "original": "El bucle `for` se usa para ejecutar código mientras se itera por una secuencia, esta secuencia puede ser un cualquir elemento iterable de Python (`string`, `lista`, `tupla`, `range`, `diccionario`, `set`)",
     "correccion": "El bucle `for` se usa para ejecutar código mientras se itera por una secuencia, esta secuencia puede ser un cualquier elemento iterable de Python (`string`, `lista`, `tupla`, `range`, `diccionario`, `set`)",
     "explicación": "Se ha corregido \"cualquir\" por \"cualquier\"."
    },
    "correccion29": {
     "original": "Si por ejemplo queremos hacer la estructura del `for` pero no queremos, de momento, codificar el interior podemos usar `pass`",
     "correccion": "Si por ejemplo queremos hacer la estructura del `for` pero no queremos, de momento, codificar el interior, podemos usar `pass`",
     "explicación": "Se ha añadido una coma después de \"interior\"."
    },
    "correccion30": {
     "original": "Se puede añadir una explicación de una fucnión que creemos mediante un comentario al inicio de la función, de esta manera cuando llamemos a la `built in function` `help()` nos mostrará dicha explicación.",
     "correccion": "Se puede añadir una explicación de una función que creemos mediante un comentario al inicio de la función, de esta manera cuando llamemos a la `built in function` `help()` nos mostrará dicha explicación.",
     "explicación": "Se ha corregido \"fucnión\" por \"función\"."
    },
    "correccion31": {
     "original": "Los decoradores son una funcionalidad de Python que premiten añadir características nuevas a una función\n",
     "correccion": "Los decoradores son una funcionalidad de Python que permiten añadir características nuevas a una función\n",
     "explicación": "Se ha corregido \"premiten\" por \"permiten\"."
    },
    "correccion32": {
     "original": "Ahora podemo iterar con el objeto de nuestra clase con bucles `for` por ejemplo",
     "correccion": "Ahora podemos iterar con el objeto de nuestra clase con bucles `for` por ejemplo",
     "explicación": "Se ha corregido \"podemo\" por \"podemos\"."
    },
    "correccion33": {
     "original": "Nos puede interesar llamar a un objeto de una función como una clase, esto se puede conseguir añadiendo la función `__call__` a la clase",
     "correccion": "Nos puede interesar llamar a un objeto de una función como una clase, esto se puede conseguir añadiendo la función `__call__` a la clase",
     "explicación": "Se ha eliminado un espacio innecesario entre \"una clase\" y \"esto\"."
    },
    "correccion34": {
     "original": "Cuando creamos una clase, podemos hacer que algunos atributos o funciones sean privados y no se pueda acceder desde fuera de la clase, para ello hay qye añadir `__` antres del atributo a clase",
     "correccion": "Cuando creamos una clase, podemos hacer que algunos atributos o funciones sean privados y no se pueda acceder desde fuera de la clase, para ello hay que añadir `__` antes del atributo a clase",
     "explicación": "Se ha corregido \"qye\" por \"que\" y \"antres\" por \"antes\"."
    },
    "correccion35": {
     "original": "Podemos iterar por un objeto iterable obteniendo en cada iteracción su indice y su valor mediante el método `enumerate()`",
     "correccion": "Podemos iterar por un objeto iterable obteniendo en cada iteración su índice y su valor mediante el método `enumerate()`",
     "explicación": "Se ha corregido \"iteracción\" por \"iteración\" y \"indice\" por \"índice\"."
    },
    "correccion36": {
     "original": "> Tip: En los cuadernos Jupyter (Colab es un cuaderno Jupyter en linea) si escribimos el caracter `!` antes de un comando podremos ejecutar comandos de consola",
     "correccion": "> Tip: En los cuadernos Jupyter (Colab es un cuaderno Jupyter en línea) si escribimos el carácter `!` antes de un comando podremos ejecutar comandos de consola",
     "explicación": "Se ha corregido \"linea\" por \"línea\" y \"caracter\" por \"carácter\"."
    },
    "correccion37": {
     "original": "Vemos que solo se ejecuta el `print`, pero no la función `funcion_del_modulo`. Si queremos tener la dualidad de funcionalidad del archivo `modulo3.py`, es decir, que podamos importarlo desde otro módulo sin que se ejecute como un script y ejecutarlo solo y que se ejecute la función que nosotros queremos se usa un `entry point`. Esto es, usar la condición `if __name__ == '__main__':` y a continuación indicar qué queremos que se ejecute. Veámoslo con un ejemplo, voy a reescribir el archivo `modulo3.py`",
     "correccion": "Vemos que solo se ejecuta el `print`, pero no la función `funcion_del_modulo`. Si queremos tener la dualidad de funcionalidad del archivo `modulo3.py`, es decir, que podamos importarlo desde otro módulo sin que se ejecute como un script y ejecutarlo solo y que se ejecute la función que nosotros queremos, se usa un `entry point`. Esto es, usar la condición `if __name__ == '__main__':` y a continuación indicar qué queremos que se ejecute. Veámoslo con un ejemplo, voy a reescribir el archivo `modulo3.py`",
     "explicación": "Se ha añadido una coma después de \"queremos\"."
    }
   }